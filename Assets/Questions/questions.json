{
  "quizzes": [
    {
      "rank": "junior",
      "subjects": {
        "Unity Basics": [
          {
            "title": "What is the main panel used to manage objects in a scene?",
            "short_title": "Main panel for managing objects",
            "answers": [
              {
                "answer": "Console",
                "right": false
              },
              {
                "answer": "Inspector",
                "right": false
              },
              {
                "answer": "Hierarchy",
                "right": true
              },
              {
                "answer": "Project",
                "right": false
              }
            ]
          },
          {
            "title": "What component is responsible for rendering a 3D object in Unity?",
            "short_title": "Component for rendering 3D objects",
            "answers": [
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": true
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main panel used to manage objects in a scene?",
            "short_title": "Main panel for managing objects",
            "answers": [
              {
                "answer": "Console",
                "right": false
              },
              {
                "answer": "Inspector",
                "right": false
              },
              {
                "answer": "Hierarchy",
                "right": true
              },
              {
                "answer": "Project",
                "right": false
              }
            ]
          },
          {
            "title": "Which component is required to make a GameObject respond to physics?",
            "short_title": "Physics component",
            "answers": [
              {
                "answer": "Transform",
                "right": false
              },
              {
                "answer": "Rigidbody",
                "right": true
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity panel shows assets like textures, models, and scripts?",
            "short_title": "Panel for assets",
            "answers": [
              {
                "answer": "Hierarchy",
                "right": false
              },
              {
                "answer": "Scene",
                "right": false
              },
              {
                "answer": "Project",
                "right": true
              },
              {
                "answer": "Inspector",
                "right": false
              }
            ]
          },
          {
            "title": "What file format does Unity use for storing scenes?",
            "short_title": "Scene file format",
            "answers": [
              {
                "answer": ".unityscene",
                "right": false
              },
              {
                "answer": ".scene",
                "right": false
              },
              {
                "answer": ".unity",
                "right": true
              },
              {
                "answer": ".level",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Update()' function do in Unity?",
            "short_title": "Purpose of Update()",
            "answers": [
              {
                "answer": "Runs once at the start of the game",
                "right": false
              },
              {
                "answer": "Runs every frame",
                "right": true
              },
              {
                "answer": "Runs when a collision occurs",
                "right": false
              },
              {
                "answer": "Runs when the game object is destroyed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Transform' component?",
            "short_title": "Transform component",
            "answers": [
              {
                "answer": "To handle physics interactions",
                "right": false
              },
              {
                "answer": "To define the position, rotation, and scale of a GameObject",
                "right": true
              },
              {
                "answer": "To render 3D objects",
                "right": false
              },
              {
                "answer": "To manage animations",
                "right": false
              }
            ]
          },
          {
            "title": "Which panel is used to view and edit the properties of a selected GameObject?",
            "short_title": "Panel for editing properties",
            "answers": [
              {
                "answer": "Hierarchy",
                "right": false
              },
              {
                "answer": "Project",
                "right": false
              },
              {
                "answer": "Inspector",
                "right": true
              },
              {
                "answer": "Console",
                "right": false
              }
            ]
          }
        ],
        "C# Introduction": [
          {
            "title": "What keyword is used to declare a variable in C#?",
            "short_title": "Keyword for variable declaration",
            "answers": [
              {
                "answer": "var",
                "right": true
              },
              {
                "answer": "let",
                "right": false
              },
              {
                "answer": "dim",
                "right": false
              },
              {
                "answer": "declare",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default access modifier for class members in C#?",
            "short_title": "Default access modifier",
            "answers": [
              {
                "answer": "public",
                "right": false
              },
              {
                "answer": "private",
                "right": true
              },
              {
                "answer": "protected",
                "right": false
              },
              {
                "answer": "internal",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'using' statement in C#?",
            "short_title": "Purpose of 'using' statement",
            "answers": [
              {
                "answer": "To declare a namespace",
                "right": false
              },
              {
                "answer": "To manage resources and ensure disposal",
                "right": true
              },
              {
                "answer": "To import external libraries",
                "right": false
              },
              {
                "answer": "To define a function scope",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to prevent a method from being overridden?",
            "short_title": "Keyword to prevent method override",
            "answers": [
              {
                "answer": "static",
                "right": false
              },
              {
                "answer": "sealed",
                "right": true
              },
              {
                "answer": "final",
                "right": false
              },
              {
                "answer": "virtual",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'int' data type represent in C#?",
            "short_title": "int data type",
            "answers": [
              {
                "answer": "A 32-bit integer",
                "right": true
              },
              {
                "answer": "A floating-point number",
                "right": false
              },
              {
                "answer": "A text string",
                "right": false
              },
              {
                "answer": "A boolean value",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'if' statement in C#?",
            "short_title": "Purpose of 'if'",
            "answers": [
              {
                "answer": "To execute code based on a condition",
                "right": true
              },
              {
                "answer": "To define a loop",
                "right": false
              },
              {
                "answer": "To declare a class",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'bool' type store in C#?",
            "short_title": "bool type",
            "answers": [
              {
                "answer": "True or false values",
                "right": true
              },
              {
                "answer": "Numbers",
                "right": false
              },
              {
                "answer": "Text",
                "right": false
              },
              {
                "answer": "Objects",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to create a loop that runs a set number of times?",
            "short_title": "Loop keyword",
            "answers": [
              {
                "answer": "for",
                "right": true
              },
              {
                "answer": "while",
                "right": false
              },
              {
                "answer": "do",
                "right": false
              },
              {
                "answer": "loop",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'string' type represent in C#?",
            "short_title": "string type",
            "answers": [
              {
                "answer": "A sequence of characters",
                "right": true
              },
              {
                "answer": "A number",
                "right": false
              },
              {
                "answer": "A true/false value",
                "right": false
              },
              {
                "answer": "An array of integers",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'return' keyword in C#?",
            "short_title": "Purpose of 'return'",
            "answers": [
              {
                "answer": "To exit a method and provide a value",
                "right": true
              },
              {
                "answer": "To start a loop",
                "right": false
              },
              {
                "answer": "To declare a variable",
                "right": false
              },
              {
                "answer": "To handle errors",
                "right": false
              }
            ]
          },
          {
            "title": "What does the '+' operator do with strings in C#?",
            "short_title": "String '+' operator",
            "answers": [
              {
                "answer": "Concatenates two strings",
                "right": true
              },
              {
                "answer": "Adds numbers",
                "right": false
              },
              {
                "answer": "Compares strings",
                "right": false
              },
              {
                "answer": "Splits a string",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to define a class in C#?",
            "short_title": "Class keyword",
            "answers": [
              {
                "answer": "class",
                "right": true
              },
              {
                "answer": "struct",
                "right": false
              },
              {
                "answer": "object",
                "right": false
              },
              {
                "answer": "type",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'float' type represent in C#?",
            "short_title": "float type",
            "answers": [
              {
                "answer": "A single-precision floating-point number",
                "right": true
              },
              {
                "answer": "An integer",
                "right": false
              },
              {
                "answer": "A text string",
                "right": false
              },
              {
                "answer": "A boolean",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'new' keyword in C#?",
            "short_title": "Purpose of 'new'",
            "answers": [
              {
                "answer": "To create an instance of an object",
                "right": true
              },
              {
                "answer": "To declare a variable",
                "right": false
              },
              {
                "answer": "To end a loop",
                "right": false
              },
              {
                "answer": "To hide a method",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'void' keyword indicate in a method?",
            "short_title": "void keyword",
            "answers": [
              {
                "answer": "The method does not return a value",
                "right": true
              },
              {
                "answer": "The method returns an integer",
                "right": false
              },
              {
                "answer": "The method is private",
                "right": false
              },
              {
                "answer": "The method loops forever",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'else' statement in C#?",
            "short_title": "Purpose of 'else'",
            "answers": [
              {
                "answer": "To execute code when an 'if' condition is false",
                "right": true
              },
              {
                "answer": "To start a loop",
                "right": false
              },
              {
                "answer": "To declare a variable",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              }
            ]
          },
          {
            "title": "What does the '==' operator do in C#?",
            "short_title": "'==' operator",
            "answers": [
              {
                "answer": "Compares two values for equality",
                "right": true
              },
              {
                "answer": "Assigns a value",
                "right": false
              },
              {
                "answer": "Adds two numbers",
                "right": false
              },
              {
                "answer": "Concatenates strings",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to inherit from a class in C#?",
            "short_title": "Inheritance keyword",
            "answers": [
              {
                "answer": ":",
                "right": true
              },
              {
                "answer": "extends",
                "right": false
              },
              {
                "answer": "inherit",
                "right": false
              },
              {
                "answer": "base",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'null' keyword represent in C#?",
            "short_title": "'null' keyword",
            "answers": [
              {
                "answer": "No value or object reference",
                "right": true
              },
              {
                "answer": "A zero value",
                "right": false
              },
              {
                "answer": "An empty string",
                "right": false
              },
              {
                "answer": "A false value",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'break' keyword in C#?",
            "short_title": "Purpose of 'break'",
            "answers": [
              {
                "answer": "To exit a loop or switch statement",
                "right": true
              },
              {
                "answer": "To start a loop",
                "right": false
              },
              {
                "answer": "To declare a variable",
                "right": false
              },
              {
                "answer": "To return a value",
                "right": false
              }
            ]
          }
        ],
        "C# Basics and Syntax": [
          {
            "title": "Which keyword is used to declare a variable in C#?",
            "short_title": "Variable declaration",
            "answers": [
              {
                "answer": "var",
                "right": true
              },
              {
                "answer": "let",
                "right": false
              },
              {
                "answer": "dim",
                "right": false
              },
              {
                "answer": "declare",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'int' data type represent in C#?",
            "short_title": "int type",
            "answers": [
              {
                "answer": "An integer",
                "right": true
              },
              {
                "answer": "A floating-point number",
                "right": false
              },
              {
                "answer": "A string",
                "right": false
              },
              {
                "answer": "A boolean",
                "right": false
              }
            ]
          },
          {
            "title": "Which operator is used to compare two values for equality?",
            "short_title": "Equality comparison",
            "answers": [
              {
                "answer": "==",
                "right": true
              },
              {
                "answer": "=",
                "right": false
              },
              {
                "answer": "!=",
                "right": false
              },
              {
                "answer": "=>",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'if' statement do in C#?",
            "short_title": "if statement",
            "answers": [
              {
                "answer": "Executes code if a condition is true",
                "right": true
              },
              {
                "answer": "Creates a loop",
                "right": false
              },
              {
                "answer": "Declares a variable",
                "right": false
              },
              {
                "answer": "Handles errors",
                "right": false
              }
            ]
          },
          {
            "title": "Which symbol terminates a statement in C#?",
            "short_title": "Statement terminator",
            "answers": [
              {
                "answer": ";",
                "right": true
              },
              {
                "answer": ".",
                "right": false
              },
              {
                "answer": ":",
                "right": false
              },
              {
                "answer": ",",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'float' data type represent in C#?",
            "short_title": "float type",
            "answers": [
              {
                "answer": "A floating-point number",
                "right": true
              },
              {
                "answer": "An integer",
                "right": false
              },
              {
                "answer": "A string",
                "right": false
              },
              {
                "answer": "A boolean",
                "right": false
              }
            ]
          },
          {
            "title": "Which loop is used to execute code a specific number of times?",
            "short_title": "Counted loop",
            "answers": [
              {
                "answer": "for",
                "right": true
              },
              {
                "answer": "while",
                "right": false
              },
              {
                "answer": "do",
                "right": false
              },
              {
                "answer": "foreach",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'void' keyword indicate in a method?",
            "short_title": "void keyword",
            "answers": [
              {
                "answer": "The method returns no value",
                "right": true
              },
              {
                "answer": "Returns a number",
                "right": false
              },
              {
                "answer": "Makes the method private",
                "right": false
              },
              {
                "answer": "Starts a loop",
                "right": false
              }
            ]
          },
          {
            "title": "Which operator assigns a value to a variable?",
            "short_title": "Assignment operator",
            "answers": [
              {
                "answer": "=",
                "right": true
              },
              {
                "answer": "==",
                "right": false
              },
              {
                "answer": "!=",
                "right": false
              },
              {
                "answer": "+=",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'return' keyword do in a method?",
            "short_title": "return keyword",
            "answers": [
              {
                "answer": "Returns a value and exits the method",
                "right": true
              },
              {
                "answer": "Starts a loop",
                "right": false
              },
              {
                "answer": "Declares a variable",
                "right": false
              },
              {
                "answer": "Handles errors",
                "right": false
              }
            ]
          },
          {
            "title": "Which data type is used to store text in C#?",
            "short_title": "Text type",
            "answers": [
              {
                "answer": "string",
                "right": true
              },
              {
                "answer": "int",
                "right": false
              },
              {
                "answer": "float",
                "right": false
              },
              {
                "answer": "bool",
                "right": false
              }
            ]
          },
          {
            "title": "What does the '+' operator do with two strings?",
            "short_title": "+ with strings",
            "answers": [
              {
                "answer": "Concatenates them into one string",
                "right": true
              },
              {
                "answer": "Compares strings",
                "right": false
              },
              {
                "answer": "Splits strings",
                "right": false
              },
              {
                "answer": "Adds numbers",
                "right": false
              }
            ]
          },
          {
            "title": "Which loop continues executing while a condition is true?",
            "short_title": "Conditional loop",
            "answers": [
              {
                "answer": "while",
                "right": true
              },
              {
                "answer": "for",
                "right": false
              },
              {
                "answer": "do",
                "right": false
              },
              {
                "answer": "if",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'bool' data type represent in C#?",
            "short_title": "bool type",
            "answers": [
              {
                "answer": "A boolean value (true/false)",
                "right": true
              },
              {
                "answer": "A number",
                "right": false
              },
              {
                "answer": "A string",
                "right": false
              },
              {
                "answer": "An array",
                "right": false
              }
            ]
          },
          {
            "title": "Which method runs when a Unity script starts?",
            "short_title": "Startup method",
            "answers": [
              {
                "answer": "Start",
                "right": true
              },
              {
                "answer": "Update",
                "right": false
              },
              {
                "answer": "Awake",
                "right": false
              },
              {
                "answer": "FixedUpdate",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'else' statement do with 'if'?",
            "short_title": "else statement",
            "answers": [
              {
                "answer": "Executes code if the 'if' condition is false",
                "right": true
              },
              {
                "answer": "Starts a loop",
                "right": false
              },
              {
                "answer": "Declares a variable",
                "right": false
              },
              {
                "answer": "Handles errors",
                "right": false
              }
            ]
          },
          {
            "title": "Which access modifier makes a variable visible only within its class?",
            "short_title": "Private access",
            "answers": [
              {
                "answer": "private",
                "right": true
              },
              {
                "answer": "public",
                "right": false
              },
              {
                "answer": "protected",
                "right": false
              },
              {
                "answer": "internal",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Debug.Log()' method do in Unity?",
            "short_title": "Debug.Log",
            "answers": [
              {
                "answer": "Outputs a message to the console",
                "right": true
              },
              {
                "answer": "Pauses the game",
                "right": false
              },
              {
                "answer": "Creates an object",
                "right": false
              },
              {
                "answer": "Deletes a message",
                "right": false
              }
            ]
          },
          {
            "title": "Which operator increments a variable’s value by 1?",
            "short_title": "Increment operator",
            "answers": [
              {
                "answer": "++",
                "right": true
              },
              {
                "answer": "+",
                "right": false
              },
              {
                "answer": "--",
                "right": false
              },
              {
                "answer": "+=",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'new' keyword do when creating an object?",
            "short_title": "new keyword",
            "answers": [
              {
                "answer": "Creates a new instance of a class",
                "right": true
              },
              {
                "answer": "Deletes an object",
                "right": false
              },
              {
                "answer": "Hides a method",
                "right": false
              },
              {
                "answer": "Starts a loop",
                "right": false
              }
            ]
          }
        ],
        "Events and Delegates": [
          {
            "title": "What is a delegate in C#?",
            "short_title": "Delegate definition",
            "answers": [
              {
                "answer": "A type that represents a method",
                "right": true
              },
              {
                "answer": "A variable",
                "right": false
              },
              {
                "answer": "A class",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to declare a delegate in C#?",
            "short_title": "Delegate keyword",
            "answers": [
              {
                "answer": "delegate",
                "right": true
              },
              {
                "answer": "event",
                "right": false
              },
              {
                "answer": "function",
                "right": false
              },
              {
                "answer": "method",
                "right": false
              }
            ]
          },
          {
            "title": "What is an event in C#?",
            "short_title": "Event definition",
            "answers": [
              {
                "answer": "A way to notify when something happens",
                "right": true
              },
              {
                "answer": "A type of variable",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              },
              {
                "answer": "A class",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to declare an event?",
            "short_title": "Event keyword",
            "answers": [
              {
                "answer": "event",
                "right": true
              },
              {
                "answer": "delegate",
                "right": false
              },
              {
                "answer": "notify",
                "right": false
              },
              {
                "answer": "trigger",
                "right": false
              }
            ]
          },
          {
            "title": "What does a delegate allow you to do?",
            "short_title": "Delegate purpose",
            "answers": [
              {
                "answer": "Pass methods as parameters",
                "right": true
              },
              {
                "answer": "Create new classes",
                "right": false
              },
              {
                "answer": "Store strings",
                "right": false
              },
              {
                "answer": "Render objects",
                "right": false
              }
            ]
          },
          {
            "title": "How do you subscribe to an event in C#?",
            "short_title": "Event subscription",
            "answers": [
              {
                "answer": "Using the += operator",
                "right": true
              },
              {
                "answer": "Using the = operator",
                "right": false
              },
              {
                "answer": "Using the -= operator",
                "right": false
              },
              {
                "answer": "Using the ++ operator",
                "right": false
              }
            ]
          },
          {
            "title": "How do you unsubscribe from an event in C#?",
            "short_title": "Event unsubscription",
            "answers": [
              {
                "answer": "Using the -= operator",
                "right": true
              },
              {
                "answer": "Using the += operator",
                "right": false
              },
              {
                "answer": "Using the = operator",
                "right": false
              },
              {
                "answer": "Using the -- operator",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common delegate type used in Unity?",
            "short_title": "Unity delegate",
            "answers": [
              {
                "answer": "Action",
                "right": true
              },
              {
                "answer": "Method",
                "right": false
              },
              {
                "answer": "Event",
                "right": false
              },
              {
                "answer": "Callback",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Action' delegate represent?",
            "short_title": "Action delegate",
            "answers": [
              {
                "answer": "A method with no return value",
                "right": true
              },
              {
                "answer": "A method with a string return",
                "right": false
              },
              {
                "answer": "A class",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Func' delegate represent?",
            "short_title": "Func delegate",
            "answers": [
              {
                "answer": "A method with a return value",
                "right": true
              },
              {
                "answer": "A method with no return",
                "right": false
              },
              {
                "answer": "An event",
                "right": false
              },
              {
                "answer": "A variable",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace is required for 'Action' and 'Func' delegates?",
            "short_title": "Delegate namespace",
            "answers": [
              {
                "answer": "System",
                "right": true
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System.Collections",
                "right": false
              },
              {
                "answer": "System.Generic",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEvent' provide in Unity?",
            "short_title": "UnityEvent",
            "answers": [
              {
                "answer": "A simple way to create events in the Inspector",
                "right": true
              },
              {
                "answer": "A new class",
                "right": false
              },
              {
                "answer": "A delegate type",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              }
            ]
          },
          {
            "title": "How do you invoke an event in C#?",
            "short_title": "Invoke event",
            "answers": [
              {
                "answer": "Using the event name like a method",
                "right": true
              },
              {
                "answer": "Using InvokeEvent()",
                "right": false
              },
              {
                "answer": "Using Call()",
                "right": false
              },
              {
                "answer": "Using Trigger()",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if you invoke an event with no subscribers?",
            "short_title": "No subscribers",
            "answers": [
              {
                "answer": "Nothing happens",
                "right": true
              },
              {
                "answer": "An error is thrown",
                "right": false
              },
              {
                "answer": "The program crashes",
                "right": false
              },
              {
                "answer": "A default method runs",
                "right": false
              }
            ]
          },
          {
            "title": "What is a practical use of events in Unity?",
            "short_title": "Unity event use",
            "answers": [
              {
                "answer": "Notifying when a player dies",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Storing variables",
                "right": false
              }
            ]
          },
          {
            "title": "What does the '=>' operator do with a delegate?",
            "short_title": "=> operator",
            "answers": [
              {
                "answer": "Defines a short lambda expression",
                "right": true
              },
              {
                "answer": "Compares values",
                "right": false
              },
              {
                "answer": "Assigns a variable",
                "right": false
              },
              {
                "answer": "Loops through items",
                "right": false
              }
            ]
          },
          {
            "title": "Which method adds a listener to a 'UnityEvent'?",
            "short_title": "Add listener",
            "answers": [
              {
                "answer": "AddListener()",
                "right": true
              },
              {
                "answer": "Subscribe()",
                "right": false
              },
              {
                "answer": "Add()",
                "right": false
              },
              {
                "answer": "Listen()",
                "right": false
              }
            ]
          },
          {
            "title": "What is a lambda expression in C#?",
            "short_title": "Lambda expression",
            "answers": [
              {
                "answer": "A short, anonymous method",
                "right": true
              },
              {
                "answer": "A class declaration",
                "right": false
              },
              {
                "answer": "A variable type",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEvent.Invoke()' do?",
            "short_title": "UnityEvent.Invoke",
            "answers": [
              {
                "answer": "Triggers all subscribed methods",
                "right": true
              },
              {
                "answer": "Stops the event",
                "right": false
              },
              {
                "answer": "Creates a new event",
                "right": false
              },
              {
                "answer": "Renders the event",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity example of using delegates?",
            "short_title": "Unity delegate example",
            "answers": [
              {
                "answer": "Calling a method when a button is clicked",
                "right": true
              },
              {
                "answer": "Rendering a scene",
                "right": false
              },
              {
                "answer": "Creating a loop",
                "right": false
              },
              {
                "answer": "Storing an array",
                "right": false
              }
            ]
          }
        ],
        "Error Handling and Debugging": [
          {
            "title": "What is the purpose of error handling in C#?",
            "short_title": "Error handling purpose",
            "answers": [
              {
                "answer": "To manage and respond to runtime errors",
                "right": true
              },
              {
                "answer": "To create loops",
                "right": false
              },
              {
                "answer": "To render objects",
                "right": false
              },
              {
                "answer": "To declare variables",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword begins a block to catch errors in C#?",
            "short_title": "Try keyword",
            "answers": [
              {
                "answer": "try",
                "right": true
              },
              {
                "answer": "catch",
                "right": false
              },
              {
                "answer": "error",
                "right": false
              },
              {
                "answer": "throw",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to handle an exception in C#?",
            "short_title": "Catch keyword",
            "answers": [
              {
                "answer": "catch",
                "right": true
              },
              {
                "answer": "try",
                "right": false
              },
              {
                "answer": "finally",
                "right": false
              },
              {
                "answer": "error",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'finally' block do in a try-catch statement?",
            "short_title": "Finally block",
            "answers": [
              {
                "answer": "Executes code regardless of an exception",
                "right": true
              },
              {
                "answer": "Catches an error",
                "right": false
              },
              {
                "answer": "Throws an exception",
                "right": false
              },
              {
                "answer": "Stops the program",
                "right": false
              }
            ]
          },
          {
            "title": "What is an exception in C#?",
            "short_title": "Exception definition",
            "answers": [
              {
                "answer": "A runtime error",
                "right": true
              },
              {
                "answer": "A variable",
                "right": false
              },
              {
                "answer": "A method",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              }
            ]
          },
          {
            "title": "Which method in Unity outputs a message to the console for debugging?",
            "short_title": "Debug output",
            "answers": [
              {
                "answer": "Debug.Log()",
                "right": true
              },
              {
                "answer": "Print()",
                "right": false
              },
              {
                "answer": "Console.Write()",
                "right": false
              },
              {
                "answer": "Log.Message()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'throw' do in C#?",
            "short_title": "Throw keyword",
            "answers": [
              {
                "answer": "Generates an exception manually",
                "right": true
              },
              {
                "answer": "Catches an error",
                "right": false
              },
              {
                "answer": "Ends a loop",
                "right": false
              },
              {
                "answer": "Declares a variable",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common exception caused by accessing a null object?",
            "short_title": "Null exception",
            "answers": [
              {
                "answer": "NullReferenceException",
                "right": true
              },
              {
                "answer": "IndexOutOfRangeException",
                "right": false
              },
              {
                "answer": "ArgumentException",
                "right": false
              },
              {
                "answer": "OverflowException",
                "right": false
              }
            ]
          },
          {
            "title": "How can you check if an object is null before using it?",
            "short_title": "Null check",
            "answers": [
              {
                "answer": "Using 'if (object != null)'",
                "right": true
              },
              {
                "answer": "Using 'if (object == true)'",
                "right": false
              },
              {
                "answer": "Using 'if (object)'",
                "right": false
              },
              {
                "answer": "Using 'if (object == 0)'",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Debug.LogError()' do in Unity?",
            "short_title": "LogError",
            "answers": [
              {
                "answer": "Outputs an error message in red",
                "right": true
              },
              {
                "answer": "Stops the game",
                "right": false
              },
              {
                "answer": "Creates a variable",
                "right": false
              },
              {
                "answer": "Renders a message",
                "right": false
              }
            ]
          },
          {
            "title": "What is debugging in programming?",
            "short_title": "Debugging definition",
            "answers": [
              {
                "answer": "Finding and fixing errors in code",
                "right": true
              },
              {
                "answer": "Writing new code",
                "right": false
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Debug.LogWarning()' do in Unity?",
            "short_title": "LogWarning",
            "answers": [
              {
                "answer": "Outputs a warning message in yellow",
                "right": true
              },
              {
                "answer": "Throws an exception",
                "right": false
              },
              {
                "answer": "Stops the program",
                "right": false
              },
              {
                "answer": "Clears the console",
                "right": false
              }
            ]
          },
          {
            "title": "What exception occurs when accessing an array index out of bounds?",
            "short_title": "Out-of-bounds exception",
            "answers": [
              {
                "answer": "IndexOutOfRangeException",
                "right": true
              },
              {
                "answer": "NullReferenceException",
                "right": false
              },
              {
                "answer": "ArgumentException",
                "right": false
              },
              {
                "answer": "FormatException",
                "right": false
              }
            ]
          },
          {
            "title": "How can you stop code execution to inspect it in Unity?",
            "short_title": "Break execution",
            "answers": [
              {
                "answer": "Using Debug.Break()",
                "right": true
              },
              {
                "answer": "Using Stop()",
                "right": false
              },
              {
                "answer": "Using Pause()",
                "right": false
              },
              {
                "answer": "Using End()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Exception.Message' property provide?",
            "short_title": "Exception.Message",
            "answers": [
              {
                "answer": "A description of the error",
                "right": true
              },
              {
                "answer": "The line number",
                "right": false
              },
              {
                "answer": "The method name",
                "right": false
              },
              {
                "answer": "The variable value",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity error when a GameObject is missing?",
            "short_title": "Missing GameObject",
            "answers": [
              {
                "answer": "NullReferenceException",
                "right": true
              },
              {
                "answer": "MissingComponentException",
                "right": false
              },
              {
                "answer": "ArgumentException",
                "right": false
              },
              {
                "answer": "IndexOutOfRangeException",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'try-catch' prevent in a Unity script?",
            "short_title": "Try-catch prevention",
            "answers": [
              {
                "answer": "The game from crashing due to errors",
                "right": true
              },
              {
                "answer": "The script from running",
                "right": false
              },
              {
                "answer": "Variables from being used",
                "right": false
              },
              {
                "answer": "Methods from executing",
                "right": false
              }
            ]
          },
          {
            "title": "What tool in Unity helps you see Debug.Log messages?",
            "short_title": "Debug tool",
            "answers": [
              {
                "answer": "Console window",
                "right": true
              },
              {
                "answer": "Inspector window",
                "right": false
              },
              {
                "answer": "Scene view",
                "right": false
              },
              {
                "answer": "Project window",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Debug.Assert()' do in Unity?",
            "short_title": "Debug.Assert",
            "answers": [
              {
                "answer": "Logs an error if a condition is false",
                "right": true
              },
              {
                "answer": "Creates a variable",
                "right": false
              },
              {
                "answer": "Stops the game",
                "right": false
              },
              {
                "answer": "Renders an assertion",
                "right": false
              }
            ]
          },
          {
            "title": "What is a simple way to debug a variable’s value in Unity?",
            "short_title": "Debug variable",
            "answers": [
              {
                "answer": "Using Debug.Log() with the variable",
                "right": true
              },
              {
                "answer": "Using Render.Value()",
                "right": false
              },
              {
                "answer": "Using Print.Variable()",
                "right": false
              },
              {
                "answer": "Using Stop.Value()",
                "right": false
              }
            ]
          }
        ],
        "Collections and Data Structures": [
          {
            "title": "What is an array in C#?",
            "short_title": "Array definition",
            "answers": [
              {
                "answer": "A fixed-size collection of items",
                "right": true
              },
              {
                "answer": "A single variable",
                "right": false
              },
              {
                "answer": "A method",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              }
            ]
          },
          {
            "title": "How do you declare an array in C#?",
            "short_title": "Array declaration",
            "answers": [
              {
                "answer": "int[] numbers",
                "right": true
              },
              {
                "answer": "int numbers",
                "right": false
              },
              {
                "answer": "array numbers",
                "right": false
              },
              {
                "answer": "list numbers",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'List<T>' class represent in C#?",
            "short_title": "List<T>",
            "answers": [
              {
                "answer": "A resizable collection of items",
                "right": true
              },
              {
                "answer": "A fixed-size array",
                "right": false
              },
              {
                "answer": "A single value",
                "right": false
              },
              {
                "answer": "A dictionary",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace is required to use 'List<T>' in C#?",
            "short_title": "List namespace",
            "answers": [
              {
                "answer": "System.Collections.Generic",
                "right": true
              },
              {
                "answer": "System",
                "right": false
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System.Collections",
                "right": false
              }
            ]
          },
          {
            "title": "How do you add an item to a 'List<T>'?",
            "short_title": "Add to List",
            "answers": [
              {
                "answer": "Add()",
                "right": true
              },
              {
                "answer": "Push()",
                "right": false
              },
              {
                "answer": "Insert()",
                "right": false
              },
              {
                "answer": "Append()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Dictionary<TKey, TValue>' class store?",
            "short_title": "Dictionary",
            "answers": [
              {
                "answer": "Key-value pairs",
                "right": true
              },
              {
                "answer": "A list of items",
                "right": false
              },
              {
                "answer": "A single value",
                "right": false
              },
              {
                "answer": "An array",
                "right": false
              }
            ]
          },
          {
            "title": "How do you access an item in an array by index?",
            "short_title": "Array access",
            "answers": [
              {
                "answer": "Using square brackets []",
                "right": true
              },
              {
                "answer": "Using parentheses ()",
                "right": false
              },
              {
                "answer": "Using dots .",
                "right": false
              },
              {
                "answer": "Using curly braces {}",
                "right": false
              }
            ]
          },
          {
            "title": "What is the index of the first item in an array or List?",
            "short_title": "First index",
            "answers": [
              {
                "answer": "0",
                "right": true
              },
              {
                "answer": "1",
                "right": false
              },
              {
                "answer": "-1",
                "right": false
              },
              {
                "answer": "2",
                "right": false
              }
            ]
          },
          {
            "title": "How do you get the number of items in a 'List<T>'?",
            "short_title": "List count",
            "answers": [
              {
                "answer": "Count",
                "right": true
              },
              {
                "answer": "Length",
                "right": false
              },
              {
                "answer": "Size",
                "right": false
              },
              {
                "answer": "Items",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'array.Length' return in C#?",
            "short_title": "Array length",
            "answers": [
              {
                "answer": "The total number of elements in the array",
                "right": true
              },
              {
                "answer": "The first element",
                "right": false
              },
              {
                "answer": "The last index",
                "right": false
              },
              {
                "answer": "The type of elements",
                "right": false
              }
            ]
          },
          {
            "title": "How do you remove an item from a 'List<T>'?",
            "short_title": "Remove from List",
            "answers": [
              {
                "answer": "Remove()",
                "right": true
              },
              {
                "answer": "Delete()",
                "right": false
              },
              {
                "answer": "Pop()",
                "right": false
              },
              {
                "answer": "Clear()",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if you access an array index that doesn’t exist?",
            "short_title": "Out-of-bounds access",
            "answers": [
              {
                "answer": "It throws an IndexOutOfRangeException",
                "right": true
              },
              {
                "answer": "It returns null",
                "right": false
              },
              {
                "answer": "It creates a new item",
                "right": false
              },
              {
                "answer": "It returns 0",
                "right": false
              }
            ]
          },
          {
            "title": "How do you add a key-value pair to a 'Dictionary<TKey, TValue>'?",
            "short_title": "Add to Dictionary",
            "answers": [
              {
                "answer": "Add()",
                "right": true
              },
              {
                "answer": "Insert()",
                "right": false
              },
              {
                "answer": "Put()",
                "right": false
              },
              {
                "answer": "Append()",
                "right": false
              }
            ]
          },
          {
            "title": "What method clears all items from a 'List<T>'?",
            "short_title": "Clear List",
            "answers": [
              {
                "answer": "Clear()",
                "right": true
              },
              {
                "answer": "RemoveAll()",
                "right": false
              },
              {
                "answer": "Empty()",
                "right": false
              },
              {
                "answer": "Delete()",
                "right": false
              }
            ]
          },
          {
            "title": "How do you check if a key exists in a 'Dictionary<TKey, TValue>'?",
            "short_title": "Check key in Dictionary",
            "answers": [
              {
                "answer": "ContainsKey()",
                "right": true
              },
              {
                "answer": "HasKey()",
                "right": false
              },
              {
                "answer": "Exists()",
                "right": false
              },
              {
                "answer": "FindKey()",
                "right": false
              }
            ]
          },
          {
            "title": "What loop is commonly used to iterate over a 'List<T>'?",
            "short_title": "List iteration",
            "answers": [
              {
                "answer": "foreach",
                "right": true
              },
              {
                "answer": "for",
                "right": false
              },
              {
                "answer": "while",
                "right": false
              },
              {
                "answer": "do",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'List<T>.Count' return if the list is empty?",
            "short_title": "Empty List Count",
            "answers": [
              {
                "answer": "0",
                "right": true
              },
              {
                "answer": "1",
                "right": false
              },
              {
                "answer": "-1",
                "right": false
              },
              {
                "answer": "null",
                "right": false
              }
            ]
          },
          {
            "title": "How do you access a value in a 'Dictionary<TKey, TValue>' by its key?",
            "short_title": "Dictionary access",
            "answers": [
              {
                "answer": "Using square brackets []",
                "right": true
              },
              {
                "answer": "Using parentheses ()",
                "right": false
              },
              {
                "answer": "Using Get()",
                "right": false
              },
              {
                "answer": "Using dots .",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common use of a 'List<GameObject>' in Unity?",
            "short_title": "List<GameObject>",
            "answers": [
              {
                "answer": "Storing multiple GameObjects",
                "right": true
              },
              {
                "answer": "Rendering a single object",
                "right": false
              },
              {
                "answer": "Creating a loop",
                "right": false
              },
              {
                "answer": "Handling physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Dictionary<TKey, TValue>.Count' return?",
            "short_title": "Dictionary Count",
            "answers": [
              {
                "answer": "The number of key-value pairs",
                "right": true
              },
              {
                "answer": "The number of keys only",
                "right": false
              },
              {
                "answer": "The size of the first value",
                "right": false
              },
              {
                "answer": "The type of keys",
                "right": false
              }
            ]
          }
        ],
        "GameObjects and Components": [
          {
            "title": "What Unity component controls an object's position, rotation, and scale?",
            "short_title": "Component for position, rotation, and scale",
            "answers": [
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Transform",
                "right": true
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              }
            ]
          },
          {
            "title": "How do you destroy a GameObject in Unity?",
            "short_title": "Destroying GameObjects",
            "answers": [
              {
                "answer": "GameObject.Remove();",
                "right": false
              },
              {
                "answer": "Destroy(gameObject);",
                "right": true
              },
              {
                "answer": "Object.Delete(gameObject);",
                "right": false
              },
              {
                "answer": "gameObject.Destroy();",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of a Collider in Unity?",
            "short_title": "Purpose of Collider",
            "answers": [
              {
                "answer": "To make an object move",
                "right": false
              },
              {
                "answer": "To detect and react to physics interactions",
                "right": true
              },
              {
                "answer": "To apply materials",
                "right": false
              },
              {
                "answer": "To display textures",
                "right": false
              }
            ]
          },
          {
            "title": "How do you destroy a GameObject in Unity?",
            "short_title": "Destroying GameObjects",
            "answers": [
              {
                "answer": "GameObject.Remove();",
                "right": false
              },
              {
                "answer": "Destroy(gameObject);",
                "right": true
              },
              {
                "answer": "Object.Delete(gameObject);",
                "right": false
              },
              {
                "answer": "gameObject.Destroy();",
                "right": false
              }
            ]
          }
        ],
        "Moment of Inertia": [
          {
            "title": "What is moment of inertia in a Unity Rigidbody?",
            "short_title": "MoI basics",
            "answers": [
              {
                "answer": "It measures resistance to changes in rotation",
                "right": true
              },
              {
                "answer": "It measures speed of rotation",
                "right": false
              },
              {
                "answer": "It measures linear movement",
                "right": false
              },
              {
                "answer": "It measures collision force",
                "right": false
              }
            ]
          },
          {
            "title": "Where is the moment of inertia typically calculated in Unity by default?",
            "short_title": "Default MoI",
            "answers": [
              {
                "answer": "Automatically based on the object’s shape and mass",
                "right": true
              },
              {
                "answer": "At the object’s center only",
                "right": false
              },
              {
                "answer": "At the top of the object",
                "right": false
              },
              {
                "answer": "At the edge of the object",
                "right": false
              }
            ]
          },
          {
            "title": "What does a high moment of inertia mean for an object in Unity?",
            "short_title": "High MoI",
            "answers": [
              {
                "answer": "The object resists changes in rotation more",
                "right": true
              },
              {
                "answer": "The object rotates faster",
                "right": false
              },
              {
                "answer": "The object moves linearly faster",
                "right": false
              },
              {
                "answer": "The object stops rotating",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia relate to an object’s mass in Unity?",
            "short_title": "MoI and mass",
            "answers": [
              {
                "answer": "Higher mass can increase moment of inertia if distributed away from the axis",
                "right": true
              },
              {
                "answer": "Higher mass always decreases moment of inertia",
                "right": false
              },
              {
                "answer": "Mass has no effect on moment of inertia",
                "right": false
              },
              {
                "answer": "Mass only affects linear movement",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if an object with low moment of inertia is spun in Unity?",
            "short_title": "Low MoI spin",
            "answers": [
              {
                "answer": "It rotates easily with less force",
                "right": true
              },
              {
                "answer": "It resists rotation strongly",
                "right": false
              },
              {
                "answer": "It stops immediately",
                "right": false
              },
              {
                "answer": "It moves linearly instead",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity component allows you to view or adjust moment of inertia?",
            "short_title": "MoI component",
            "answers": [
              {
                "answer": "Rigidbody",
                "right": true
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Transform",
                "right": false
              },
              {
                "answer": "Animator",
                "right": false
              }
            ]
          },
          {
            "title": "What shape typically has a higher moment of inertia in Unity?",
            "short_title": "MoI shape",
            "answers": [
              {
                "answer": "A thin ring (mass far from the axis)",
                "right": true
              },
              {
                "answer": "A solid sphere (mass close to the center)",
                "right": false
              },
              {
                "answer": "A cube with uniform mass",
                "right": false
              },
              {
                "answer": "A flat plane",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia affect a spinning wheel in Unity?",
            "short_title": "MoI wheel",
            "answers": [
              {
                "answer": "It determines how much force is needed to change its rotation",
                "right": true
              },
              {
                "answer": "It increases the wheel’s linear speed",
                "right": false
              },
              {
                "answer": "It stops the wheel from spinning",
                "right": false
              },
              {
                "answer": "It reduces the wheel’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default moment of inertia setting for a sphere in Unity?",
            "short_title": "Default MoI sphere",
            "answers": [
              {
                "answer": "Calculated automatically based on mass and shape",
                "right": true
              },
              {
                "answer": "Set to zero by default",
                "right": false
              },
              {
                "answer": "Fixed at 1 for all spheres",
                "right": false
              },
              {
                "answer": "Only applied to cubes",
                "right": false
              }
            ]
          },
          {
            "title": "Why might a heavy object with mass spread out have a high moment of inertia in Unity?",
            "short_title": "MoI heavy object",
            "answers": [
              {
                "answer": "Because the mass is farther from the axis of rotation",
                "right": true
              },
              {
                "answer": "Because the mass is closer to the center",
                "right": false
              },
              {
                "answer": "Because it has less mass",
                "right": false
              },
              {
                "answer": "Because it doesn’t rotate",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia differ from mass in Unity physics?",
            "short_title": "MoI vs mass",
            "answers": [
              {
                "answer": "Moment of inertia affects rotation, while mass affects linear motion",
                "right": true
              },
              {
                "answer": "Moment of inertia and mass are the same thing",
                "right": false
              },
              {
                "answer": "Mass affects rotation, while moment of inertia affects linear motion",
                "right": false
              },
              {
                "answer": "Both only affect collisions",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you apply a force to spin an object with high moment of inertia in Unity?",
            "short_title": "MoI force",
            "answers": [
              {
                "answer": "It rotates slowly due to high resistance",
                "right": true
              },
              {
                "answer": "It rotates quickly with little force",
                "right": false
              },
              {
                "answer": "It stops rotating immediately",
                "right": false
              },
              {
                "answer": "It moves linearly instead",
                "right": false
              }
            ]
          },
          {
            "title": "Which axis does moment of inertia typically apply to in a Unity Rigidbody?",
            "short_title": "MoI axis",
            "answers": [
              {
                "answer": "All three axes (X, Y, Z)",
                "right": true
              },
              {
                "answer": "Only the X-axis",
                "right": false
              },
              {
                "answer": "Only the Y-axis",
                "right": false
              },
              {
                "answer": "Only the Z-axis",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia impact a spinning top in Unity?",
            "short_title": "MoI top",
            "answers": [
              {
                "answer": "It determines how long the top spins before slowing",
                "right": true
              },
              {
                "answer": "It increases the top’s linear speed",
                "right": false
              },
              {
                "answer": "It stops the top immediately",
                "right": false
              },
              {
                "answer": "It reduces the top’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What Unity property can you use to see the moment of inertia values?",
            "short_title": "MoI property",
            "answers": [
              {
                "answer": "Rigidbody.inertiaTensor",
                "right": true
              },
              {
                "answer": "Rigidbody.mass",
                "right": false
              },
              {
                "answer": "Rigidbody.velocity",
                "right": false
              },
              {
                "answer": "Rigidbody.drag",
                "right": false
              }
            ]
          },
          {
            "title": "Why might a small object have a low moment of inertia in Unity?",
            "short_title": "Low MoI small",
            "answers": [
              {
                "answer": "Because its mass is concentrated near the center",
                "right": true
              },
              {
                "answer": "Because its mass is spread out",
                "right": false
              },
              {
                "answer": "Because it doesn’t rotate",
                "right": false
              },
              {
                "answer": "Because it has high mass",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia affect a rolling ball in Unity?",
            "short_title": "MoI rolling",
            "answers": [
              {
                "answer": "It influences how easily the ball starts or stops rolling",
                "right": true
              },
              {
                "answer": "It increases the ball’s linear speed",
                "right": false
              },
              {
                "answer": "It stops the ball immediately",
                "right": false
              },
              {
                "answer": "It reduces the ball’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if you don’t adjust moment of inertia for a custom shape in Unity?",
            "short_title": "MoI custom shape",
            "answers": [
              {
                "answer": "Unity calculates it automatically based on shape and mass",
                "right": true
              },
              {
                "answer": "The object won’t rotate",
                "right": false
              },
              {
                "answer": "The object moves linearly only",
                "right": false
              },
              {
                "answer": "The object stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia relate to angular velocity in Unity?",
            "short_title": "MoI and velocity",
            "answers": [
              {
                "answer": "Higher moment of inertia means slower changes in angular velocity",
                "right": true
              },
              {
                "answer": "Higher moment of inertia increases angular velocity",
                "right": false
              },
              {
                "answer": "Moment of inertia has no effect on angular velocity",
                "right": false
              },
              {
                "answer": "Angular velocity reduces moment of inertia",
                "right": false
              }
            ]
          },
          {
            "title": "What type of object in Unity would have a very low moment of inertia?",
            "short_title": "Low MoI object",
            "answers": [
              {
                "answer": "A small, solid sphere with mass near the center",
                "right": true
              },
              {
                "answer": "A large, thin ring with mass far from the center",
                "right": false
              },
              {
                "answer": "A heavy cube with uniform mass",
                "right": false
              },
              {
                "answer": "A flat plane with no mass",
                "right": false
              }
            ]
          }
        ],
        "Acceleration": [
          {
            "title": "What is acceleration in a Unity Rigidbody?",
            "short_title": "Accel basics",
            "answers": [
              {
                "answer": "The rate of change of velocity over time",
                "right": true
              },
              {
                "answer": "The speed of an object",
                "right": false
              },
              {
                "answer": "The mass of an object",
                "right": false
              },
              {
                "answer": "The rotation of an object",
                "right": false
              }
            ]
          },
          {
            "title": "What Unity method can apply acceleration to an object?",
            "short_title": "Accel method",
            "answers": [
              {
                "answer": "Rigidbody.AddForce with ForceMode.Acceleration",
                "right": true
              },
              {
                "answer": "Rigidbody.velocity",
                "right": false
              },
              {
                "answer": "Rigidbody.mass",
                "right": false
              },
              {
                "answer": "Rigidbody.drag",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you apply constant acceleration to an object in Unity?",
            "short_title": "Constant accel",
            "answers": [
              {
                "answer": "The object’s velocity increases steadily",
                "right": true
              },
              {
                "answer": "The object stops moving",
                "right": false
              },
              {
                "answer": "The object rotates faster",
                "right": false
              },
              {
                "answer": "The object’s mass increases",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration relate to force in Unity physics?",
            "short_title": "Accel and force",
            "answers": [
              {
                "answer": "Force divided by mass equals acceleration (F = ma)",
                "right": true
              },
              {
                "answer": "Force equals acceleration directly",
                "right": false
              },
              {
                "answer": "Acceleration has no relation to force",
                "right": false
              },
              {
                "answer": "Force reduces acceleration",
                "right": false
              }
            ]
          },
          {
            "title": "What effect does gravity have on acceleration in Unity?",
            "short_title": "Accel and gravity",
            "answers": [
              {
                "answer": "It causes a constant downward acceleration of -9.8 m/s²",
                "right": true
              },
              {
                "answer": "It stops acceleration",
                "right": false
              },
              {
                "answer": "It increases linear velocity only",
                "right": false
              },
              {
                "answer": "It reduces mass",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration affect a falling object in Unity?",
            "short_title": "Accel falling",
            "answers": [
              {
                "answer": "It increases the object’s downward speed over time",
                "right": true
              },
              {
                "answer": "It stops the object from falling",
                "right": false
              },
              {
                "answer": "It causes the object to rotate",
                "right": false
              },
              {
                "answer": "It reduces the object’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if you apply acceleration upward to a falling object in Unity?",
            "short_title": "Upward accel",
            "answers": [
              {
                "answer": "It slows the object’s fall or makes it rise",
                "right": true
              },
              {
                "answer": "It stops the object immediately",
                "right": false
              },
              {
                "answer": "It increases the fall speed",
                "right": false
              },
              {
                "answer": "It reduces the object’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity component is required to apply acceleration to an object?",
            "short_title": "Accel component",
            "answers": [
              {
                "answer": "Rigidbody",
                "right": true
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Transform",
                "right": false
              },
              {
                "answer": "Animator",
                "right": false
              }
            ]
          },
          {
            "title": "What does increasing acceleration do to a car’s movement in Unity?",
            "short_title": "Accel car",
            "answers": [
              {
                "answer": "It makes the car speed up faster",
                "right": true
              },
              {
                "answer": "It stops the car immediately",
                "right": false
              },
              {
                "answer": "It reduces the car’s speed",
                "right": false
              },
              {
                "answer": "It causes the car to rotate",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration interact with friction in Unity?",
            "short_title": "Accel and friction",
            "answers": [
              {
                "answer": "Friction can reduce or oppose acceleration",
                "right": true
              },
              {
                "answer": "Friction increases acceleration",
                "right": false
              },
              {
                "answer": "Friction has no effect on acceleration",
                "right": false
              },
              {
                "answer": "Friction stops acceleration immediately",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you apply acceleration to a stationary object in Unity?",
            "short_title": "Accel stationary",
            "answers": [
              {
                "answer": "The object starts moving and gains speed",
                "right": true
              },
              {
                "answer": "The object stops moving",
                "right": false
              },
              {
                "answer": "The object rotates instead",
                "right": false
              },
              {
                "answer": "The object’s mass increases",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration affect a ball rolling down a hill in Unity?",
            "short_title": "Accel rolling",
            "answers": [
              {
                "answer": "It increases the ball’s speed as it rolls",
                "right": true
              },
              {
                "answer": "It stops the ball immediately",
                "right": false
              },
              {
                "answer": "It reduces the ball’s speed",
                "right": false
              },
              {
                "answer": "It causes the ball to rotate only",
                "right": false
              }
            ]
          },
          {
            "title": "What Unity property can you use to check an object’s current acceleration?",
            "short_title": "Accel property",
            "answers": [
              {
                "answer": "There’s no direct property; calculate from velocity changes",
                "right": true
              },
              {
                "answer": "Rigidbody.acceleration",
                "right": false
              },
              {
                "answer": "Rigidbody.velocity",
                "right": false
              },
              {
                "answer": "Rigidbody.mass",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration impact a jumping character in Unity?",
            "short_title": "Accel jumping",
            "answers": [
              {
                "answer": "It determines how quickly the character gains upward speed",
                "right": true
              },
              {
                "answer": "It stops the jump immediately",
                "right": false
              },
              {
                "answer": "It reduces jump height",
                "right": false
              },
              {
                "answer": "It causes rotation",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if you apply too much acceleration to a small object in Unity?",
            "short_title": "Excess accel",
            "answers": [
              {
                "answer": "It may move unrealistically fast or destabilize",
                "right": true
              },
              {
                "answer": "It stops moving",
                "right": false
              },
              {
                "answer": "It reduces mass",
                "right": false
              },
              {
                "answer": "It causes rotation only",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration relate to an object’s mass in Unity?",
            "short_title": "Accel and mass",
            "answers": [
              {
                "answer": "Higher mass requires more force for the same acceleration",
                "right": true
              },
              {
                "answer": "Higher mass reduces acceleration automatically",
                "right": false
              },
              {
                "answer": "Mass has no effect on acceleration",
                "right": false
              },
              {
                "answer": "Mass increases acceleration",
                "right": false
              }
            ]
          },
          {
            "title": "What effect does acceleration have on a projectile in Unity?",
            "short_title": "Accel projectile",
            "answers": [
              {
                "answer": "It changes the projectile’s speed and direction over time",
                "right": true
              },
              {
                "answer": "It stops the projectile immediately",
                "right": false
              },
              {
                "answer": "It reduces the projectile’s mass",
                "right": false
              },
              {
                "answer": "It causes rotation only",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration interact with drag in Unity?",
            "short_title": "Accel and drag",
            "answers": [
              {
                "answer": "Drag reduces the effect of acceleration over time",
                "right": true
              },
              {
                "answer": "Drag increases acceleration",
                "right": false
              },
              {
                "answer": "Drag has no effect on acceleration",
                "right": false
              },
              {
                "answer": "Drag stops acceleration immediately",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you apply acceleration in multiple directions in Unity?",
            "short_title": "Multi-directional accel",
            "answers": [
              {
                "answer": "The object accelerates in the combined direction of forces",
                "right": true
              },
              {
                "answer": "The object stops moving",
                "right": false
              },
              {
                "answer": "The object rotates instead",
                "right": false
              },
              {
                "answer": "The object’s mass increases",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration affect a sliding box on a surface in Unity?",
            "short_title": "Accel sliding",
            "answers": [
              {
                "answer": "It increases the box’s speed along the surface",
                "right": true
              },
              {
                "answer": "It stops the box immediately",
                "right": false
              },
              {
                "answer": "It reduces the box’s speed",
                "right": false
              },
              {
                "answer": "It causes the box to rotate",
                "right": false
              }
            ]
          }
        ],
        "Physics in Unity": [
          {
            "title": "What does 'isTrigger' do in a Collider?",
            "short_title": "Function of isTrigger",
            "answers": [
              {
                "answer": "Makes the object invisible",
                "right": false
              },
              {
                "answer": "Allows objects to pass through without physical collision",
                "right": true
              },
              {
                "answer": "Changes the object's material",
                "right": false
              },
              {
                "answer": "Stops the object from moving",
                "right": false
              }
            ]
          },
          {
            "title": "What method is used to apply force to a Rigidbody?",
            "short_title": "Applying force to Rigidbody",
            "answers": [
              {
                "answer": "AddVelocity()",
                "right": false
              },
              {
                "answer": "ApplyForce()",
                "right": false
              },
              {
                "answer": "Rigidbody.Move()",
                "right": false
              },
              {
                "answer": "AddForce()",
                "right": true
              }
            ]
          },
          {
            "title": "What function detects collisions in Unity?",
            "short_title": "Collision detection in Unity",
            "answers": [
              {
                "answer": "OnTriggerEnter()",
                "right": false
              },
              {
                "answer": "OnCollisionEnter()",
                "right": false
              },
              {
                "answer": "Both A and B",
                "right": true
              },
              {
                "answer": "Update()",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between FixedUpdate() and Update()?",
            "short_title": "FixedUpdate vs Update",
            "answers": [
              {
                "answer": "Update() is used for physics calculations",
                "right": false
              },
              {
                "answer": "FixedUpdate() runs at a fixed time step",
                "right": true
              },
              {
                "answer": "Update() runs before Start()",
                "right": false
              },
              {
                "answer": "FixedUpdate() is only called once per game session",
                "right": false
              }
            ]
          },
          {
            "title": "Which component is required for an object to be affected by physics?",
            "short_title": "Physics component requirement",
            "answers": [
              {
                "answer": "Mesh Renderer",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Rigidbody",
                "right": true
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What is the function of Time.deltaTime?",
            "short_title": "Function of Time.deltaTime",
            "answers": [
              {
                "answer": "Gives the time elapsed since the last frame",
                "right": true
              },
              {
                "answer": "Returns the time since the game started",
                "right": false
              },
              {
                "answer": "Pauses the game for a given duration",
                "right": false
              },
              {
                "answer": "Forces a physics update",
                "right": false
              }
            ]
          },
          {
            "title": "What component is required to enable physics on a GameObject in Unity?",
            "short_title": "Physics component",
            "answers": [
              {
                "answer": "Rigidbody",
                "right": true
              },
              {
                "answer": "Transform",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              },
              {
                "answer": "Animator",
                "right": false
              }
            ]
          },
          {
            "title": "What does a Collider do in Unity?",
            "short_title": "Collider purpose",
            "answers": [
              {
                "answer": "Defines a shape for physics collisions",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Renders graphics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you add a Rigidbody to a GameObject?",
            "short_title": "Rigidbody effect",
            "answers": [
              {
                "answer": "It becomes affected by gravity and physics",
                "right": true
              },
              {
                "answer": "It becomes invisible",
                "right": false
              },
              {
                "answer": "It stops moving",
                "right": false
              },
              {
                "answer": "It plays a sound",
                "right": false
              }
            ]
          },
          {
            "title": "What method is called when two objects collide in Unity?",
            "short_title": "Collision method",
            "answers": [
              {
                "answer": "OnCollisionEnter",
                "right": true
              },
              {
                "answer": "OnTriggerEnter",
                "right": false
              },
              {
                "answer": "Update",
                "right": false
              },
              {
                "answer": "Start",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'isTrigger' property on a Collider?",
            "short_title": "'isTrigger' purpose",
            "answers": [
              {
                "answer": "Allows objects to pass through and triggers events",
                "right": true
              },
              {
                "answer": "Makes the object solid",
                "right": false
              },
              {
                "answer": "Disables physics",
                "right": false
              },
              {
                "answer": "Increases gravity",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.velocity' control in Unity?",
            "short_title": "Rigidbody.velocity",
            "answers": [
              {
                "answer": "The speed and direction of an object",
                "right": true
              },
              {
                "answer": "The object’s rotation",
                "right": false
              },
              {
                "answer": "The object’s scale",
                "right": false
              },
              {
                "answer": "The object’s position",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity method is used to apply a force to a Rigidbody?",
            "short_title": "Force method",
            "answers": [
              {
                "answer": "AddForce",
                "right": true
              },
              {
                "answer": "MovePosition",
                "right": false
              },
              {
                "answer": "SetVelocity",
                "right": false
              },
              {
                "answer": "ApplyTorque",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'FixedUpdate' method do in Unity?",
            "short_title": "FixedUpdate purpose",
            "answers": [
              {
                "answer": "Updates physics at a fixed time step",
                "right": true
              },
              {
                "answer": "Updates every frame",
                "right": false
              },
              {
                "answer": "Initializes an object",
                "right": false
              },
              {
                "answer": "Handles collisions",
                "right": false
              }
            ]
          },
          {
            "title": "What type of Collider is a sphere in Unity?",
            "short_title": "Sphere Collider",
            "answers": [
              {
                "answer": "SphereCollider",
                "right": true
              },
              {
                "answer": "BoxCollider",
                "right": false
              },
              {
                "answer": "CapsuleCollider",
                "right": false
              },
              {
                "answer": "MeshCollider",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.mass' affect in Unity?",
            "short_title": "Rigidbody.mass",
            "answers": [
              {
                "answer": "How much force impacts the object’s movement",
                "right": true
              },
              {
                "answer": "The object’s size",
                "right": false
              },
              {
                "answer": "The object’s color",
                "right": false
              },
              {
                "answer": "The object’s rotation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if two Colliders overlap with 'isTrigger' enabled?",
            "short_title": "Trigger overlap",
            "answers": [
              {
                "answer": "OnTriggerEnter is called",
                "right": true
              },
              {
                "answer": "OnCollisionEnter is called",
                "right": false
              },
              {
                "answer": "The objects bounce",
                "right": false
              },
              {
                "answer": "Nothing happens",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.gravity' control in Unity?",
            "short_title": "Physics.gravity",
            "answers": [
              {
                "answer": "The global gravity force affecting Rigidbodies",
                "right": true
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The rendering quality",
                "right": false
              },
              {
                "answer": "The animation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of a BoxCollider in Unity?",
            "short_title": "BoxCollider purpose",
            "answers": [
              {
                "answer": "Defines a rectangular collision shape",
                "right": true
              },
              {
                "answer": "Rotates an object",
                "right": false
              },
              {
                "answer": "Plays a sound",
                "right": false
              },
              {
                "answer": "Renders a texture",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.useGravity' do in Unity?",
            "short_title": "Rigidbody.useGravity",
            "answers": [
              {
                "answer": "Enables or disables gravity on an object",
                "right": true
              },
              {
                "answer": "Changes the object’s mass",
                "right": false
              },
              {
                "answer": "Stops all movement",
                "right": false
              },
              {
                "answer": "Triggers an event",
                "right": false
              }
            ]
          },
          {
            "title": "What method detects when an object enters a trigger zone?",
            "short_title": "Trigger detection",
            "answers": [
              {
                "answer": "OnTriggerEnter",
                "right": true
              },
              {
                "answer": "OnCollisionEnter",
                "right": false
              },
              {
                "answer": "Update",
                "right": false
              },
              {
                "answer": "FixedUpdate",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.AddTorque()' do in Unity?",
            "short_title": "AddTorque purpose",
            "answers": [
              {
                "answer": "Applies rotational force to an object",
                "right": true
              },
              {
                "answer": "Moves an object linearly",
                "right": false
              },
              {
                "answer": "Stops an object",
                "right": false
              },
              {
                "answer": "Changes the object’s scale",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default gravity direction in Unity?",
            "short_title": "Default gravity",
            "answers": [
              {
                "answer": "Downward along the Y-axis",
                "right": true
              },
              {
                "answer": "Upward along the Y-axis",
                "right": false
              },
              {
                "answer": "Along the X-axis",
                "right": false
              },
              {
                "answer": "Along the Z-axis",
                "right": false
              }
            ]
          },
          {
            "title": "What does a CapsuleCollider do in Unity?",
            "short_title": "CapsuleCollider purpose",
            "answers": [
              {
                "answer": "Defines a capsule-shaped collision area",
                "right": true
              },
              {
                "answer": "Rotates an object",
                "right": false
              },
              {
                "answer": "Renders a mesh",
                "right": false
              },
              {
                "answer": "Plays audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.isKinematic' do in Unity?",
            "short_title": "isKinematic purpose",
            "answers": [
              {
                "answer": "Makes the Rigidbody controlled by code, not physics",
                "right": true
              },
              {
                "answer": "Increases gravity",
                "right": false
              },
              {
                "answer": "Disables collisions",
                "right": false
              },
              {
                "answer": "Stops rotation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.IgnoreCollision()' in Unity?",
            "short_title": "IgnoreCollision purpose",
            "answers": [
              {
                "answer": "Prevents two specific Colliders from interacting",
                "right": true
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Triggers an event",
                "right": false
              },
              {
                "answer": "Changes gravity",
                "right": false
              }
            ]
          }
        ],
        "Force": [
          {
            "title": "What is force in physics?",
            "short_title": "Force definition",
            "answers": [
              {
                "answer": "A push or pull that causes an object to accelerate",
                "right": true
              },
              {
                "answer": "The speed of an object",
                "right": false
              },
              {
                "answer": "The mass of an object",
                "right": false
              },
              {
                "answer": "The energy stored in an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the formula for force?",
            "short_title": "Force formula",
            "answers": [
              {
                "answer": "F = ma",
                "right": true
              },
              {
                "answer": "F = mv",
                "right": false
              },
              {
                "answer": "F = m/v",
                "right": false
              },
              {
                "answer": "F = a/m",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity method is used to apply force to an object?",
            "short_title": "Applying force in Unity",
            "answers": [
              {
                "answer": "Rigidbody.AddForce",
                "right": true
              },
              {
                "answer": "Rigidbody.velocity",
                "right": false
              },
              {
                "answer": "Rigidbody.mass",
                "right": false
              },
              {
                "answer": "Rigidbody.gravity",
                "right": false
              }
            ]
          },
          {
            "title": "What effect does increasing force have on an object in Unity?",
            "short_title": "Increasing force",
            "answers": [
              {
                "answer": "It accelerates more",
                "right": true
              },
              {
                "answer": "It slows down",
                "right": false
              },
              {
                "answer": "It becomes heavier",
                "right": false
              },
              {
                "answer": "It stops moving",
                "right": false
              }
            ]
          },
          {
            "title": "Which factor does NOT affect how force changes an object’s motion?",
            "short_title": "Force influence",
            "answers": [
              {
                "answer": "Object's color",
                "right": true
              },
              {
                "answer": "Object's mass",
                "right": false
              },
              {
                "answer": "Object's velocity",
                "right": false
              },
              {
                "answer": "Direction of force",
                "right": false
              }
            ]
          },
          {
            "title": "What is Newton’s Second Law of Motion?",
            "short_title": "Newton's Second Law",
            "answers": [
              {
                "answer": "Force equals mass times acceleration",
                "right": true
              },
              {
                "answer": "An object in motion stays in motion",
                "right": false
              },
              {
                "answer": "For every action, there is an equal and opposite reaction",
                "right": false
              },
              {
                "answer": "Mass equals force times acceleration",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of force causes an object to move in a circular path?",
            "short_title": "Circular motion force",
            "answers": [
              {
                "answer": "Centripetal force",
                "right": true
              },
              {
                "answer": "Gravitational force",
                "right": false
              },
              {
                "answer": "Normal force",
                "right": false
              },
              {
                "answer": "Friction",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if no external force is acting on an object?",
            "short_title": "No external force",
            "answers": [
              {
                "answer": "It continues moving at the same speed or remains still",
                "right": true
              },
              {
                "answer": "It stops immediately",
                "right": false
              },
              {
                "answer": "It starts accelerating",
                "right": false
              },
              {
                "answer": "Its mass decreases",
                "right": false
              }
            ]
          },
          {
            "title": "Which force opposes the motion of objects?",
            "short_title": "Opposing force",
            "answers": [
              {
                "answer": "Friction",
                "right": true
              },
              {
                "answer": "Gravity",
                "right": false
              },
              {
                "answer": "Normal force",
                "right": false
              },
              {
                "answer": "Tension",
                "right": false
              }
            ]
          },
          {
            "title": "How does air resistance affect a falling object?",
            "short_title": "Air resistance effect",
            "answers": [
              {
                "answer": "It slows down the fall",
                "right": true
              },
              {
                "answer": "It increases the fall speed",
                "right": false
              },
              {
                "answer": "It stops the fall",
                "right": false
              },
              {
                "answer": "It changes the object’s mass",
                "right": false
              }
            ]
          }
        ],
        "Collision Detection": [
          {
            "title": "What is collision detection in game physics?",
            "short_title": "Collision basics",
            "answers": [
              {
                "answer": "A method to detect when two objects intersect",
                "right": true
              },
              {
                "answer": "A technique to increase object speed",
                "right": false
              },
              {
                "answer": "A way to remove objects from the game",
                "right": false
              },
              {
                "answer": "A method to add textures to objects",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity component is commonly used for collision detection?",
            "short_title": "Collision component",
            "answers": [
              {
                "answer": "Collider",
                "right": true
              },
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Animator",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              }
            ]
          },
          {
            "title": "What does CCD stand for in physics engines?",
            "short_title": "CCD meaning",
            "answers": [
              {
                "answer": "Continuous Collision Detection",
                "right": true
              },
              {
                "answer": "Collider Contact Detection",
                "right": false
              },
              {
                "answer": "Collision Calculation Data",
                "right": false
              },
              {
                "answer": "Consistent Contact Delay",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main purpose of Continuous Collision Detection (CCD)?",
            "short_title": "CCD purpose",
            "answers": [
              {
                "answer": "To prevent fast-moving objects from passing through others",
                "right": true
              },
              {
                "answer": "To increase frame rate in physics simulations",
                "right": false
              },
              {
                "answer": "To improve object rendering",
                "right": false
              },
              {
                "answer": "To slow down game physics calculations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between Broad Phase and Narrow Phase in collision detection?",
            "short_title": "Broad vs Narrow",
            "answers": [
              {
                "answer": "Broad Phase filters out unnecessary collision checks, Narrow Phase calculates precise collisions",
                "right": true
              },
              {
                "answer": "Broad Phase calculates precise collisions, Narrow Phase filters them out",
                "right": false
              },
              {
                "answer": "Both phases perform the same function",
                "right": false
              },
              {
                "answer": "Narrow Phase is only used in 2D games",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Broad Phase algorithm?",
            "short_title": "Broad Phase algo",
            "answers": [
              {
                "answer": "Sweep and Prune",
                "right": true
              },
              {
                "answer": "Euler Integration",
                "right": false
              },
              {
                "answer": "Verlet Integration",
                "right": false
              },
              {
                "answer": "Spring-Damper System",
                "right": false
              }
            ]
          },
          {
            "title": "Which Broad Phase method is best for handling large numbers of objects?",
            "short_title": "Best Broad Phase",
            "answers": [
              {
                "answer": "Grid-based partitioning",
                "right": true
              },
              {
                "answer": "Raycasting",
                "right": false
              },
              {
                "answer": "Inverse Kinematics",
                "right": false
              },
              {
                "answer": "Forward Kinematics",
                "right": false
              }
            ]
          },
          {
            "title": "Which phase of collision detection performs fine-grained calculations?",
            "short_title": "Narrow Phase role",
            "answers": [
              {
                "answer": "Narrow Phase",
                "right": true
              },
              {
                "answer": "Broad Phase",
                "right": false
              },
              {
                "answer": "Mid Phase",
                "right": false
              },
              {
                "answer": "CCD Phase",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Narrow Phase collision detection algorithm?",
            "short_title": "Narrow Phase algo",
            "answers": [
              {
                "answer": "GJK (Gilbert-Johnson-Keerthi)",
                "right": true
              },
              {
                "answer": "A* Pathfinding",
                "right": false
              },
              {
                "answer": "Dijkstra’s Algorithm",
                "right": false
              },
              {
                "answer": "Quadtree Partitioning",
                "right": false
              }
            ]
          },
          {
            "title": "What is tunneling in physics simulations?",
            "short_title": "Tunneling issue",
            "answers": [
              {
                "answer": "A fast-moving object passing through another without detecting a collision",
                "right": true
              },
              {
                "answer": "A method to speed up physics calculations",
                "right": false
              },
              {
                "answer": "A technique to improve game rendering",
                "right": false
              },
              {
                "answer": "A way to simulate underground objects",
                "right": false
              }
            ]
          }
        ],
        "Convex": [
          {
            "title": "Which of these shapes is convex?",
            "short_title": "Convex shape example",
            "answers": [
              {
                "answer": "A perfect rectangle",
                "right": true
              },
              {
                "answer": "A star-shaped polygon",
                "right": false
              },
              {
                "answer": "A crescent moon shape",
                "right": false
              },
              {
                "answer": "A shape with self-intersections",
                "right": false
              }
            ]
          },
          {
            "title": "What is a key property of convex shapes?",
            "short_title": "Convex shape property",
            "answers": [
              { "answer": "Any line drawn between two points inside stays within the shape", "right": true },
              { "answer": "They always have curved surfaces", "right": false },
              { "answer": "They must have equal side lengths", "right": false },
              { "answer": "They always contain holes", "right": false }
            ]
          },
          {
            "title": "Which of the following is an example of a convex shape?",
            "short_title": "Convex shape example",
            "answers": [
              { "answer": "A perfect circle", "right": true },
              { "answer": "A star-shaped polygon", "right": false },
              { "answer": "A boomerang", "right": false },
              { "answer": "A crescent moon", "right": false }
            ]
          },
          {
            "title": "What is the advantage of using convex shapes in physics simulations?",
            "short_title": "Convex shape in physics",
            "answers": [
              { "answer": "They allow faster and simpler collision detection", "right": true },
              { "answer": "They provide more realistic lighting effects", "right": false },
              { "answer": "They eliminate the need for physics engines", "right": false },
              { "answer": "They have more detailed textures", "right": false }
            ]
          },
          {
            "title": "Which of these algorithms is commonly used to find a convex hull?",
            "short_title": "Convex hull algorithm",
            "answers": [
              { "answer": "QuickHull", "right": true },
              { "answer": "A* Pathfinding", "right": false },
              { "answer": "Ear Clipping", "right": false },
              { "answer": "K-D Tree", "right": false }
            ]
          }
        ],
        "Concave": [
          {
            "title": "Which property defines a concave shape?",
            "short_title": "Concave shape definition",
            "answers": [
              {
                "answer": "It has at least one interior angle greater than 180 degrees",
                "right": true
              },
              {
                "answer": "It has only straight edges",
                "right": false
              },
              {
                "answer": "It has no holes or gaps",
                "right": false
              },
              {
                "answer": "It must always be symmetrical",
                "right": false
              }
            ]
          },
          {
            "title": "How can you visually identify a concave shape?",
            "short_title": "Concave shape identification",
            "answers": [
              {
                "answer": "It has at least one inward indentation",
                "right": true
              },
              {
                "answer": "All its edges are straight",
                "right": false
              },
              {
                "answer": "It has no interior angles greater than 180°",
                "right": false
              },
              {
                "answer": "It is always symmetrical",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these real-world objects is an example of a concave shape?",
            "short_title": "Concave shape example",
            "answers": [
              {
                "answer": "A crescent moon",
                "right": true
              },
              {
                "answer": "A basketball",
                "right": false
              },
              {
                "answer": "A perfect square",
                "right": false
              },
              {
                "answer": "A tennis ball cut in half",
                "right": false
              }
            ]
          },
          {
            "title": "Why are concave polygons more challenging in physics simulations?",
            "short_title": "Concave physics challenges",
            "answers": [
              {
                "answer": "They require decomposition into convex shapes for collision detection",
                "right": true
              },
              {
                "answer": "They cannot be represented in a physics engine",
                "right": false
              },
              {
                "answer": "They require more complex textures",
                "right": false
              },
              {
                "answer": "They cannot be rendered in 3D",
                "right": false
              }
            ]
          },
          {
            "title": "Which algorithm is commonly used to break a concave polygon into convex parts?",
            "short_title": "Concave decomposition algorithm",
            "answers": [
              {
                "answer": "Ear clipping",
                "right": true
              },
              {
                "answer": "QuickHull",
                "right": false
              },
              {
                "answer": "Marching Cubes",
                "right": false
              },
              {
                "answer": "A* Pathfinding",
                "right": false
              }
            ]
          }
        ],
        "Bounding Volume": [
          {
            "title": "What is a bounding volume in game physics?",
            "short_title": "Bounding volume definition",
            "answers": [
              {
                "answer": "A simplified shape used to approximate an object's space",
                "right": true
              },
              {
                "answer": "The exact polygonal mesh of an object",
                "right": false
              },
              {
                "answer": "A texture used for object rendering",
                "right": false
              },
              {
                "answer": "A type of shader used for collision detection",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these is a common type of bounding volume?",
            "short_title": "Bounding volume types",
            "answers": [
              {
                "answer": "AABB (Axis-Aligned Bounding Box)",
                "right": true
              },
              {
                "answer": "Bezier Curves",
                "right": false
              },
              {
                "answer": "Parallax Occlusion Mapping",
                "right": false
              },
              {
                "answer": "Ray Marching",
                "right": false
              }
            ]
          },
          {
            "title": "Why are bounding volumes used in physics engines?",
            "short_title": "Purpose of bounding volumes",
            "answers": [
              {
                "answer": "To optimize collision detection",
                "right": true
              },
              {
                "answer": "To increase GPU rendering quality",
                "right": false
              },
              {
                "answer": "To store animation keyframes",
                "right": false
              },
              {
                "answer": "To improve network synchronization",
                "right": false
              }
            ]
          },
          {
            "title": "What is an advantage of using bounding volumes?",
            "short_title": "Bounding volume advantages",
            "answers": [
              {
                "answer": "They simplify complex geometry for faster calculations",
                "right": true
              },
              {
                "answer": "They make objects look more realistic",
                "right": false
              },
              {
                "answer": "They eliminate the need for collision detection",
                "right": false
              },
              {
                "answer": "They work only with 2D physics simulations",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of bounding volume is always aligned with the world axes?",
            "short_title": "Axis-aligned bounding volume",
            "answers": [
              {
                "answer": "AABB (Axis-Aligned Bounding Box)",
                "right": true
              },
              {
                "answer": "OBB (Oriented Bounding Box)",
                "right": false
              },
              {
                "answer": "Convex Hull",
                "right": false
              },
              {
                "answer": "Sphere Bounding Volume",
                "right": false
              }
            ]
          }
        ],
        "UI and Interaction": [
          {
            "title": "What Unity component is used to display text on the screen?",
            "short_title": "Displaying text in Unity",
            "answers": [
              {
                "answer": "UI.Label",
                "right": false
              },
              {
                "answer": "TextMesh",
                "right": false
              },
              {
                "answer": "TMPro.Text",
                "right": false
              },
              {
                "answer": "Both B and C",
                "right": true
              }
            ]
          },
          {
            "title": "What function is used to detect mouse clicks in Unity?",
            "short_title": "Detecting mouse clicks",
            "answers": [
              {
                "answer": "MouseClick()",
                "right": false
              },
              {
                "answer": "Input.GetMouseButtonDown()",
                "right": true
              },
              {
                "answer": "CheckClick()",
                "right": false
              },
              {
                "answer": "MouseEvent()",
                "right": false
              }
            ]
          },
          {
            "title": "What component is used to play sound in Unity?",
            "short_title": "Playing sound in Unity",
            "answers": [
              {
                "answer": "AudioPlayer",
                "right": false
              },
              {
                "answer": "SoundComponent",
                "right": false
              },
              {
                "answer": "AudioSource",
                "right": true
              },
              {
                "answer": "MusicPlayer",
                "right": false
              }
            ]
          },
          {
            "title": "How do you make a button clickable in Unity?",
            "short_title": "Making a button clickable",
            "answers": [
              {
                "answer": "Assign an 'OnClick' event in the Inspector",
                "right": true
              },
              {
                "answer": "Attach a script to handle input",
                "right": false
              },
              {
                "answer": "Use Unity’s built-in UI system",
                "right": false
              },
              {
                "answer": "All of the above",
                "right": false
              }
            ]
          },
          {
            "title": "Which component is used to display text in Unity's UI?",
            "short_title": "UI Text component",
            "answers": [
              {
                "answer": "TextMeshPro",
                "right": true
              },
              {
                "answer": "Label",
                "right": false
              },
              {
                "answer": "UIText",
                "right": false
              },
              {
                "answer": "TextRenderer",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Canvas' component in Unity?",
            "short_title": "Canvas purpose",
            "answers": [
              {
                "answer": "To render 3D objects",
                "right": false
              },
              {
                "answer": "To manage UI elements",
                "right": true
              },
              {
                "answer": "To handle physics interactions",
                "right": false
              },
              {
                "answer": "To create animations",
                "right": false
              }
            ]
          },
          {
            "title": "Which component allows a UI element to respond to user clicks?",
            "short_title": "UI interactivity",
            "answers": [
              {
                "answer": "Button",
                "right": true
              },
              {
                "answer": "Image",
                "right": false
              },
              {
                "answer": "Text",
                "right": false
              },
              {
                "answer": "Slider",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'RectTransform' component in Unity UI?",
            "short_title": "RectTransform purpose",
            "answers": [
              {
                "answer": "To handle physics interactions",
                "right": false
              },
              {
                "answer": "To define the position, rotation, and scale of UI elements",
                "right": true
              },
              {
                "answer": "To render 3D objects",
                "right": false
              },
              {
                "answer": "To manage animations",
                "right": false
              }
            ]
          },
          {
            "title": "Which UI component is used to create a scrollable area?",
            "short_title": "Scrollable UI",
            "answers": [
              {
                "answer": "ScrollView",
                "right": true
              },
              {
                "answer": "Panel",
                "right": false
              },
              {
                "answer": "Grid",
                "right": false
              },
              {
                "answer": "List",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity UI component is used to display text?",
            "short_title": "UI component for text display",
            "answers": [
              {
                "answer": "Image",
                "right": false
              },
              {
                "answer": "RawImage",
                "right": false
              },
              {
                "answer": "TextMeshPro",
                "right": true
              },
              {
                "answer": "EventSystem",
                "right": false
              }
            ]
          },
          {
            "title": "What is needed for a UI button to register a click?",
            "short_title": "UI button click requirements",
            "answers": [
              {
                "answer": "A Collider component",
                "right": false
              },
              {
                "answer": "An Event Trigger component",
                "right": false
              },
              {
                "answer": "An EventSystem in the scene",
                "right": true
              },
              {
                "answer": "A custom script",
                "right": false
              }
            ]
          }
        ],
        "Basic Input and Player Controls": [
          {
            "title": "What is the default Unity function for handling keyboard input?",
            "short_title": "Handling keyboard input",
            "answers": [
              {
                "answer": "Input.GetKey()",
                "right": true
              },
              {
                "answer": "Keyboard.CheckKey()",
                "right": false
              },
              {
                "answer": "GetInput()",
                "right": false
              },
              {
                "answer": "InputManager.GetKey()",
                "right": false
              }
            ]
          },
          {
            "title": "How do you detect when the player presses the spacebar?",
            "short_title": "Detecting spacebar press",
            "answers": [
              {
                "answer": "Input.GetButtonDown('space')",
                "right": false
              },
              {
                "answer": "Input.GetKeyDown(KeyCode.Space)",
                "right": true
              },
              {
                "answer": "Keyboard.Press(KeyCode.Space)",
                "right": false
              },
              {
                "answer": "GetKeyDown(Spacebar)",
                "right": false
              }
            ]
          },
          {
            "title": "Which method is used to detect keyboard input in Unity?",
            "short_title": "Keyboard input detection",
            "answers": [
              {
                "answer": "Input.GetKey()",
                "right": true
              },
              {
                "answer": "Input.GetMouseButton()",
                "right": false
              },
              {
                "answer": "Input.GetTouch()",
                "right": false
              },
              {
                "answer": "Input.GetAxis()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetAxis(\"Horizontal\")' return?",
            "short_title": "Input.GetAxis usage",
            "answers": [
              {
                "answer": "A boolean value",
                "right": false
              },
              {
                "answer": "A value between -1 and 1 representing horizontal input",
                "right": true
              },
              {
                "answer": "The position of the mouse",
                "right": false
              },
              {
                "answer": "The current frame count",
                "right": false
              }
            ]
          },
          {
            "title": "Which method is used to detect mouse clicks in Unity?",
            "short_title": "Mouse click detection",
            "answers": [
              {
                "answer": "Input.GetKey()",
                "right": false
              },
              {
                "answer": "Input.GetMouseButton()",
                "right": true
              },
              {
                "answer": "Input.GetTouch()",
                "right": false
              },
              {
                "answer": "Input.GetAxis()",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Input Manager' in Unity?",
            "short_title": "Input Manager purpose",
            "answers": [
              {
                "answer": "To manage game objects",
                "right": false
              },
              {
                "answer": "To define and configure input axes and buttons",
                "right": true
              },
              {
                "answer": "To handle physics interactions",
                "right": false
              },
              {
                "answer": "To create animations",
                "right": false
              }
            ]
          },
          {
            "title": "Which method is used to detect touch input on mobile devices?",
            "short_title": "Touch input detection",
            "answers": [
              {
                "answer": "Input.GetKey()",
                "right": false
              },
              {
                "answer": "Input.GetMouseButton()",
                "right": false
              },
              {
                "answer": "Input.GetTouch()",
                "right": true
              },
              {
                "answer": "Input.GetAxis()",
                "right": false
              }
            ]
          }
        ],
        "Scripting and Logic": [
          {
            "title": "Which method is called automatically when a script starts?",
            "short_title": "Script start method",
            "answers": [
              {
                "answer": "Awake()",
                "right": false
              },
              {
                "answer": "Start()",
                "right": true
              },
              {
                "answer": "Initialize()",
                "right": false
              },
              {
                "answer": "Begin()",
                "right": false
              }
            ]
          },
          {
            "title": "How do you access a component attached to the same GameObject in a script?",
            "short_title": "Accessing components in script",
            "answers": [
              {
                "answer": "GetComponent<ComponentName>()",
                "right": true
              },
              {
                "answer": "FindObject<ComponentName>()",
                "right": false
              },
              {
                "answer": "gameObject.Find<ComponentName>()",
                "right": false
              },
              {
                "answer": "new ComponentName()",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to define a variable that can be accessed in the Unity Inspector?",
            "short_title": "Exposing variables in Inspector",
            "answers": [
              {
                "answer": "private",
                "right": false
              },
              {
                "answer": "protected",
                "right": false
              },
              {
                "answer": "public",
                "right": true
              },
              {
                "answer": "static",
                "right": false
              }
            ]
          },
          {
            "title": "What is the correct syntax to instantiate a GameObject in Unity?",
            "short_title": "Instantiating GameObjects",
            "answers": [
              {
                "answer": "Instantiate(gameObject);",
                "right": false
              },
              {
                "answer": "GameObject.Instantiate(prefab);",
                "right": true
              },
              {
                "answer": "CreateObject(prefab);",
                "right": false
              },
              {
                "answer": "Spawn(gameObject);",
                "right": false
              }
            ]
          },
          {
            "title": "Which method is used to detect collisions in Unity?",
            "short_title": "Collision detection",
            "answers": [
              {
                "answer": "OnTriggerEnter()",
                "right": false
              },
              {
                "answer": "OnCollisionEnter()",
                "right": true
              },
              {
                "answer": "OnCollisionStay()",
                "right": false
              },
              {
                "answer": "OnTriggerStay()",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Start()' function in Unity?",
            "short_title": "Purpose of Start()",
            "answers": [
              {
                "answer": "Runs every frame",
                "right": false
              },
              {
                "answer": "Runs once when the game starts",
                "right": true
              },
              {
                "answer": "Runs when a collision occurs",
                "right": false
              },
              {
                "answer": "Runs when the game object is destroyed",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace is required to use Unity's UI system in scripts?",
            "short_title": "UI namespace",
            "answers": [
              {
                "answer": "UnityEngine.UI",
                "right": true
              },
              {
                "answer": "UnityEngine.Graphics",
                "right": false
              },
              {
                "answer": "UnityEngine.Input",
                "right": false
              },
              {
                "answer": "UnityEngine.Core",
                "right": false
              }
            ]
          }
        ],
        "Prefabs and Instantiation": [
          {
            "title": "What is a Prefab in Unity?",
            "short_title": "Prefab definition",
            "answers": [
              {
                "answer": "A reusable template for GameObjects",
                "right": true
              },
              {
                "answer": "A type of light",
                "right": false
              },
              {
                "answer": "A script for animations",
                "right": false
              },
              {
                "answer": "A UI element",
                "right": false
              }
            ]
          },
          {
            "title": "How do you instantiate a Prefab in Unity?",
            "short_title": "Instantiating Prefabs",
            "answers": [
              {
                "answer": "Instantiate(prefab);",
                "right": true
              },
              {
                "answer": "Create(prefab);",
                "right": false
              },
              {
                "answer": "Spawn(prefab);",
                "right": false
              },
              {
                "answer": "Clone(prefab);",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you modify a Prefab in Unity?",
            "short_title": "Modifying Prefabs",
            "answers": [
              {
                "answer": "Only the selected instance is modified",
                "right": false
              },
              {
                "answer": "All instances of the Prefab are updated",
                "right": true
              },
              {
                "answer": "The Prefab is deleted",
                "right": false
              },
              {
                "answer": "Nothing happens",
                "right": false
              }
            ]
          }
        ],
        "Audio Basics": [
          {
            "title": "Which component is used to play sounds in Unity?",
            "short_title": "Audio component",
            "answers": [
              {
                "answer": "Audio Source",
                "right": true
              },
              {
                "answer": "Audio Listener",
                "right": false
              },
              {
                "answer": "Audio Clip",
                "right": false
              },
              {
                "answer": "Audio Mixer",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Audio Listener' component?",
            "short_title": "Audio Listener purpose",
            "answers": [
              {
                "answer": "To play sounds",
                "right": false
              },
              {
                "answer": "To receive and play audio in the scene",
                "right": true
              },
              {
                "answer": "To mix audio tracks",
                "right": false
              },
              {
                "answer": "To create sound effects",
                "right": false
              }
            ]
          },
          {
            "title": "Which tool is used to control audio effects and mixing in Unity?",
            "short_title": "Audio mixing tool",
            "answers": [
              {
                "answer": "Audio Mixer",
                "right": true
              },
              {
                "answer": "Audio Source",
                "right": false
              },
              {
                "answer": "Audio Clip",
                "right": false
              },
              {
                "answer": "Audio Listener",
                "right": false
              }
            ]
          }
        ],
        "Lighting and Rendering": [
          {
            "title": "Which type of light in Unity is most performance-friendly for large scenes?",
            "short_title": "Performance-friendly light",
            "answers": [
              {
                "answer": "Directional Light",
                "right": true
              },
              {
                "answer": "Point Light",
                "right": false
              },
              {
                "answer": "Spot Light",
                "right": false
              },
              {
                "answer": "Area Light",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Baked Lighting' in Unity?",
            "short_title": "Baked Lighting purpose",
            "answers": [
              {
                "answer": "To calculate lighting in real-time",
                "right": false
              },
              {
                "answer": "To precompute lighting for better performance",
                "right": true
              },
              {
                "answer": "To create dynamic shadows",
                "right": false
              },
              {
                "answer": "To handle post-processing effects",
                "right": false
              }
            ]
          },
          {
            "title": "Which component is used to add reflections to a scene in Unity?",
            "short_title": "Reflections in Unity",
            "answers": [
              {
                "answer": "Reflection Probe",
                "right": true
              },
              {
                "answer": "Light Probe",
                "right": false
              },
              {
                "answer": "Camera",
                "right": false
              },
              {
                "answer": "Skybox",
                "right": false
              }
            ]
          }
        ],
        "Animation Basics": [
          {
            "title": "Which component is used to create animations in Unity?",
            "short_title": "Animation component",
            "answers": [
              {
                "answer": "Animator",
                "right": true
              },
              {
                "answer": "Animation",
                "right": false
              },
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Animator Controller' in Unity?",
            "short_title": "Animator Controller purpose",
            "answers": [
              {
                "answer": "To manage physics interactions",
                "right": false
              },
              {
                "answer": "To control the flow of animations",
                "right": true
              },
              {
                "answer": "To render 3D models",
                "right": false
              },
              {
                "answer": "To handle UI elements",
                "right": false
              }
            ]
          },
          {
            "title": "Which window is used to create and edit animation clips in Unity?",
            "short_title": "Animation clip editing",
            "answers": [
              {
                "answer": "Animation Window",
                "right": true
              },
              {
                "answer": "Inspector",
                "right": false
              },
              {
                "answer": "Hierarchy",
                "right": false
              },
              {
                "answer": "Project",
                "right": false
              }
            ]
          }
        ],
        "OOP Principles": [
          {
            "title": "What is a class in C#?",
            "short_title": "Class definition",
            "answers": [
              {
                "answer": "A blueprint for creating objects",
                "right": true
              },
              {
                "answer": "A type of loop",
                "right": false
              },
              {
                "answer": "A variable container",
                "right": false
              },
              {
                "answer": "A method declaration",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to define a class in C#?",
            "short_title": "Class keyword",
            "answers": [
              {
                "answer": "class",
                "right": true
              },
              {
                "answer": "struct",
                "right": false
              },
              {
                "answer": "object",
                "right": false
              },
              {
                "answer": "type",
                "right": false
              }
            ]
          },
          {
            "title": "What is an object in OOP?",
            "short_title": "Object definition",
            "answers": [
              {
                "answer": "An instance of a class",
                "right": true
              },
              {
                "answer": "A variable",
                "right": false
              },
              {
                "answer": "A method",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              }
            ]
          },
          {
            "title": "How do you create an instance of a class in C#?",
            "short_title": "Instance creation",
            "answers": [
              {
                "answer": "Using the 'new' keyword",
                "right": true
              },
              {
                "answer": "Using 'create'",
                "right": false
              },
              {
                "answer": "Using 'instance'",
                "right": false
              },
              {
                "answer": "Using 'class'",
                "right": false
              }
            ]
          },
          {
            "title": "What is inheritance in OOP?",
            "short_title": "Inheritance",
            "answers": [
              {
                "answer": "A class receiving properties from another class",
                "right": true
              },
              {
                "answer": "A method override",
                "right": false
              },
              {
                "answer": "A variable declaration",
                "right": false
              },
              {
                "answer": "A loop structure",
                "right": false
              }
            ]
          },
          {
            "title": "Which symbol is used in C# to indicate inheritance?",
            "short_title": "Inheritance symbol",
            "answers": [
              {
                "answer": ":",
                "right": true
              },
              {
                "answer": "->",
                "right": false
              },
              {
                "answer": ".",
                "right": false
              },
              {
                "answer": ";",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to access the base class in C#?",
            "short_title": "Base class access",
            "answers": [
              {
                "answer": "base",
                "right": true
              },
              {
                "answer": "super",
                "right": false
              },
              {
                "answer": "parent",
                "right": false
              },
              {
                "answer": "this",
                "right": false
              }
            ]
          },
          {
            "title": "What is encapsulation in OOP?",
            "short_title": "Encapsulation",
            "answers": [
              {
                "answer": "Hiding data with access modifiers",
                "right": true
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Inheriting classes",
                "right": false
              },
              {
                "answer": "Rendering objects",
                "right": false
              }
            ]
          },
          {
            "title": "Which access modifier allows a variable to be accessed from anywhere?",
            "short_title": "Public access",
            "answers": [
              {
                "answer": "public",
                "right": true
              },
              {
                "answer": "private",
                "right": false
              },
              {
                "answer": "protected",
                "right": false
              },
              {
                "answer": "internal",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'this' keyword refer to in a class?",
            "short_title": "this keyword",
            "answers": [
              {
                "answer": "The current instance of the class",
                "right": true
              },
              {
                "answer": "The base class",
                "right": false
              },
              {
                "answer": "A method",
                "right": false
              },
              {
                "answer": "A variable",
                "right": false
              }
            ]
          },
          {
            "title": "What is a constructor in C#?",
            "short_title": "Constructor",
            "answers": [
              {
                "answer": "A method called when an object is created",
                "right": true
              },
              {
                "answer": "A loop",
                "right": false
              },
              {
                "answer": "A variable",
                "right": false
              },
              {
                "answer": "An event",
                "right": false
              }
            ]
          },
          {
            "title": "How is a constructor named in C#?",
            "short_title": "Constructor naming",
            "answers": [
              {
                "answer": "The same as the class name",
                "right": true
              },
              {
                "answer": "Start",
                "right": false
              },
              {
                "answer": "Init",
                "right": false
              },
              {
                "answer": "Construct",
                "right": false
              }
            ]
          },
          {
            "title": "What does a field represent in a class?",
            "short_title": "Field",
            "answers": [
              {
                "answer": "A variable defined in a class",
                "right": true
              },
              {
                "answer": "A method",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              },
              {
                "answer": "An event",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default access modifier for class members in C#?",
            "short_title": "Default access",
            "answers": [
              {
                "answer": "private",
                "right": true
              },
              {
                "answer": "public",
                "right": false
              },
              {
                "answer": "protected",
                "right": false
              },
              {
                "answer": "internal",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity base class do scripts typically inherit from?",
            "short_title": "Unity base class",
            "answers": [
              {
                "answer": "MonoBehaviour",
                "right": true
              },
              {
                "answer": "Script",
                "right": false
              },
              {
                "answer": "Object",
                "right": false
              },
              {
                "answer": "Component",
                "right": false
              }
            ]
          },
          {
            "title": "What does a property provide in a class?",
            "short_title": "Property",
            "answers": [
              {
                "answer": "Controlled access to a field",
                "right": true
              },
              {
                "answer": "A loop",
                "right": false
              },
              {
                "answer": "A method override",
                "right": false
              },
              {
                "answer": "A variable declaration",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword defines a property in C#?",
            "short_title": "Property keyword",
            "answers": [
              {
                "answer": "get",
                "right": true
              },
              {
                "answer": "set",
                "right": false
              },
              {
                "answer": "property",
                "right": false
              },
              {
                "answer": "field",
                "right": false
              }
            ]
          },
          {
            "title": "What is a method in a class?",
            "short_title": "Method",
            "answers": [
              {
                "answer": "A function defined within a class",
                "right": true
              },
              {
                "answer": "A variable",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              },
              {
                "answer": "An object",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'protected' access modifier allow?",
            "short_title": "Protected access",
            "answers": [
              {
                "answer": "Access within the class and derived classes",
                "right": true
              },
              {
                "answer": "Access from anywhere",
                "right": false
              },
              {
                "answer": "Access only within the class",
                "right": false
              },
              {
                "answer": "Access within the assembly",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Unity’s 'GetComponent()' method?",
            "short_title": "GetComponent",
            "answers": [
              {
                "answer": "Accesses another component on the same GameObject",
                "right": true
              },
              {
                "answer": "Creates a new object",
                "right": false
              },
              {
                "answer": "Deletes a component",
                "right": false
              },
              {
                "answer": "Renders a component",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following best describes encapsulation?",
            "short_title": "Definition of encapsulation",
            "answers": [
              {
                "answer": "Hiding the internal details and exposing only necessary parts",
                "right": true
              },
              {
                "answer": "Allowing unrestricted access to all members",
                "right": false
              },
              {
                "answer": "Restricting object creation",
                "right": false
              },
              {
                "answer": "Linking multiple objects together",
                "right": false
              }
            ]
          },
          {
            "title": "What is polymorphism in object-oriented programming?",
            "short_title": "Definition of polymorphism",
            "answers": [
              {
                "answer": "The ability to process objects differently based on their data type",
                "right": true
              },
              {
                "answer": "Defining multiple methods with different names",
                "right": false
              },
              {
                "answer": "Forcing a class to inherit from multiple base classes",
                "right": false
              },
              {
                "answer": "Restricting method overriding",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of abstraction in OOP?",
            "short_title": "Purpose of abstraction",
            "answers": [
              {
                "answer": "To hide complex implementation details and expose only relevant functionality",
                "right": true
              },
              {
                "answer": "To make all members of a class public",
                "right": false
              },
              {
                "answer": "To allow multiple classes to inherit from one base class",
                "right": false
              },
              {
                "answer": "To enforce strict access control",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following is NOT an OOP principle?",
            "short_title": "Non-OOP principle",
            "answers": [
              {
                "answer": "Encapsulation",
                "right": false
              },
              {
                "answer": "Abstraction",
                "right": false
              },
              {
                "answer": "Recursion",
                "right": true
              },
              {
                "answer": "Polymorphism",
                "right": false
              }
            ]
          },
          {
            "title": "What is encapsulation in OOP?",
            "short_title": "Definition of encapsulation",
            "answers": [
              {
                "answer": "Hiding implementation details and exposing only necessary parts",
                "right": true
              },
              {
                "answer": "Using multiple classes to achieve a goal",
                "right": false
              },
              {
                "answer": "The ability to define multiple methods with the same name",
                "right": false
              },
              {
                "answer": "Restricting access to certain variables only within a method",
                "right": false
              }
            ]
          },
          {
            "title": "What is polymorphism in OOP?",
            "short_title": "Definition of polymorphism",
            "answers": [
              {
                "answer": "The ability to take many forms",
                "right": true
              },
              {
                "answer": "Restricting data access",
                "right": false
              },
              {
                "answer": "Hiding implementation details",
                "right": false
              },
              {
                "answer": "Using interfaces only",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used in C# to achieve inheritance?",
            "short_title": "Inheritance keyword",
            "answers": [
              {
                "answer": "extends",
                "right": false
              },
              {
                "answer": "inherits",
                "right": false
              },
              {
                "answer": "base",
                "right": false
              },
              {
                "answer": ":",
                "right": true
              }
            ]
          },
          {
            "title": "Which access modifier allows a class member to be accessible within the same assembly but not from another assembly?",
            "short_title": "Internal access modifier",
            "answers": [
              {
                "answer": "private",
                "right": false
              },
              {
                "answer": "protected",
                "right": false
              },
              {
                "answer": "internal",
                "right": true
              },
              {
                "answer": "public",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main benefit of using interfaces in OOP?",
            "short_title": "Benefit of interfaces",
            "answers": [
              {
                "answer": "They allow multiple inheritance in C#",
                "right": true
              },
              {
                "answer": "They prevent code duplication",
                "right": false
              },
              {
                "answer": "They improve performance",
                "right": false
              },
              {
                "answer": "They restrict object instantiation",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'virtual' keyword do in C#?",
            "short_title": "Purpose of virtual keyword",
            "answers": [
              {
                "answer": "Allows a method to be overridden in a derived class",
                "right": true
              },
              {
                "answer": "Prevents a method from being overridden",
                "right": false
              },
              {
                "answer": "Declares a method as abstract",
                "right": false
              },
              {
                "answer": "Hides the method from subclasses",
                "right": false
              }
            ]
          },
          {
            "title": "What is an abstract class?",
            "short_title": "Definition of abstract class",
            "answers": [
              {
                "answer": "A class that cannot be instantiated and may contain abstract methods",
                "right": true
              },
              {
                "answer": "A class that has no methods or properties",
                "right": false
              },
              {
                "answer": "A class that must implement all methods from an interface",
                "right": false
              },
              {
                "answer": "A class that is always sealed",
                "right": false
              }
            ]
          },
          {
            "title": "Which OOP principle is focused on hiding implementation details?",
            "short_title": "Hiding implementation details",
            "answers": [
              {
                "answer": "Encapsulation",
                "right": true
              },
              {
                "answer": "Inheritance",
                "right": false
              },
              {
                "answer": "Polymorphism",
                "right": false
              },
              {
                "answer": "Abstraction",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between an interface and an abstract class?",
            "short_title": "Interface vs Abstract Class",
            "answers": [
              {
                "answer": "An interface cannot have implemented methods, but an abstract class can",
                "right": true
              },
              {
                "answer": "An interface can be instantiated, but an abstract class cannot",
                "right": false
              },
              {
                "answer": "An interface always has constructors, while an abstract class does not",
                "right": false
              },
              {
                "answer": "Abstract classes cannot be inherited",
                "right": false
              }
            ]
          }
        ],
        "Inheritance and Interfaces": [
          {
            "title": "What is the key difference between an abstract class and an interface?",
            "short_title": "Abstract class vs Interface",
            "answers": [
              {
                "answer": "An abstract class can have implementations, while an interface cannot",
                "right": true
              },
              {
                "answer": "An interface can have constructors",
                "right": false
              },
              {
                "answer": "An abstract class cannot contain fields",
                "right": false
              },
              {
                "answer": "Interfaces cannot be implemented by multiple classes",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to inherit from a base class in C#?",
            "short_title": "Keyword for inheritance",
            "answers": [
              {
                "answer": "extends",
                "right": false
              },
              {
                "answer": "inherits",
                "right": false
              },
              {
                "answer": "base",
                "right": false
              },
              {
                "answer": ":",
                "right": true
              }
            ]
          },
          {
            "title": "Can a C# class implement multiple interfaces?",
            "short_title": "Multiple interfaces",
            "answers": [
              {
                "answer": "Yes",
                "right": true
              },
              {
                "answer": "No",
                "right": false
              },
              {
                "answer": "Only if they share the same methods",
                "right": false
              },
              {
                "answer": "Only if they are inherited from an abstract class",
                "right": false
              }
            ]
          }
        ],
        "Exception Handling": [
          {
            "title": "Which block is required when handling exceptions in C#?",
            "short_title": "Required block for exception handling",
            "answers": [
              {
                "answer": "finally",
                "right": false
              },
              {
                "answer": "throw",
                "right": false
              },
              {
                "answer": "catch",
                "right": true
              },
              {
                "answer": "error",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'finally' block do in a try-catch statement?",
            "short_title": "Purpose of finally block",
            "answers": [
              {
                "answer": "Executes code only if an exception occurs",
                "right": false
              },
              {
                "answer": "Executes code whether an exception occurs or not",
                "right": true
              },
              {
                "answer": "Skips the catch block",
                "right": false
              },
              {
                "answer": "Terminates the program if an exception is unhandled",
                "right": false
              }
            ]
          }
        ],
        "Delegates and Events": [
          {
            "title": "What is a delegate in C#?",
            "short_title": "Definition of delegate",
            "answers": [
              {
                "answer": "A reference type for methods",
                "right": true
              },
              {
                "answer": "A way to create multiple instances of a class",
                "right": false
              },
              {
                "answer": "A feature for asynchronous programming",
                "right": false
              },
              {
                "answer": "A built-in event handler",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of events in C#?",
            "short_title": "Purpose of events",
            "answers": [
              {
                "answer": "To define class properties",
                "right": false
              },
              {
                "answer": "To encapsulate method calls into a delegate",
                "right": false
              },
              {
                "answer": "To enable notification between objects",
                "right": true
              },
              {
                "answer": "To store multiple values in one object",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to declare an event in C#?",
            "short_title": "Keyword for event declaration",
            "answers": [
              {
                "answer": "delegate",
                "right": false
              },
              {
                "answer": "event",
                "right": true
              },
              {
                "answer": "handler",
                "right": false
              },
              {
                "answer": "trigger",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following best describes multicast delegates?",
            "short_title": "Multicast Delegates",
            "answers": [
              {
                "answer": "Delegates that can reference multiple methods",
                "right": true
              },
              {
                "answer": "Delegates used only for events",
                "right": false
              },
              {
                "answer": "Delegates that execute asynchronously",
                "right": false
              },
              {
                "answer": "Delegates that are automatically garbage collected",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you invoke an event with no subscribers?",
            "short_title": "Invoking an event with no subscribers",
            "answers": [
              {
                "answer": "Nothing happens",
                "right": true
              },
              {
                "answer": "A NullReferenceException is thrown",
                "right": false
              },
              {
                "answer": "A warning is generated at compile-time",
                "right": false
              },
              {
                "answer": "The program terminates",
                "right": false
              }
            ]
          },
          {
            "title": "Which method signature matches the EventHandler delegate in C#?",
            "short_title": "EventHandler delegate signature",
            "answers": [
              {
                "answer": "void MethodName(object sender, EventArgs e)",
                "right": true
              },
              {
                "answer": "void MethodName()",
                "right": false
              },
              {
                "answer": "bool MethodName(int value)",
                "right": false
              },
              {
                "answer": "Task MethodName()",
                "right": false
              }
            ]
          },
          {
            "title": "How can you subscribe a method to an event?",
            "short_title": "Subscribing to an event",
            "answers": [
              {
                "answer": "Using += operator",
                "right": true
              },
              {
                "answer": "Using = operator",
                "right": false
              },
              {
                "answer": "Using -> operator",
                "right": false
              },
              {
                "answer": "Using event keyword directly",
                "right": false
              }
            ]
          },
          {
            "title": "Which delegate type is commonly used for event handlers?",
            "short_title": "Common delegate type for events",
            "answers": [
              {
                "answer": "EventHandler",
                "right": true
              },
              {
                "answer": "Func<>",
                "right": false
              },
              {
                "answer": "Action<>",
                "right": false
              },
              {
                "answer": "Predicate<>",
                "right": false
              }
            ]
          },
          {
            "title": "What is an anonymous method in C#?",
            "short_title": "Anonymous method definition",
            "answers": [
              {
                "answer": "A method without a name, assigned to a delegate",
                "right": true
              },
              {
                "answer": "A method that does not return anything",
                "right": false
              },
              {
                "answer": "A method declared inside another method",
                "right": false
              },
              {
                "answer": "A method with no parameters",
                "right": false
              }
            ]
          },
          {
            "title": "Which lambda expression syntax is correct for a delegate accepting two integers and returning their sum?",
            "short_title": "Lambda syntax for sum delegate",
            "answers": [
              {
                "answer": "(x, y) => x + y",
                "right": true
              },
              {
                "answer": "x, y => x + y",
                "right": false
              },
              {
                "answer": "delegate(int x, int y) { return x + y; }",
                "right": false
              },
              {
                "answer": "Func<int, int, int> sum = (x, y) => { return x + y; };",
                "right": false
              }
            ]
          },
          {
            "title": "How do you remove a method from an event subscription?",
            "short_title": "Unsubscribing from an event",
            "answers": [
              {
                "answer": "Using -= operator",
                "right": true
              },
              {
                "answer": "Using += operator",
                "right": false
              },
              {
                "answer": "Using event.Unsubscribe()",
                "right": false
              },
              {
                "answer": "Using event.Remove()",
                "right": false
              }
            ]
          }
        ],
        "SOLID Principles": [
          {
            "title": "What does the 'S' in SOLID stand for?",
            "short_title": "S in SOLID",
            "answers": [
              {
                "answer": "Single Responsibility Principle",
                "right": true
              },
              {
                "answer": "Static Class Principle",
                "right": false
              },
              {
                "answer": "Simple Inheritance Principle",
                "right": false
              },
              {
                "answer": "State Management Principle",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle promotes dependency on abstractions rather than concrete implementations?",
            "short_title": "Dependency Inversion Principle",
            "answers": [
              {
                "answer": "Liskov Substitution Principle",
                "right": false
              },
              {
                "answer": "Dependency Inversion Principle",
                "right": true
              },
              {
                "answer": "Interface Segregation Principle",
                "right": false
              },
              {
                "answer": "Open/Closed Principle",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'L' in SOLID stand for?",
            "short_title": "L in SOLID",
            "answers": [
              {
                "answer": "Liskov Substitution Principle",
                "right": true
              },
              {
                "answer": "Layered Architecture Principle",
                "right": false
              },
              {
                "answer": "Logical Dependency Principle",
                "right": false
              },
              {
                "answer": "Lightweight Object Principle",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle ensures that a class should have only one reason to change?",
            "short_title": "Single Responsibility Principle",
            "answers": [
              {
                "answer": "Single Responsibility Principle",
                "right": true
              },
              {
                "answer": "Open/Closed Principle",
                "right": false
              },
              {
                "answer": "Liskov Substitution Principle",
                "right": false
              },
              {
                "answer": "Interface Segregation Principle",
                "right": false
              }
            ]
          },
          {
            "title": "Which SOLID principle is violated when a subclass changes the behavior of its superclass in an unexpected way?",
            "short_title": "Liskov Substitution Principle Violation",
            "answers": [
              {
                "answer": "Liskov Substitution Principle",
                "right": true
              },
              {
                "answer": "Open/Closed Principle",
                "right": false
              },
              {
                "answer": "Interface Segregation Principle",
                "right": false
              },
              {
                "answer": "Dependency Inversion Principle",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle suggests that software entities should be open for extension but closed for modification?",
            "short_title": "Open/Closed Principle",
            "answers": [
              {
                "answer": "Open/Closed Principle",
                "right": true
              },
              {
                "answer": "Single Responsibility Principle",
                "right": false
              },
              {
                "answer": "Dependency Inversion Principle",
                "right": false
              },
              {
                "answer": "Liskov Substitution Principle",
                "right": false
              }
            ]
          }
        ],
        "Memory Management": [
          {
            "title": "What is the purpose of the 'using' statement in C#?",
            "short_title": "Purpose of 'using' statement",
            "answers": [
              {
                "answer": "To manage scope and ensure disposal of resources",
                "right": true
              },
              {
                "answer": "To include namespaces in the code",
                "right": false
              },
              {
                "answer": "To import external libraries",
                "right": false
              },
              {
                "answer": "To enable garbage collection",
                "right": false
              }
            ]
          },
          {
            "title": "Which memory area is used for storing reference-type variables?",
            "short_title": "Reference types storage",
            "answers": [
              {
                "answer": "Stack",
                "right": false
              },
              {
                "answer": "Heap",
                "right": true
              },
              {
                "answer": "Registers",
                "right": false
              },
              {
                "answer": "Static memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is garbage collection in C#?",
            "short_title": "Garbage collection",
            "answers": [
              {
                "answer": "A process that automatically reclaims unused memory",
                "right": true
              },
              {
                "answer": "A method to manually free memory",
                "right": false
              },
              {
                "answer": "A way to handle runtime exceptions",
                "right": false
              },
              {
                "answer": "A tool for optimizing database queries",
                "right": false
              }
            ]
          },
          {
            "title": "Which method can be used to force garbage collection in C#?",
            "short_title": "Forcing garbage collection",
            "answers": [
              {
                "answer": "GC.Collect()",
                "right": true
              },
              {
                "answer": "GC.Run()",
                "right": false
              },
              {
                "answer": "GC.Execute()",
                "right": false
              },
              {
                "answer": "GC.Dispose()",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when an object implementing IDisposable is not disposed properly?",
            "short_title": "Undisposed IDisposable Object",
            "answers": [
              {
                "answer": "It may cause memory leaks",
                "right": true
              },
              {
                "answer": "It will be automatically collected without issues",
                "right": false
              },
              {
                "answer": "It will be forcefully finalized by GC",
                "right": false
              },
              {
                "answer": "It will throw an exception",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following is the best practice to manage memory efficiently in C#?",
            "short_title": "Best Memory Management Practice",
            "answers": [
              {
                "answer": "Use 'using' statement for IDisposable objects",
                "right": true
              },
              {
                "answer": "Call GC.Collect() manually frequently",
                "right": false
              },
              {
                "answer": "Avoid using reference types",
                "right": false
              },
              {
                "answer": "Use large object heap for all objects",
                "right": false
              }
            ]
          }
        ]
      }
    },
    {
      "rank": "junior+",
      "subjects": {
        "Unity Core Concepts": [
          {
            "title": "What does the 'Awake' method do in a Unity script?",
            "short_title": "Awake purpose",
            "answers": [
              {
                "answer": "Runs when the script is first initialized",
                "right": true
              },
              {
                "answer": "Runs every frame",
                "right": false
              },
              {
                "answer": "Runs when a collision occurs",
                "right": false
              },
              {
                "answer": "Runs when the object is destroyed",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Prefab in Unity?",
            "short_title": "Prefab definition",
            "answers": [
              {
                "answer": "A reusable template for GameObjects",
                "right": true
              },
              {
                "answer": "A physics component",
                "right": false
              },
              {
                "answer": "A shader file",
                "right": false
              },
              {
                "answer": "A scene file",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GameObject.Find()' do in Unity?",
            "short_title": "GameObject.Find()",
            "answers": [
              {
                "answer": "Locates a GameObject by name in the scene",
                "right": true
              },
              {
                "answer": "Creates a new GameObject",
                "right": false
              },
              {
                "answer": "Destroys a GameObject",
                "right": false
              },
              {
                "answer": "Moves a GameObject",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Transform' component in Unity?",
            "short_title": "Transform purpose",
            "answers": [
              {
                "answer": "Controls position, rotation, and scale",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders graphics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Instantiate()' do in Unity?",
            "short_title": "Instantiate purpose",
            "answers": [
              {
                "answer": "Creates a copy of an object in the scene",
                "right": true
              },
              {
                "answer": "Deletes an object",
                "right": false
              },
              {
                "answer": "Finds an object",
                "right": false
              },
              {
                "answer": "Scales an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the 'Update' method used for in Unity?",
            "short_title": "Update purpose",
            "answers": [
              {
                "answer": "Runs logic every frame",
                "right": true
              },
              {
                "answer": "Initializes an object",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Destroys an object",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Destroy()' do in Unity?",
            "short_title": "Destroy purpose",
            "answers": [
              {
                "answer": "Removes a GameObject or component from the scene",
                "right": true
              },
              {
                "answer": "Creates a new GameObject",
                "right": false
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Scales an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of a 'Scene' in Unity?",
            "short_title": "Scene purpose",
            "answers": [
              {
                "answer": "Contains all GameObjects and assets for a level",
                "right": true
              },
              {
                "answer": "Defines a single GameObject",
                "right": false
              },
              {
                "answer": "Manages physics settings",
                "right": false
              },
              {
                "answer": "Stores shader code",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Time.deltaTime' represent in Unity?",
            "short_title": "Time.deltaTime",
            "answers": [
              {
                "answer": "Time in seconds since the last frame",
                "right": true
              },
              {
                "answer": "Total game time",
                "right": false
              },
              {
                "answer": "Fixed physics time step",
                "right": false
              },
              {
                "answer": "Scene load time",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'MonoBehaviour' in Unity?",
            "short_title": "MonoBehaviour definition",
            "answers": [
              {
                "answer": "A base class for scripts attached to GameObjects",
                "right": true
              },
              {
                "answer": "A physics component",
                "right": false
              },
              {
                "answer": "A rendering system",
                "right": false
              },
              {
                "answer": "A UI element",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GetComponent()' do in Unity?",
            "short_title": "GetComponent purpose",
            "answers": [
              {
                "answer": "Retrieves a component attached to a GameObject",
                "right": true
              },
              {
                "answer": "Adds a new component",
                "right": false
              },
              {
                "answer": "Destroys a component",
                "right": false
              },
              {
                "answer": "Finds a GameObject",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Start' method in Unity?",
            "short_title": "Start purpose",
            "answers": [
              {
                "answer": "Runs once before the first frame",
                "right": true
              },
              {
                "answer": "Runs every frame",
                "right": false
              },
              {
                "answer": "Runs on collision",
                "right": false
              },
              {
                "answer": "Runs when destroyed",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.MoveTowards()' do in Unity?",
            "short_title": "Vector3.MoveTowards",
            "answers": [
              {
                "answer": "Moves a point toward a target at a set speed",
                "right": true
              },
              {
                "answer": "Rotates an object",
                "right": false
              },
              {
                "answer": "Scales an object",
                "right": false
              },
              {
                "answer": "Destroys an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Camera' component in Unity?",
            "short_title": "Camera purpose",
            "answers": [
              {
                "answer": "Renders the scene to the screen",
                "right": true
              },
              {
                "answer": "Moves objects",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.LoadScene()' do in Unity?",
            "short_title": "LoadScene purpose",
            "answers": [
              {
                "answer": "Loads a new scene by name or index",
                "right": true
              },
              {
                "answer": "Unloads the current scene",
                "right": false
              },
              {
                "answer": "Restarts the game",
                "right": false
              },
              {
                "answer": "Pauses the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Coroutine' in Unity?",
            "short_title": "Coroutine definition",
            "answers": [
              {
                "answer": "A method that can pause and resume over time",
                "right": true
              },
              {
                "answer": "A physics calculation",
                "right": false
              },
              {
                "answer": "A rendering function",
                "right": false
              },
              {
                "answer": "A UI component",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'yield return null' do in a Unity Coroutine?",
            "short_title": "yield return null",
            "answers": [
              {
                "answer": "Waits until the next frame",
                "right": true
              },
              {
                "answer": "Stops the coroutine",
                "right": false
              },
              {
                "answer": "Waits for a collision",
                "right": false
              },
              {
                "answer": "Restarts the coroutine",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SerializeField' in Unity?",
            "short_title": "SerializeField purpose",
            "answers": [
              {
                "answer": "Makes a private field visible in the Inspector",
                "right": true
              },
              {
                "answer": "Hides a public field",
                "right": false
              },
              {
                "answer": "Creates a new object",
                "right": false
              },
              {
                "answer": "Disables a script",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'DontDestroyOnLoad()' do in Unity?",
            "short_title": "DontDestroyOnLoad purpose",
            "answers": [
              {
                "answer": "Keeps an object alive across scene changes",
                "right": true
              },
              {
                "answer": "Destroys an object",
                "right": false
              },
              {
                "answer": "Freezes an object",
                "right": false
              },
              {
                "answer": "Loads a new scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Layer' in Unity?",
            "short_title": "Layer purpose",
            "answers": [
              {
                "answer": "Groups objects for collision and rendering",
                "right": true
              },
              {
                "answer": "Changes object color",
                "right": false
              },
              {
                "answer": "Scales objects",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          }
        ],
        "Vectors": [
          {
            "title": "What is a vector in the context of game development?",
            "short_title": "Vector definition",
            "answers": [
              {
                "answer": "A quantity with magnitude and direction",
                "right": true
              },
              {
                "answer": "A single number",
                "right": false
              },
              {
                "answer": "A rendering tool",
                "right": false
              },
              {
                "answer": "A loop structure",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity type represents a 3D vector?",
            "short_title": "Unity 3D vector",
            "answers": [
              {
                "answer": "Vector3",
                "right": true
              },
              {
                "answer": "Vector2",
                "right": false
              },
              {
                "answer": "Float",
                "right": false
              },
              {
                "answer": "Int",
                "right": false
              }
            ]
          },
          {
            "title": "What does adding two vectors do in Unity?",
            "short_title": "Vector addition",
            "answers": [
              {
                "answer": "Combines their directions and magnitudes",
                "right": true
              },
              {
                "answer": "Subtracts one from the other",
                "right": false
              },
              {
                "answer": "Multiplies their lengths",
                "right": false
              },
              {
                "answer": "Renders a new vector",
                "right": false
              }
            ]
          },
          {
            "title": "How do you subtract vectors in Unity?",
            "short_title": "Vector subtraction",
            "answers": [
              {
                "answer": "Using the '-' operator",
                "right": true
              },
              {
                "answer": "Using the '+' operator",
                "right": false
              },
              {
                "answer": "Using the '*' operator",
                "right": false
              },
              {
                "answer": "Using the '/' operator",
                "right": false
              }
            ]
          },
          {
            "title": "What does multiplying a vector by a scalar do?",
            "short_title": "Scalar multiplication",
            "answers": [
              {
                "answer": "Changes its magnitude",
                "right": true
              },
              {
                "answer": "Changes its direction",
                "right": false
              },
              {
                "answer": "Creates a new vector",
                "right": false
              },
              {
                "answer": "Renders the vector",
                "right": false
              }
            ]
          },
          {
            "title": "What is the magnitude of a vector in Unity?",
            "short_title": "Vector magnitude",
            "answers": [
              {
                "answer": "Its length, accessed via Vector3.magnitude",
                "right": true
              },
              {
                "answer": "Its direction",
                "right": false
              },
              {
                "answer": "Its position",
                "right": false
              },
              {
                "answer": "Its speed",
                "right": false
              }
            ]
          },
          {
            "title": "How do you normalize a vector in Unity?",
            "short_title": "Normalize vector",
            "answers": [
              {
                "answer": "Using Vector3.normalized",
                "right": true
              },
              {
                "answer": "Using Vector3.magnitude",
                "right": false
              },
              {
                "answer": "Using Vector3.scale",
                "right": false
              },
              {
                "answer": "Using Vector3.direction",
                "right": false
              }
            ]
          },
          {
            "title": "What does a normalized vector represent?",
            "short_title": "Normalized vector",
            "answers": [
              {
                "answer": "A vector with a magnitude of 1",
                "right": true
              },
              {
                "answer": "A vector with no direction",
                "right": false
              },
              {
                "answer": "A vector with maximum length",
                "right": false
              },
              {
                "answer": "A rendered vector",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.forward' represent in Unity?",
            "short_title": "Vector3.forward",
            "answers": [
              {
                "answer": "The positive Z direction (0, 0, 1)",
                "right": true
              },
              {
                "answer": "The positive X direction",
                "right": false
              },
              {
                "answer": "The positive Y direction",
                "right": false
              },
              {
                "answer": "The origin",
                "right": false
              }
            ]
          },
          {
            "title": "How do you calculate the distance between two points in Unity?",
            "short_title": "Distance calculation",
            "answers": [
              {
                "answer": "Using Vector3.Distance()",
                "right": true
              },
              {
                "answer": "Using Vector3.Add()",
                "right": false
              },
              {
                "answer": "Using Vector3.Subtract()",
                "right": false
              },
              {
                "answer": "Using Vector3.Length()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.zero' represent?",
            "short_title": "Vector3.zero",
            "answers": [
              {
                "answer": "A vector with all components as 0",
                "right": true
              },
              {
                "answer": "A vector with all components as 1",
                "right": false
              },
              {
                "answer": "A random vector",
                "right": false
              },
              {
                "answer": "A rendered vector",
                "right": false
              }
            ]
          },
          {
            "title": "What is a practical use of vector normalization in Unity?",
            "short_title": "Normalization use",
            "answers": [
              {
                "answer": "Getting a direction for movement",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.up' represent in Unity?",
            "short_title": "Vector3.up",
            "answers": [
              {
                "answer": "The positive Y direction (0, 1, 0)",
                "right": true
              },
              {
                "answer": "The positive X direction",
                "right": false
              },
              {
                "answer": "The positive Z direction",
                "right": false
              },
              {
                "answer": "The negative Y direction",
                "right": false
              }
            ]
          },
          {
            "title": "How do you create a Vector3 with specific values in Unity?",
            "short_title": "Create Vector3",
            "answers": [
              {
                "answer": "Using new Vector3(x, y, z)",
                "right": true
              },
              {
                "answer": "Using Vector3.Create()",
                "right": false
              },
              {
                "answer": "Using Vector3.Set()",
                "right": false
              },
              {
                "answer": "Using Vector3.New()",
                "right": false
              }
            ]
          },
          {
            "title": "What does vector subtraction calculate in Unity?",
            "short_title": "Subtraction result",
            "answers": [
              {
                "answer": "The direction from one point to another",
                "right": true
              },
              {
                "answer": "The total length",
                "right": false
              },
              {
                "answer": "The sum of vectors",
                "right": false
              },
              {
                "answer": "The rendered vector",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.Lerp()' do?",
            "short_title": "Vector3.Lerp",
            "answers": [
              {
                "answer": "Interpolates between two vectors",
                "right": true
              },
              {
                "answer": "Calculates magnitude",
                "right": false
              },
              {
                "answer": "Normalizes a vector",
                "right": false
              },
              {
                "answer": "Renders a vector",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for vector addition?",
            "short_title": "Vector addition use",
            "answers": [
              {
                "answer": "Moving an object by a direction",
                "right": true
              },
              {
                "answer": "Rendering a scene",
                "right": false
              },
              {
                "answer": "Creating a loop",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.right' represent?",
            "short_title": "Vector3.right",
            "answers": [
              {
                "answer": "The positive X direction (1, 0, 0)",
                "right": true
              },
              {
                "answer": "The negative X direction",
                "right": false
              },
              {
                "answer": "The positive Y direction",
                "right": false
              },
              {
                "answer": "The positive Z direction",
                "right": false
              }
            ]
          },
          {
            "title": "How do you compare two vectors for equality in Unity?",
            "short_title": "Vector equality",
            "answers": [
              {
                "answer": "Using the '==' operator",
                "right": true
              },
              {
                "answer": "Using EqualsExact()",
                "right": false
              },
              {
                "answer": "Using Compare()",
                "right": false
              },
              {
                "answer": "Using Match()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.MoveTowards()' do?",
            "short_title": "Vector3.MoveTowards",
            "answers": [
              {
                "answer": "Moves a vector towards a target at a max distance",
                "right": true
              },
              {
                "answer": "Normalizes a vector",
                "right": false
              },
              {
                "answer": "Calculates distance",
                "right": false
              },
              {
                "answer": "Renders movement",
                "right": false
              }
            ]
          }
        ],
        "Dot and Cross Product": [
          {
            "title": "What does the dot product of two vectors calculate?",
            "short_title": "Dot product definition",
            "answers": [
              {
                "answer": "A scalar representing their alignment",
                "right": true
              },
              {
                "answer": "A new vector",
                "right": false
              },
              {
                "answer": "Their combined magnitude",
                "right": false
              },
              {
                "answer": "A rendered value",
                "right": false
              }
            ]
          },
          {
            "title": "How do you compute the dot product in Unity?",
            "short_title": "Dot product in Unity",
            "answers": [
              {
                "answer": "Using Vector3.Dot()",
                "right": true
              },
              {
                "answer": "Using Vector3.Cross()",
                "right": false
              },
              {
                "answer": "Using Vector3.Add()",
                "right": false
              },
              {
                "answer": "Using Vector3.Multiply()",
                "right": false
              }
            ]
          },
          {
            "title": "What does a positive dot product indicate?",
            "short_title": "Positive dot product",
            "answers": [
              {
                "answer": "Vectors point in similar directions",
                "right": true
              },
              {
                "answer": "Vectors are perpendicular",
                "right": false
              },
              {
                "answer": "Vectors point opposite",
                "right": false
              },
              {
                "answer": "Vectors are equal",
                "right": false
              }
            ]
          },
          {
            "title": "What does a dot product of zero mean between two vectors?",
            "short_title": "Zero dot product",
            "answers": [
              {
                "answer": "Vectors are perpendicular",
                "right": true
              },
              {
                "answer": "Vectors are parallel",
                "right": false
              },
              {
                "answer": "Vectors are identical",
                "right": false
              },
              {
                "answer": "Vectors are opposite",
                "right": false
              }
            ]
          },
          {
            "title": "What does a negative dot product indicate?",
            "short_title": "Negative dot product",
            "answers": [
              {
                "answer": "Vectors point in opposite directions",
                "right": true
              },
              {
                "answer": "Vectors are perpendicular",
                "right": false
              },
              {
                "answer": "Vectors are aligned",
                "right": false
              },
              {
                "answer": "Vectors are zero",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for the dot product?",
            "short_title": "Dot product use",
            "answers": [
              {
                "answer": "Checking if an enemy is in front of the player",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the cross product of two vectors produce?",
            "short_title": "Cross product definition",
            "answers": [
              {
                "answer": "A vector perpendicular to both",
                "right": true
              },
              {
                "answer": "A scalar value",
                "right": false
              },
              {
                "answer": "Their sum",
                "right": false
              },
              {
                "answer": "A rendered vector",
                "right": false
              }
            ]
          },
          {
            "title": "How do you compute the cross product in Unity?",
            "short_title": "Cross product in Unity",
            "answers": [
              {
                "answer": "Using Vector3.Cross()",
                "right": true
              },
              {
                "answer": "Using Vector3.Dot()",
                "right": false
              },
              {
                "answer": "Using Vector3.Add()",
                "right": false
              },
              {
                "answer": "Using Vector3.Subtract()",
                "right": false
              }
            ]
          },
          {
            "title": "What is the magnitude of a cross product related to?",
            "short_title": "Cross product magnitude",
            "answers": [
              {
                "answer": "The area of the parallelogram formed by the vectors",
                "right": true
              },
              {
                "answer": "The sum of their lengths",
                "right": false
              },
              {
                "answer": "Their dot product",
                "right": false
              },
              {
                "answer": "Their direction",
                "right": false
              }
            ]
          },
          {
            "title": "What does a cross product of zero indicate?",
            "short_title": "Zero cross product",
            "answers": [
              {
                "answer": "Vectors are parallel",
                "right": true
              },
              {
                "answer": "Vectors are perpendicular",
                "right": false
              },
              {
                "answer": "Vectors are opposite",
                "right": false
              },
              {
                "answer": "Vectors are equal",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for the cross product?",
            "short_title": "Cross product use",
            "answers": [
              {
                "answer": "Calculating a surface normal",
                "right": true
              },
              {
                "answer": "Rendering a scene",
                "right": false
              },
              {
                "answer": "Creating a loop",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Vector3.Dot(Vector3.up, Vector3.forward) return?",
            "short_title": "Dot example",
            "answers": [
              {
                "answer": "0 (they are perpendicular)",
                "right": true
              },
              {
                "answer": "1 (they are parallel)",
                "right": false
              },
              {
                "answer": "-1 (they are opposite)",
                "right": false
              },
              {
                "answer": "2 (their sum)",
                "right": false
              }
            ]
          },
          {
            "title": "What is the result of Vector3.Cross(Vector3.up, Vector3.right)?",
            "short_title": "Cross example",
            "answers": [
              {
                "answer": "Vector3.forward",
                "right": true
              },
              {
                "answer": "Vector3.up",
                "right": false
              },
              {
                "answer": "Vector3.right",
                "right": false
              },
              {
                "answer": "Vector3.zero",
                "right": false
              }
            ]
          },
          {
            "title": "How can the dot product help with movement in Unity?",
            "short_title": "Dot movement",
            "answers": [
              {
                "answer": "Determining if a direction aligns with velocity",
                "right": true
              },
              {
                "answer": "Rendering movement",
                "right": false
              },
              {
                "answer": "Stopping movement",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              }
            ]
          },
          {
            "title": "What does the sign of the dot product depend on?",
            "short_title": "Dot product sign",
            "answers": [
              {
                "answer": "The angle between the vectors",
                "right": true
              },
              {
                "answer": "Their magnitudes",
                "right": false
              },
              {
                "answer": "Their sum",
                "right": false
              },
              {
                "answer": "Their rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What does Vector3.Cross() require in Unity?",
            "short_title": "Cross requirements",
            "answers": [
              {
                "answer": "Two Vector3 arguments",
                "right": true
              },
              {
                "answer": "A single vector",
                "right": false
              },
              {
                "answer": "A scalar",
                "right": false
              },
              {
                "answer": "A rendered vector",
                "right": false
              }
            ]
          },
          {
            "title": "How can the cross product assist with camera orientation?",
            "short_title": "Cross camera",
            "answers": [
              {
                "answer": "Finding the right vector from up and forward",
                "right": true
              },
              {
                "answer": "Rendering the camera",
                "right": false
              },
              {
                "answer": "Stopping the camera",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              }
            ]
          },
          {
            "title": "What does the dot product of a vector with itself equal?",
            "short_title": "Dot with self",
            "answers": [
              {
                "answer": "The square of its magnitude",
                "right": true
              },
              {
                "answer": "Zero",
                "right": false
              },
              {
                "answer": "One",
                "right": false
              },
              {
                "answer": "Its direction",
                "right": false
              }
            ]
          },
          {
            "title": "What is the cross product’s direction determined by?",
            "short_title": "Cross direction",
            "answers": [
              {
                "answer": "The right-hand rule",
                "right": true
              },
              {
                "answer": "The left-hand rule",
                "right": false
              },
              {
                "answer": "Their magnitudes",
                "right": false
              },
              {
                "answer": "Their sum",
                "right": false
              }
            ]
          },
          {
            "title": "How does the dot product relate to the cosine of the angle?",
            "short_title": "Dot and cosine",
            "answers": [
              {
                "answer": "Dot = |a| * |b| * cos(angle)",
                "right": true
              },
              {
                "answer": "Dot = |a| + |b|",
                "right": false
              },
              {
                "answer": "Dot = |a| * |b| * sin(angle)",
                "right": false
              },
              {
                "answer": "Dot = |a| - |b|",
                "right": false
              }
            ]
          }
        ],
        "Basic Trigonometric Functions": [
          {
            "title": "What does the sine function (sin) represent in a right triangle?",
            "short_title": "Sine definition",
            "answers": [
              {
                "answer": "Opposite over hypotenuse",
                "right": true
              },
              {
                "answer": "Adjacent over hypotenuse",
                "right": false
              },
              {
                "answer": "Opposite over adjacent",
                "right": false
              },
              {
                "answer": "Adjacent over opposite",
                "right": false
              }
            ]
          },
          {
            "title": "What does the cosine function (cos) represent in a right triangle?",
            "short_title": "Cosine definition",
            "answers": [
              {
                "answer": "Adjacent over hypotenuse",
                "right": true
              },
              {
                "answer": "Opposite over hypotenuse",
                "right": false
              },
              {
                "answer": "Opposite over adjacent",
                "right": false
              },
              {
                "answer": "Adjacent over opposite",
                "right": false
              }
            ]
          },
          {
            "title": "What does the tangent function (tan) calculate?",
            "short_title": "Tangent definition",
            "answers": [
              {
                "answer": "Opposite over adjacent",
                "right": true
              },
              {
                "answer": "Adjacent over hypotenuse",
                "right": false
              },
              {
                "answer": "Opposite over hypotenuse",
                "right": false
              },
              {
                "answer": "Hypotenuse over adjacent",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity namespace provides trigonometric functions?",
            "short_title": "Trig namespace",
            "answers": [
              {
                "answer": "Mathf",
                "right": true
              },
              {
                "answer": "Math",
                "right": false
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System",
                "right": false
              }
            ]
          },
          {
            "title": "How do you calculate sine in Unity?",
            "short_title": "Sine in Unity",
            "answers": [
              {
                "answer": "Using Mathf.Sin()",
                "right": true
              },
              {
                "answer": "Using Mathf.Cos()",
                "right": false
              },
              {
                "answer": "Using Mathf.Tan()",
                "right": false
              },
              {
                "answer": "Using Mathf.Sine()",
                "right": false
              }
            ]
          },
          {
            "title": "What is the range of the sine function?",
            "short_title": "Sine range",
            "answers": [
              {
                "answer": "[-1, 1]",
                "right": true
              },
              {
                "answer": "[0, 1]",
                "right": false
              },
              {
                "answer": "[-∞, ∞]",
                "right": false
              },
              {
                "answer": "[0, ∞]",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Cos() return for an angle of 0 radians?",
            "short_title": "Cos of 0",
            "answers": [
              {
                "answer": "1",
                "right": true
              },
              {
                "answer": "0",
                "right": false
              },
              {
                "answer": "-1",
                "right": false
              },
              {
                "answer": "∞",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for the sine function?",
            "short_title": "Sine use",
            "answers": [
              {
                "answer": "Creating a bobbing motion",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Tan() calculate for π/4 radians?",
            "short_title": "Tan of π/4",
            "answers": [
              {
                "answer": "1",
                "right": true
              },
              {
                "answer": "0",
                "right": false
              },
              {
                "answer": "-1",
                "right": false
              },
              {
                "answer": "∞",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to Mathf.Tan() at π/2 radians?",
            "short_title": "Tan of π/2",
            "answers": [
              {
                "answer": "It approaches infinity",
                "right": true
              },
              {
                "answer": "It returns 0",
                "right": false
              },
              {
                "answer": "It returns 1",
                "right": false
              },
              {
                "answer": "It renders an error",
                "right": false
              }
            ]
          },
          {
            "title": "What is the period of the sine function?",
            "short_title": "Sine period",
            "answers": [
              {
                "answer": "2π radians",
                "right": true
              },
              {
                "answer": "π radians",
                "right": false
              },
              {
                "answer": "1 radian",
                "right": false
              },
              {
                "answer": "∞ radians",
                "right": false
              }
            ]
          },
          {
            "title": "How do you use cosine for movement in Unity?",
            "short_title": "Cosine movement",
            "answers": [
              {
                "answer": "To oscillate along an axis",
                "right": true
              },
              {
                "answer": "To render movement",
                "right": false
              },
              {
                "answer": "To stop movement",
                "right": false
              },
              {
                "answer": "To scale movement",
                "right": false
              }
            ]
          },
          {
            "title": "What does sin(π) equal?",
            "short_title": "Sin of π",
            "answers": [
              {
                "answer": "0",
                "right": true
              },
              {
                "answer": "1",
                "right": false
              },
              {
                "answer": "-1",
                "right": false
              },
              {
                "answer": "∞",
                "right": false
              }
            ]
          },
          {
            "title": "What is the value of cos(π/2)?",
            "short_title": "Cos of π/2",
            "answers": [
              {
                "answer": "0",
                "right": true
              },
              {
                "answer": "1",
                "right": false
              },
              {
                "answer": "-1",
                "right": false
              },
              {
                "answer": "∞",
                "right": false
              }
            ]
          },
          {
            "title": "What does the tangent function relate to sine and cosine?",
            "short_title": "Tan relation",
            "answers": [
              {
                "answer": "tan(θ) = sin(θ) / cos(θ)",
                "right": true
              },
              {
                "answer": "tan(θ) = sin(θ) + cos(θ)",
                "right": false
              },
              {
                "answer": "tan(θ) = sin(θ) * cos(θ)",
                "right": false
              },
              {
                "answer": "tan(θ) = cos(θ) - sin(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity animation use of trig functions?",
            "short_title": "Animation use",
            "answers": [
              {
                "answer": "Rotating objects smoothly",
                "right": true
              },
              {
                "answer": "Rendering animations",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Sin() expect as input?",
            "short_title": "Sin input",
            "answers": [
              {
                "answer": "An angle in radians",
                "right": true
              },
              {
                "answer": "An angle in degrees",
                "right": false
              },
              {
                "answer": "A vector",
                "right": false
              },
              {
                "answer": "A rendered value",
                "right": false
              }
            ]
          },
          {
            "title": "How do you convert degrees to radians in Unity?",
            "short_title": "Degrees to radians",
            "answers": [
              {
                "answer": "Using Mathf.Deg2Rad",
                "right": true
              },
              {
                "answer": "Using Mathf.Rad2Deg",
                "right": false
              },
              {
                "answer": "Using Mathf.Convert()",
                "right": false
              },
              {
                "answer": "Using Mathf.ToRadians()",
                "right": false
              }
            ]
          },
          {
            "title": "What does cos(0) equal?",
            "short_title": "Cos of 0",
            "answers": [
              {
                "answer": "1",
                "right": true
              },
              {
                "answer": "0",
                "right": false
              },
              {
                "answer": "-1",
                "right": false
              },
              {
                "answer": "∞",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity physics use of tangent?",
            "short_title": "Tangent use",
            "answers": [
              {
                "answer": "Calculating projectile angles",
                "right": true
              },
              {
                "answer": "Rendering physics",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          }
        ],
        "Trigonometric Identities and Equations": [
          {
            "title": "What does the Pythagorean identity state?",
            "short_title": "Pythagorean identity",
            "answers": [
              {
                "answer": "sin²(θ) + cos²(θ) = 1",
                "right": true
              },
              {
                "answer": "sin(θ) + cos(θ) = 1",
                "right": false
              },
              {
                "answer": "tan²(θ) + 1 = 0",
                "right": false
              },
              {
                "answer": "sin(θ) * cos(θ) = 1",
                "right": false
              }
            ]
          },
          {
            "title": "What is the relationship between sine and cosine for complementary angles?",
            "short_title": "Complementary angles",
            "answers": [
              {
                "answer": "sin(θ) = cos(π/2 - θ)",
                "right": true
              },
              {
                "answer": "sin(θ) = cos(θ)",
                "right": false
              },
              {
                "answer": "sin(θ) = tan(π/2 - θ)",
                "right": false
              },
              {
                "answer": "sin(θ) = sin(π/2 - θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What does the tangent identity relate?",
            "short_title": "Tangent identity",
            "answers": [
              {
                "answer": "tan(θ) = sin(θ) / cos(θ)",
                "right": true
              },
              {
                "answer": "tan(θ) = sin(θ) + cos(θ)",
                "right": false
              },
              {
                "answer": "tan(θ) = cos(θ) / sin(θ)",
                "right": false
              },
              {
                "answer": "tan(θ) = sin²(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What is the double-angle identity for sine?",
            "short_title": "Double-angle sine",
            "answers": [
              {
                "answer": "sin(2θ) = 2sin(θ)cos(θ)",
                "right": true
              },
              {
                "answer": "sin(2θ) = sin(θ) + cos(θ)",
                "right": false
              },
              {
                "answer": "sin(2θ) = sin²(θ)",
                "right": false
              },
              {
                "answer": "sin(2θ) = cos²(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What does the double-angle identity for cosine state?",
            "short_title": "Double-angle cosine",
            "answers": [
              {
                "answer": "cos(2θ) = cos²(θ) - sin²(θ)",
                "right": true
              },
              {
                "answer": "cos(2θ) = sin(θ) + cos(θ)",
                "right": false
              },
              {
                "answer": "cos(2θ) = 2sin(θ)",
                "right": false
              },
              {
                "answer": "cos(2θ) = tan(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "How can you express tan(2θ) using tangent?",
            "short_title": "Double-angle tangent",
            "answers": [
              {
                "answer": "tan(2θ) = 2tan(θ) / (1 - tan²(θ))",
                "right": true
              },
              {
                "answer": "tan(2θ) = tan(θ) + tan(θ)",
                "right": false
              },
              {
                "answer": "tan(2θ) = tan²(θ)",
                "right": false
              },
              {
                "answer": "tan(2θ) = 1 / tan(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for the Pythagorean identity?",
            "short_title": "Pythagorean use",
            "answers": [
              {
                "answer": "Normalizing a direction vector",
                "right": true
              },
              {
                "answer": "Rendering a scene",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does sin(-θ) equal?",
            "short_title": "Sin of negative angle",
            "answers": [
              {
                "answer": "-sin(θ)",
                "right": true
              },
              {
                "answer": "sin(θ)",
                "right": false
              },
              {
                "answer": "cos(θ)",
                "right": false
              },
              {
                "answer": "tan(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What does cos(-θ) equal?",
            "short_title": "Cos of negative angle",
            "answers": [
              {
                "answer": "cos(θ)",
                "right": true
              },
              {
                "answer": "-cos(θ)",
                "right": false
              },
              {
                "answer": "sin(θ)",
                "right": false
              },
              {
                "answer": "-sin(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What is the value of sin(θ + π)?",
            "short_title": "Sin(θ + π)",
            "answers": [
              {
                "answer": "-sin(θ)",
                "right": true
              },
              {
                "answer": "sin(θ)",
                "right": false
              },
              {
                "answer": "cos(θ)",
                "right": false
              },
              {
                "answer": "tan(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What does the angle addition identity for cosine state?",
            "short_title": "Cosine addition",
            "answers": [
              {
                "answer": "cos(a + b) = cos(a)cos(b) - sin(a)sin(b)",
                "right": true
              },
              {
                "answer": "cos(a + b) = cos(a) + cos(b)",
                "right": false
              },
              {
                "answer": "cos(a + b) = sin(a) + sin(b)",
                "right": false
              },
              {
                "answer": "cos(a + b) = tan(a)tan(b)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity animation use of angle addition?",
            "short_title": "Angle addition use",
            "answers": [
              {
                "answer": "Combining rotations",
                "right": true
              },
              {
                "answer": "Rendering animations",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does cos(θ + π/2) equal?",
            "short_title": "Cos(θ + π/2)",
            "answers": [
              {
                "answer": "-sin(θ)",
                "right": true
              },
              {
                "answer": "sin(θ)",
                "right": false
              },
              {
                "answer": "cos(θ)",
                "right": false
              },
              {
                "answer": "tan(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "How do you solve sin(θ) = 0 in Unity?",
            "short_title": "Solve sin(θ) = 0",
            "answers": [
              {
                "answer": "θ = nπ, where n is an integer",
                "right": true
              },
              {
                "answer": "θ = π/2",
                "right": false
              },
              {
                "answer": "θ = 0 only",
                "right": false
              },
              {
                "answer": "θ = ∞",
                "right": false
              }
            ]
          },
          {
            "title": "What does the identity 1 + tan²(θ) equal?",
            "short_title": "1 + tan²(θ)",
            "answers": [
              {
                "answer": "sec²(θ)",
                "right": true
              },
              {
                "answer": "sin²(θ)",
                "right": false
              },
              {
                "answer": "cos²(θ)",
                "right": false
              },
              {
                "answer": "tan(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity physics use of identities?",
            "short_title": "Physics use",
            "answers": [
              {
                "answer": "Simplifying projectile trajectories",
                "right": true
              },
              {
                "answer": "Rendering physics",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does sin(θ + π/2) equal?",
            "short_title": "Sin(θ + π/2)",
            "answers": [
              {
                "answer": "cos(θ)",
                "right": true
              },
              {
                "answer": "-cos(θ)",
                "right": false
              },
              {
                "answer": "sin(θ)",
                "right": false
              },
              {
                "answer": "-sin(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "How do you solve cos(θ) = 1 in Unity?",
            "short_title": "Solve cos(θ) = 1",
            "answers": [
              {
                "answer": "θ = 2nπ, where n is an integer",
                "right": true
              },
              {
                "answer": "θ = π/2",
                "right": false
              },
              {
                "answer": "θ = π",
                "right": false
              },
              {
                "answer": "θ = 0 only",
                "right": false
              }
            ]
          },
          {
            "title": "What does the angle subtraction identity for sine state?",
            "short_title": "Sine subtraction",
            "answers": [
              {
                "answer": "sin(a - b) = sin(a)cos(b) - cos(a)sin(b)",
                "right": true
              },
              {
                "answer": "sin(a - b) = sin(a) + sin(b)",
                "right": false
              },
              {
                "answer": "sin(a - b) = cos(a) + cos(b)",
                "right": false
              },
              {
                "answer": "sin(a - b) = tan(a) - tan(b)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity AI use of trig equations?",
            "short_title": "AI use",
            "answers": [
              {
                "answer": "Calculating field of view angles",
                "right": true
              },
              {
                "answer": "Rendering AI",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping AI",
                "right": false
              }
            ]
          }
        ],
        "Moment of Inertia": [
          {
            "title": "How does a higher moment of inertia affect the rotation of a spinning object in Unity?",
            "short_title": "High MoI rotation",
            "answers": [
              {
                "answer": "It makes the object harder to spin or stop",
                "right": true
              },
              {
                "answer": "It makes the object spin faster",
                "right": false
              },
              {
                "answer": "It stops the object immediately",
                "right": false
              },
              {
                "answer": "It reduces the object’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you apply a torque to an object with high moment of inertia in Unity?",
            "short_title": "MoI and torque",
            "answers": [
              {
                "answer": "The object rotates slowly due to resistance",
                "right": true
              },
              {
                "answer": "The object rotates quickly with little torque",
                "right": false
              },
              {
                "answer": "The object stops rotating",
                "right": false
              },
              {
                "answer": "The object moves linearly",
                "right": false
              }
            ]
          },
          {
            "title": "Why might a long, thin rod have a higher moment of inertia than a solid cube in Unity?",
            "short_title": "MoI shape comparison",
            "answers": [
              {
                "answer": "Because its mass is farther from the axis of rotation",
                "right": true
              },
              {
                "answer": "Because its mass is closer to the center",
                "right": false
              },
              {
                "answer": "Because it has less mass",
                "right": false
              },
              {
                "answer": "Because it doesn’t rotate",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia influence a rolling cylinder in Unity?",
            "short_title": "MoI rolling cylinder",
            "answers": [
              {
                "answer": "It affects how easily the cylinder starts or stops rolling",
                "right": true
              },
              {
                "answer": "It increases the cylinder’s linear speed",
                "right": false
              },
              {
                "answer": "It stops the cylinder immediately",
                "right": false
              },
              {
                "answer": "It reduces the cylinder’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What Unity setting can you adjust to manually set moment of inertia for a custom shape?",
            "short_title": "Manual MoI",
            "answers": [
              {
                "answer": "Rigidbody.inertiaTensor",
                "right": true
              },
              {
                "answer": "Rigidbody.mass",
                "right": false
              },
              {
                "answer": "Rigidbody.velocity",
                "right": false
              },
              {
                "answer": "Rigidbody.drag",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia affect a swinging pendulum in Unity?",
            "short_title": "MoI pendulum",
            "answers": [
              {
                "answer": "It determines how slowly the pendulum swings due to resistance",
                "right": true
              },
              {
                "answer": "It increases the pendulum’s swing speed",
                "right": false
              },
              {
                "answer": "It stops the pendulum immediately",
                "right": false
              },
              {
                "answer": "It reduces the pendulum’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if you increase moment of inertia for a rotating door in Unity?",
            "short_title": "MoI door",
            "answers": [
              {
                "answer": "It takes more force to open or close the door",
                "right": true
              },
              {
                "answer": "It opens faster with less force",
                "right": false
              },
              {
                "answer": "It stops the door from moving",
                "right": false
              },
              {
                "answer": "It reduces the door’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia interact with angular drag in Unity?",
            "short_title": "MoI and drag",
            "answers": [
              {
                "answer": "High moment of inertia makes angular drag slow rotation more gradually",
                "right": true
              },
              {
                "answer": "High moment of inertia stops rotation immediately",
                "right": false
              },
              {
                "answer": "Moment of inertia has no effect on angular drag",
                "right": false
              },
              {
                "answer": "Angular drag increases moment of inertia",
                "right": false
              }
            ]
          },
          {
            "title": "Why might a flat, wide object have a different moment of inertia on different axes in Unity?",
            "short_title": "MoI axes",
            "answers": [
              {
                "answer": "Because mass distribution varies along each axis",
                "right": true
              },
              {
                "answer": "Because it doesn’t rotate on any axis",
                "right": false
              },
              {
                "answer": "Because mass is uniform across all axes",
                "right": false
              },
              {
                "answer": "Because it only rotates on one axis",
                "right": false
              }
            ]
          },
          {
            "title": "What effect does moment of inertia have on a spinning ball hitting a wall in Unity?",
            "short_title": "MoI collision",
            "answers": [
              {
                "answer": "It affects how much the ball’s spin changes after impact",
                "right": true
              },
              {
                "answer": "It increases the ball’s linear speed after impact",
                "right": false
              },
              {
                "answer": "It stops the ball immediately",
                "right": false
              },
              {
                "answer": "It reduces the ball’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia change if you double the mass of an object in Unity?",
            "short_title": "MoI mass change",
            "answers": [
              {
                "answer": "It may increase, depending on mass distribution",
                "right": true
              },
              {
                "answer": "It always decreases",
                "right": false
              },
              {
                "answer": "It stays the same regardless of mass",
                "right": false
              },
              {
                "answer": "It stops rotation",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you apply a sudden torque to an object with low moment of inertia in Unity?",
            "short_title": "MoI sudden torque",
            "answers": [
              {
                "answer": "It spins quickly with little resistance",
                "right": true
              },
              {
                "answer": "It resists spinning strongly",
                "right": false
              },
              {
                "answer": "It stops immediately",
                "right": false
              },
              {
                "answer": "It moves linearly instead",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia affect a rotating platform in Unity?",
            "short_title": "MoI platform",
            "answers": [
              {
                "answer": "It determines how much force is needed to start or stop rotation",
                "right": true
              },
              {
                "answer": "It increases the platform’s linear speed",
                "right": false
              },
              {
                "answer": "It stops the platform immediately",
                "right": false
              },
              {
                "answer": "It reduces the platform’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "Why might a hollow cylinder have a higher moment of inertia than a solid cylinder in Unity?",
            "short_title": "MoI cylinders",
            "answers": [
              {
                "answer": "Because its mass is farther from the axis of rotation",
                "right": true
              },
              {
                "answer": "Because its mass is closer to the center",
                "right": false
              },
              {
                "answer": "Because it has less mass",
                "right": false
              },
              {
                "answer": "Because it doesn’t rotate",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia influence a spinning fan blade in Unity?",
            "short_title": "MoI fan blade",
            "answers": [
              {
                "answer": "It affects how long the blade spins before slowing",
                "right": true
              },
              {
                "answer": "It increases the blade’s linear speed",
                "right": false
              },
              {
                "answer": "It stops the blade immediately",
                "right": false
              },
              {
                "answer": "It reduces the blade’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What Unity feature allows you to visualize the effect of moment of inertia on rotation?",
            "short_title": "MoI visualization",
            "answers": [
              {
                "answer": "Rigidbody Inspector settings",
                "right": true
              },
              {
                "answer": "Collider settings",
                "right": false
              },
              {
                "answer": "Transform position",
                "right": false
              },
              {
                "answer": "Animator curves",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia impact a cartwheel’s rotation in Unity?",
            "short_title": "MoI cartwheel",
            "answers": [
              {
                "answer": "It determines how much force is needed to start or stop the cartwheel",
                "right": true
              },
              {
                "answer": "It increases the cartwheel’s linear speed",
                "right": false
              },
              {
                "answer": "It stops the cartwheel immediately",
                "right": false
              },
              {
                "answer": "It reduces the cartwheel’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if you set moment of inertia to zero for an object in Unity?",
            "short_title": "Zero MoI",
            "answers": [
              {
                "answer": "The object rotates freely with no resistance",
                "right": true
              },
              {
                "answer": "The object stops rotating",
                "right": false
              },
              {
                "answer": "The object moves linearly only",
                "right": false
              },
              {
                "answer": "The object increases mass",
                "right": false
              }
            ]
          },
          {
            "title": "How does moment of inertia affect a rotating dumbbell in Unity?",
            "short_title": "MoI dumbbell",
            "answers": [
              {
                "answer": "It depends on how the weights are distributed along the axis",
                "right": true
              },
              {
                "answer": "It increases linear speed",
                "right": false
              },
              {
                "answer": "It stops rotation immediately",
                "right": false
              },
              {
                "answer": "It reduces mass",
                "right": false
              }
            ]
          },
          {
            "title": "Why might a tall, narrow object have a high moment of inertia around its vertical axis in Unity?",
            "short_title": "MoI tall object",
            "answers": [
              {
                "answer": "Because its mass is distributed far from the vertical axis",
                "right": true
              },
              {
                "answer": "Because its mass is close to the center",
                "right": false
              },
              {
                "answer": "Because it doesn’t rotate",
                "right": false
              },
              {
                "answer": "Because it has low mass",
                "right": false
              }
            ]
          }
        ],
        "OOP Principles": [
          {
            "title": "What is the difference between method overloading and method overriding?",
            "short_title": "Overloading vs Overriding",
            "answers": [
              {
                "answer": "Overloading occurs in the same class, overriding in derived classes",
                "right": true
              },
              {
                "answer": "Overloading requires inheritance, overriding does not",
                "right": false
              },
              {
                "answer": "Overloading changes method signatures, overriding changes method return types",
                "right": false
              },
              {
                "answer": "Overriding allows multiple methods with the same name but different parameters",
                "right": false
              }
            ]
          },
          {
            "title": "What is covariance and contravariance in C# generics?",
            "short_title": "Covariance vs Contravariance",
            "answers": [
              {
                "answer": "Covariance allows a derived type to be used where a base type is expected, contravariance is the opposite",
                "right": true
              },
              {
                "answer": "Covariance works only with reference types, contravariance with value types",
                "right": false
              },
              {
                "answer": "Contravariance means two classes must have the same type parameters",
                "right": false
              },
              {
                "answer": "Covariance and contravariance apply only to static methods",
                "right": false
              }
            ]
          },
          {
            "title": "Which design pattern follows the Open/Closed principle of SOLID?",
            "short_title": "Design pattern for Open/Closed principle",
            "answers": [
              {
                "answer": "Strategy Pattern",
                "right": true
              },
              {
                "answer": "Singleton Pattern",
                "right": false
              },
              {
                "answer": "Prototype Pattern",
                "right": false
              },
              {
                "answer": "Observer Pattern",
                "right": false
              }
            ]
          },
          {
            "title": "Why are abstract classes used instead of interfaces in some cases?",
            "short_title": "Abstract classes vs Interfaces",
            "answers": [
              {
                "answer": "Abstract classes allow shared code implementation, while interfaces do not",
                "right": true
              },
              {
                "answer": "Interfaces cannot be inherited but abstract classes can",
                "right": false
              },
              {
                "answer": "Abstract classes are always faster than interfaces",
                "right": false
              },
              {
                "answer": "Interfaces do not support method overloading",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'sealed' keyword do in C#?",
            "short_title": "Purpose of sealed keyword",
            "answers": [
              {
                "answer": "Prevents a class from being inherited",
                "right": true
              },
              {
                "answer": "Prevents a class from implementing an interface",
                "right": false
              },
              {
                "answer": "Makes all methods in a class virtual",
                "right": false
              },
              {
                "answer": "Allows a class to be inherited only once",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between deep copy and shallow copy in C#?",
            "short_title": "Deep vs Shallow Copy",
            "answers": [
              {
                "answer": "Shallow copy copies references, deep copy duplicates objects",
                "right": true
              },
              {
                "answer": "Deep copy is faster than shallow copy",
                "right": false
              },
              {
                "answer": "Shallow copy works only on primitive types",
                "right": false
              },
              {
                "answer": "Deep copy is the default behavior of the Clone() method",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle states that derived classes must be substitutable for their base classes?",
            "short_title": "Liskov Substitution Principle",
            "answers": [
              {
                "answer": "Liskov Substitution Principle",
                "right": true
              },
              {
                "answer": "Open/Closed Principle",
                "right": false
              },
              {
                "answer": "Interface Segregation Principle",
                "right": false
              },
              {
                "answer": "Single Responsibility Principle",
                "right": false
              }
            ]
          },
          {
            "title": "What is method hiding in C#?",
            "short_title": "Method Hiding",
            "answers": [
              {
                "answer": "Using the 'new' keyword to hide a base class method",
                "right": true
              },
              {
                "answer": "Overriding a method with the same signature",
                "right": false
              },
              {
                "answer": "Preventing a method from being inherited",
                "right": false
              },
              {
                "answer": "Marking a method as private",
                "right": false
              }
            ]
          },
          {
            "title": "Which design pattern is used to ensure a class has only one instance?",
            "short_title": "Singleton Pattern",
            "answers": [
              {
                "answer": "Singleton",
                "right": true
              },
              {
                "answer": "Factory",
                "right": false
              },
              {
                "answer": "Builder",
                "right": false
              },
              {
                "answer": "Prototype",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main purpose of the Factory Method pattern?",
            "short_title": "Factory Method Pattern Purpose",
            "answers": [
              {
                "answer": "To create objects without specifying their exact class",
                "right": true
              },
              {
                "answer": "To allow multiple instances of a class",
                "right": false
              },
              {
                "answer": "To define a common interface for subclasses",
                "right": false
              },
              {
                "answer": "To ensure all classes have unique identifiers",
                "right": false
              }
            ]
          }
        ],
        "Memory Management and Garbage Collection": [
          {
            "title": "What is Garbage Collection (GC) in C#?",
            "short_title": "GC definition",
            "answers": [
              {
                "answer": "A process that automatically frees unused memory",
                "right": true
              },
              {
                "answer": "A method to manually allocate memory",
                "right": false
              },
              {
                "answer": "A tool for rendering graphics",
                "right": false
              },
              {
                "answer": "A physics simulation system",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when the Garbage Collector runs in Unity?",
            "short_title": "GC effect in Unity",
            "answers": [
              {
                "answer": "It may cause a performance hiccup or frame drop",
                "right": true
              },
              {
                "answer": "It speeds up the game",
                "right": false
              },
              {
                "answer": "It renders the scene",
                "right": false
              },
              {
                "answer": "It stops all physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common cause of Garbage Collection in Unity?",
            "short_title": "GC cause",
            "answers": [
              {
                "answer": "Creating new objects like strings or arrays repeatedly",
                "right": true
              },
              {
                "answer": "Moving an object",
                "right": false
              },
              {
                "answer": "Updating a Rigidbody",
                "right": false
              },
              {
                "answer": "Changing a material",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'heap memory' refer to in C#?",
            "short_title": "Heap memory",
            "answers": [
              {
                "answer": "Memory for objects managed by the Garbage Collector",
                "right": true
              },
              {
                "answer": "Memory for variables on the stack",
                "right": false
              },
              {
                "answer": "Memory for physics calculations",
                "right": false
              },
              {
                "answer": "Memory for rendering",
                "right": false
              }
            ]
          },
          {
            "title": "Why should you avoid frequent string concatenation in Unity?",
            "short_title": "String concatenation issue",
            "answers": [
              {
                "answer": "It creates new objects, triggering Garbage Collection",
                "right": true
              },
              {
                "answer": "It slows down rendering",
                "right": false
              },
              {
                "answer": "It stops physics",
                "right": false
              },
              {
                "answer": "It breaks scripts",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'StringBuilder' in C# for memory management?",
            "short_title": "StringBuilder purpose",
            "answers": [
              {
                "answer": "To manipulate strings without creating new objects",
                "right": true
              },
              {
                "answer": "To allocate more memory",
                "right": false
              },
              {
                "answer": "To handle physics",
                "right": false
              },
              {
                "answer": "To render text",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'null' do to an object reference in C#?",
            "short_title": "'null' effect",
            "answers": [
              {
                "answer": "Makes it eligible for Garbage Collection",
                "right": true
              },
              {
                "answer": "Deletes it immediately",
                "right": false
              },
              {
                "answer": "Hides it from the scene",
                "right": false
              },
              {
                "answer": "Freezes it",
                "right": false
              }
            ]
          },
          {
            "title": "What is 'stack memory' used for in C#?",
            "short_title": "Stack memory",
            "answers": [
              {
                "answer": "Stores local variables and method calls",
                "right": true
              },
              {
                "answer": "Stores objects managed by the GC",
                "right": false
              },
              {
                "answer": "Stores physics data",
                "right": false
              },
              {
                "answer": "Stores textures",
                "right": false
              }
            ]
          },
          {
            "title": "What can excessive Garbage Collection cause in a Unity game?",
            "short_title": "Excessive GC impact",
            "answers": [
              {
                "answer": "Stuttering or lag",
                "right": true
              },
              {
                "answer": "Faster performance",
                "right": false
              },
              {
                "answer": "Better graphics",
                "right": false
              },
              {
                "answer": "More accurate physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Object Pooling' help with in Unity?",
            "short_title": "Object Pooling",
            "answers": [
              {
                "answer": "Reducing memory allocation by reusing objects",
                "right": true
              },
              {
                "answer": "Increasing frame rate directly",
                "right": false
              },
              {
                "answer": "Rendering objects faster",
                "right": false
              },
              {
                "answer": "Handling physics collisions",
                "right": false
              }
            ]
          },
          {
            "title": "Why is it bad to use 'new' excessively in Unity’s Update method?",
            "short_title": "'new' in Update",
            "answers": [
              {
                "answer": "It generates garbage every frame",
                "right": true
              },
              {
                "answer": "It slows down physics",
                "right": false
              },
              {
                "answer": "It breaks rendering",
                "right": false
              },
              {
                "answer": "It stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GC.Collect()' do in C#?",
            "short_title": "GC.Collect()",
            "answers": [
              {
                "answer": "Forces the Garbage Collector to run immediately",
                "right": true
              },
              {
                "answer": "Allocates new memory",
                "right": false
              },
              {
                "answer": "Stops the GC",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is a benefit of reusing arrays instead of creating new ones in Unity?",
            "short_title": "Array reuse",
            "answers": [
              {
                "answer": "Reduces garbage and memory allocations",
                "right": true
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Improves rendering speed",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Destroy()' do to an object’s memory in Unity?",
            "short_title": "Destroy memory effect",
            "answers": [
              {
                "answer": "Marks it for Garbage Collection after removal",
                "right": true
              },
              {
                "answer": "Frees memory instantly",
                "right": false
              },
              {
                "answer": "Keeps it in memory forever",
                "right": false
              },
              {
                "answer": "Duplicates the object",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'memory leak' in the context of Unity?",
            "short_title": "Memory leak",
            "answers": [
              {
                "answer": "When memory is allocated but never freed",
                "right": true
              },
              {
                "answer": "When memory is freed too early",
                "right": false
              },
              {
                "answer": "When physics stops working",
                "right": false
              },
              {
                "answer": "When rendering fails",
                "right": false
              }
            ]
          },
          {
            "title": "Why should you avoid 'GameObject.Find()' in Update for memory reasons?",
            "short_title": "GameObject.Find() in Update",
            "answers": [
              {
                "answer": "It creates temporary strings that trigger GC",
                "right": true
              },
              {
                "answer": "It slows down physics",
                "right": false
              },
              {
                "answer": "It renders objects",
                "right": false
              },
              {
                "answer": "It stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does setting a reference to 'null' help with in Unity?",
            "short_title": "'null' benefit",
            "answers": [
              {
                "answer": "Allows the Garbage Collector to reclaim memory",
                "right": true
              },
              {
                "answer": "Speeds up rendering",
                "right": false
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Pauses the game",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of caching components in Unity?",
            "short_title": "Caching components",
            "answers": [
              {
                "answer": "Avoids repeated lookups that generate garbage",
                "right": true
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.GC.SuppressFinalize()' do in C#?",
            "short_title": "SuppressFinalize",
            "answers": [
              {
                "answer": "Prevents an object’s finalizer from running",
                "right": true
              },
              {
                "answer": "Forces immediate GC",
                "right": false
              },
              {
                "answer": "Allocates new memory",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "Why is it good to use structs instead of classes for small data in Unity?",
            "short_title": "Structs vs classes",
            "answers": [
              {
                "answer": "Structs are stack-allocated and don’t trigger GC",
                "right": true
              },
              {
                "answer": "Structs render faster",
                "right": false
              },
              {
                "answer": "Structs improve physics",
                "right": false
              },
              {
                "answer": "Structs are bigger",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Dispose() method in C#?",
            "short_title": "Dispose() method",
            "answers": [
              {
                "answer": "Releases unmanaged resources explicitly",
                "right": true
              },
              {
                "answer": "Forces garbage collection immediately",
                "right": false
              },
              {
                "answer": "Removes objects from the heap",
                "right": false
              },
              {
                "answer": "Marks an object as ready for finalization",
                "right": false
              }
            ]
          },
          {
            "title": "Which garbage collection generation in C# is for short-lived objects?",
            "short_title": "Garbage Collection Generations",
            "answers": [
              {
                "answer": "Generation 0",
                "right": true
              },
              {
                "answer": "Generation 1",
                "right": false
              },
              {
                "answer": "Generation 2",
                "right": false
              },
              {
                "answer": "There are no garbage collection generations in C#",
                "right": false
              }
            ]
          }
        ],
        "LINQ and Functional Programming": [
          {
            "title": "Which LINQ method is used to filter elements from a collection?",
            "short_title": "Filtering with LINQ",
            "answers": [
              {
                "answer": "Where()",
                "right": true
              },
              {
                "answer": "Select()",
                "right": false
              },
              {
                "answer": "GroupBy()",
                "right": false
              },
              {
                "answer": "OrderBy()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Select() method do in LINQ?",
            "short_title": "Select() method",
            "answers": [
              {
                "answer": "Projects each element into a new form",
                "right": true
              },
              {
                "answer": "Filters elements based on a condition",
                "right": false
              },
              {
                "answer": "Groups elements based on a key",
                "right": false
              },
              {
                "answer": "Sorts elements in ascending order",
                "right": false
              }
            ]
          }
        ],
        "Rendering": [
          {
            "title": "What component is responsible for rendering a scene in Unity?",
            "short_title": "Rendering component",
            "answers": [
              {
                "answer": "Camera",
                "right": true
              },
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What does a 'Material' define in Unity?",
            "short_title": "Material definition",
            "answers": [
              {
                "answer": "How an object’s surface looks when rendered",
                "right": true
              },
              {
                "answer": "The object’s physics properties",
                "right": false
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The object’s animation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Mesh Renderer' in Unity?",
            "short_title": "Mesh Renderer purpose",
            "answers": [
              {
                "answer": "Renders a 3D mesh on a GameObject",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Handles collisions",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Shader' property of a Material do in Unity?",
            "short_title": "Shader property",
            "answers": [
              {
                "answer": "Defines how the material is rendered",
                "right": true
              },
              {
                "answer": "Sets the object’s position",
                "right": false
              },
              {
                "answer": "Controls physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default Unity shader for most objects?",
            "short_title": "Default shader",
            "answers": [
              {
                "answer": "Standard Shader",
                "right": true
              },
              {
                "answer": "Unlit Shader",
                "right": false
              },
              {
                "answer": "Particle Shader",
                "right": false
              },
              {
                "answer": "Transparent Shader",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Field of View' setting on a Camera control?",
            "short_title": "Field of View",
            "answers": [
              {
                "answer": "The width of the camera’s view angle",
                "right": true
              },
              {
                "answer": "The camera’s position",
                "right": false
              },
              {
                "answer": "The camera’s rotation",
                "right": false
              },
              {
                "answer": "The camera’s color",
                "right": false
              }
            ]
          },
          {
            "title": "What component adds light to a scene in Unity?",
            "short_title": "Light component",
            "answers": [
              {
                "answer": "Light",
                "right": true
              },
              {
                "answer": "Camera",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              },
              {
                "answer": "Rigidbody",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Directional Light' do in Unity?",
            "short_title": "Directional Light",
            "answers": [
              {
                "answer": "Simulates sunlight with parallel rays",
                "right": true
              },
              {
                "answer": "Lights a single point",
                "right": false
              },
              {
                "answer": "Creates shadows only",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Main Texture' in a Unity Material?",
            "short_title": "Main Texture",
            "answers": [
              {
                "answer": "Defines the primary surface image",
                "right": true
              },
              {
                "answer": "Controls the object’s physics",
                "right": false
              },
              {
                "answer": "Sets the light intensity",
                "right": false
              },
              {
                "answer": "Adjusts the camera view",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Camera.ClearFlags' control in Unity?",
            "short_title": "ClearFlags",
            "answers": [
              {
                "answer": "What the camera renders in the background",
                "right": true
              },
              {
                "answer": "The camera’s position",
                "right": false
              },
              {
                "answer": "The camera’s rotation",
                "right": false
              },
              {
                "answer": "The camera’s zoom",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Point Light' used for in Unity?",
            "short_title": "Point Light",
            "answers": [
              {
                "answer": "Emits light from a single point in all directions",
                "right": true
              },
              {
                "answer": "Creates parallel light rays",
                "right": false
              },
              {
                "answer": "Focuses light in a cone",
                "right": false
              },
              {
                "answer": "Renders shadows only",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Render Mode' of a Light affect in Unity?",
            "short_title": "Light Render Mode",
            "answers": [
              {
                "answer": "How the light is calculated (e.g., real-time or baked)",
                "right": true
              },
              {
                "answer": "The light’s color",
                "right": false
              },
              {
                "answer": "The light’s position",
                "right": false
              },
              {
                "answer": "The light’s shadow type",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shadows' in Unity Lights?",
            "short_title": "Shadows purpose",
            "answers": [
              {
                "answer": "Casts shadows from objects blocking the light",
                "right": true
              },
              {
                "answer": "Changes the light color",
                "right": false
              },
              {
                "answer": "Moves the light",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Camera.depth' control in Unity?",
            "short_title": "Camera.depth",
            "answers": [
              {
                "answer": "The order in which cameras render",
                "right": true
              },
              {
                "answer": "The camera’s field of view",
                "right": false
              },
              {
                "answer": "The camera’s resolution",
                "right": false
              },
              {
                "answer": "The camera’s position",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Spot Light' in Unity?",
            "short_title": "Spot Light",
            "answers": [
              {
                "answer": "A light that emits in a cone shape",
                "right": true
              },
              {
                "answer": "A light that shines everywhere",
                "right": false
              },
              {
                "answer": "A light that follows an object",
                "right": false
              },
              {
                "answer": "A light for UI only",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Material.color' change in Unity?",
            "short_title": "Material.color",
            "answers": [
              {
                "answer": "The base color of the material",
                "right": true
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The light intensity",
                "right": false
              },
              {
                "answer": "The camera angle",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Render Settings' in Unity?",
            "short_title": "Render Settings",
            "answers": [
              {
                "answer": "Controls global rendering options like fog and skybox",
                "right": true
              },
              {
                "answer": "Sets physics properties",
                "right": false
              },
              {
                "answer": "Moves objects",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Mesh Filter' do in Unity?",
            "short_title": "Mesh Filter",
            "answers": [
              {
                "answer": "Holds the mesh data for rendering",
                "right": true
              },
              {
                "answer": "Filters light",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Camera.cullingMask' control in Unity?",
            "short_title": "Culling Mask",
            "answers": [
              {
                "answer": "Which layers the camera renders",
                "right": true
              },
              {
                "answer": "The camera’s position",
                "right": false
              },
              {
                "answer": "The light intensity",
                "right": false
              },
              {
                "answer": "The object’s scale",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Ambient Light' in Unity?",
            "short_title": "Ambient Light",
            "answers": [
              {
                "answer": "Provides a base lighting level for the scene",
                "right": true
              },
              {
                "answer": "Focuses light on one object",
                "right": false
              },
              {
                "answer": "Casts shadows",
                "right": false
              },
              {
                "answer": "Moves the camera",
                "right": false
              }
            ]
          }
        ],
        "Input Handling": [
          {
            "title": "What does 'Input.GetKey()' do in Unity?",
            "short_title": "GetKey purpose",
            "answers": [
              {
                "answer": "Checks if a key is being held down",
                "right": true
              },
              {
                "answer": "Checks if a key was pressed this frame",
                "right": false
              },
              {
                "answer": "Moves the mouse",
                "right": false
              },
              {
                "answer": "Plays a sound",
                "right": false
              }
            ]
          },
          {
            "title": "What method detects a key press in a single frame in Unity?",
            "short_title": "Key press detection",
            "answers": [
              {
                "answer": "Input.GetKeyDown()",
                "right": true
              },
              {
                "answer": "Input.GetKey()",
                "right": false
              },
              {
                "answer": "Input.GetKeyUp()",
                "right": false
              },
              {
                "answer": "Input.GetMouseButton()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetMouseButton(0)' check in Unity?",
            "short_title": "GetMouseButton(0)",
            "answers": [
              {
                "answer": "If the left mouse button is held down",
                "right": true
              },
              {
                "answer": "If the right mouse button is pressed",
                "right": false
              },
              {
                "answer": "If the mouse moved",
                "right": false
              },
              {
                "answer": "If the mouse wheel scrolled",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.mousePosition' return in Unity?",
            "short_title": "mousePosition",
            "answers": [
              {
                "answer": "The position of the mouse cursor in screen coordinates",
                "right": true
              },
              {
                "answer": "The position of the player",
                "right": false
              },
              {
                "answer": "The speed of the mouse",
                "right": false
              },
              {
                "answer": "The button clicked",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Input.GetAxis()' in Unity?",
            "short_title": "GetAxis purpose",
            "answers": [
              {
                "answer": "Returns a smooth value for input like joystick or keys",
                "right": true
              },
              {
                "answer": "Checks if a button is pressed",
                "right": false
              },
              {
                "answer": "Moves the camera",
                "right": false
              },
              {
                "answer": "Plays an animation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetKeyUp()' detect in Unity?",
            "short_title": "GetKeyUp purpose",
            "answers": [
              {
                "answer": "When a key is released this frame",
                "right": true
              },
              {
                "answer": "When a key is held down",
                "right": false
              },
              {
                "answer": "When a key is pressed",
                "right": false
              },
              {
                "answer": "When a mouse button is clicked",
                "right": false
              }
            ]
          },
          {
            "title": "What axis name is commonly used for horizontal movement in Unity?",
            "short_title": "Horizontal axis",
            "answers": [
              {
                "answer": "Horizontal",
                "right": true
              },
              {
                "answer": "Vertical",
                "right": false
              },
              {
                "answer": "Mouse X",
                "right": false
              },
              {
                "answer": "Jump",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetMouseButtonDown(1)' check in Unity?",
            "short_title": "GetMouseButtonDown(1)",
            "answers": [
              {
                "answer": "If the right mouse button was pressed this frame",
                "right": true
              },
              {
                "answer": "If the left mouse button is held",
                "right": false
              },
              {
                "answer": "If the mouse moved",
                "right": false
              },
              {
                "answer": "If the middle mouse button was clicked",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Input Manager' in Unity?",
            "short_title": "Input Manager",
            "answers": [
              {
                "answer": "Configures input axes and buttons",
                "right": true
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetAxisRaw()' do differently from 'Input.GetAxis()'?",
            "short_title": "GetAxisRaw vs GetAxis",
            "answers": [
              {
                "answer": "Returns un-smoothed input values",
                "right": true
              },
              {
                "answer": "Smooths the input values",
                "right": false
              },
              {
                "answer": "Only works with mouse input",
                "right": false
              },
              {
                "answer": "Returns a boolean",
                "right": false
              }
            ]
          },
          {
            "title": "What is the new 'Input System' in Unity designed to improve?",
            "short_title": "New Input System",
            "answers": [
              {
                "answer": "Flexibility and support for multiple devices",
                "right": true
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Physics accuracy",
                "right": false
              },
              {
                "answer": "Animation playback",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.touchCount' return in Unity?",
            "short_title": "touchCount",
            "answers": [
              {
                "answer": "The number of active touches on the screen",
                "right": true
              },
              {
                "answer": "The mouse position",
                "right": false
              },
              {
                "answer": "The key pressed",
                "right": false
              },
              {
                "answer": "The axis value",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetTouch(0)' provide in Unity?",
            "short_title": "GetTouch(0)",
            "answers": [
              {
                "answer": "Details about the first touch on the screen",
                "right": true
              },
              {
                "answer": "The mouse button state",
                "right": false
              },
              {
                "answer": "The keyboard input",
                "right": false
              },
              {
                "answer": "The axis direction",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'KeyCode' in Unity?",
            "short_title": "KeyCode purpose",
            "answers": [
              {
                "answer": "Identifies specific keys for input detection",
                "right": true
              },
              {
                "answer": "Controls rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetButton()' do in Unity?",
            "short_title": "GetButton purpose",
            "answers": [
              {
                "answer": "Checks if a named button is held down",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Checks the mouse position",
                "right": false
              },
              {
                "answer": "Triggers an animation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetAxis(\"Vertical\")' typically control?",
            "short_title": "Vertical axis",
            "answers": [
              {
                "answer": "Forward and backward movement",
                "right": true
              },
              {
                "answer": "Left and right movement",
                "right": false
              },
              {
                "answer": "Mouse rotation",
                "right": false
              },
              {
                "answer": "Jumping",
                "right": false
              }
            ]
          },
          {
            "title": "What is an 'Input Action' in Unity’s new Input System?",
            "short_title": "Input Action",
            "answers": [
              {
                "answer": "A configurable input event",
                "right": true
              },
              {
                "answer": "A physics event",
                "right": false
              },
              {
                "answer": "A rendering command",
                "right": false
              },
              {
                "answer": "An animation trigger",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.anyKey' check in Unity?",
            "short_title": "anyKey purpose",
            "answers": [
              {
                "answer": "If any key or button is currently pressed",
                "right": true
              },
              {
                "answer": "If a specific key is pressed",
                "right": false
              },
              {
                "answer": "If the mouse moved",
                "right": false
              },
              {
                "answer": "If a touch occurred",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetMouseButtonUp(0)' detect?",
            "short_title": "GetMouseButtonUp(0)",
            "answers": [
              {
                "answer": "When the left mouse button is released",
                "right": true
              },
              {
                "answer": "When the right mouse button is pressed",
                "right": false
              },
              {
                "answer": "When the mouse moves",
                "right": false
              },
              {
                "answer": "When the middle mouse button is held",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'PlayerInput' component in Unity’s new Input System?",
            "short_title": "PlayerInput purpose",
            "answers": [
              {
                "answer": "Links input actions to game behaviors",
                "right": true
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          }
        ],
        "Animation": [
          {
            "title": "What component is used to control animations on a GameObject in Unity?",
            "short_title": "Animation component",
            "answers": [
              {
                "answer": "Animator",
                "right": true
              },
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              }
            ]
          },
          {
            "title": "What is an 'Animation Clip' in Unity?",
            "short_title": "Animation Clip definition",
            "answers": [
              {
                "answer": "A sequence of keyframes for animating an object",
                "right": true
              },
              {
                "answer": "A physics simulation",
                "right": false
              },
              {
                "answer": "A rendering setting",
                "right": false
              },
              {
                "answer": "A UI element",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Animator Controller' do in Unity?",
            "short_title": "Animator Controller purpose",
            "answers": [
              {
                "answer": "Manages animation states and transitions",
                "right": true
              },
              {
                "answer": "Controls physics",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Animator.Play()' method in Unity?",
            "short_title": "Animator.Play()",
            "answers": [
              {
                "answer": "Plays a specific animation state",
                "right": true
              },
              {
                "answer": "Stops all animations",
                "right": false
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Changes the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetBool()' do in Unity?",
            "short_title": "SetBool purpose",
            "answers": [
              {
                "answer": "Sets a boolean parameter to control transitions",
                "right": true
              },
              {
                "answer": "Plays an animation clip",
                "right": false
              },
              {
                "answer": "Stops an animation",
                "right": false
              },
              {
                "answer": "Renders a texture",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Transition' in the Animator Controller?",
            "short_title": "Transition definition",
            "answers": [
              {
                "answer": "A rule to switch between animation states",
                "right": true
              },
              {
                "answer": "A physics property",
                "right": false
              },
              {
                "answer": "A rendering effect",
                "right": false
              },
              {
                "answer": "A sound effect",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetFloat()' do in Unity?",
            "short_title": "SetFloat purpose",
            "answers": [
              {
                "answer": "Sets a float parameter for animation control",
                "right": true
              },
              {
                "answer": "Changes the object’s position",
                "right": false
              },
              {
                "answer": "Stops the animation",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Animation' component in Unity’s legacy system?",
            "short_title": "Legacy Animation",
            "answers": [
              {
                "answer": "Plays simple animation clips directly",
                "right": true
              },
              {
                "answer": "Manages complex state machines",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.speed' control in Unity?",
            "short_title": "Animator.speed",
            "answers": [
              {
                "answer": "The playback speed of all animations",
                "right": true
              },
              {
                "answer": "The object’s movement speed",
                "right": false
              },
              {
                "answer": "The rendering speed",
                "right": false
              },
              {
                "answer": "The physics simulation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Parameter' in the Animator Controller?",
            "short_title": "Parameter definition",
            "answers": [
              {
                "answer": "A variable used to control animation transitions",
                "right": true
              },
              {
                "answer": "A physics setting",
                "right": false
              },
              {
                "answer": "A rendering option",
                "right": false
              },
              {
                "answer": "A sound volume",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetTrigger()' do in Unity?",
            "short_title": "SetTrigger purpose",
            "answers": [
              {
                "answer": "Activates a trigger parameter for a transition",
                "right": true
              },
              {
                "answer": "Stops an animation",
                "right": false
              },
              {
                "answer": "Changes the object’s scale",
                "right": false
              },
              {
                "answer": "Renders a texture",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Animation Window' in Unity?",
            "short_title": "Animation Window",
            "answers": [
              {
                "answer": "Creates and edits Animation Clips",
                "right": true
              },
              {
                "answer": "Controls physics",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.GetCurrentAnimatorStateInfo()' return?",
            "short_title": "GetCurrentAnimatorStateInfo",
            "answers": [
              {
                "answer": "Details about the current animation state",
                "right": true
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The physics properties",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Blend Tree' in Unity?",
            "short_title": "Blend Tree definition",
            "answers": [
              {
                "answer": "A system to blend multiple animations",
                "right": true
              },
              {
                "answer": "A physics controller",
                "right": false
              },
              {
                "answer": "A rendering tool",
                "right": false
              },
              {
                "answer": "A UI layout",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animation.Play()' do in Unity’s legacy system?",
            "short_title": "Animation.Play()",
            "answers": [
              {
                "answer": "Plays a named animation clip",
                "right": true
              },
              {
                "answer": "Stops all animations",
                "right": false
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Changes the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of an 'Animation Event' in Unity?",
            "short_title": "Animation Event",
            "answers": [
              {
                "answer": "Calls a function at a specific point in an animation",
                "right": true
              },
              {
                "answer": "Triggers a physics event",
                "right": false
              },
              {
                "answer": "Renders a new frame",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetInteger()' do in Unity?",
            "short_title": "SetInteger purpose",
            "answers": [
              {
                "answer": "Sets an integer parameter for animation control",
                "right": true
              },
              {
                "answer": "Changes the object’s rotation",
                "right": false
              },
              {
                "answer": "Stops the animation",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default state in an Animator Controller called?",
            "short_title": "Default state",
            "answers": [
              {
                "answer": "Entry",
                "right": true
              },
              {
                "answer": "Idle",
                "right": false
              },
              {
                "answer": "Exit",
                "right": false
              },
              {
                "answer": "Start",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.IsInTransition()' check in Unity?",
            "short_title": "IsInTransition",
            "answers": [
              {
                "answer": "If the Animator is transitioning between states",
                "right": true
              },
              {
                "answer": "If an animation is stopped",
                "right": false
              },
              {
                "answer": "If the object is moving",
                "right": false
              },
              {
                "answer": "If the scene is rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Loop' setting on an Animation Clip?",
            "short_title": "Loop setting",
            "answers": [
              {
                "answer": "Makes the animation repeat indefinitely",
                "right": true
              },
              {
                "answer": "Stops the animation",
                "right": false
              },
              {
                "answer": "Changes the playback speed",
                "right": false
              },
              {
                "answer": "Renders a new frame",
                "right": false
              }
            ]
          }
        ],
        "Physics": [
          {
            "title": "What does 'Rigidbody.AddForce()' do in Unity?",
            "short_title": "AddForce purpose",
            "answers": [
              {
                "answer": "Applies a force to move a Rigidbody",
                "right": true
              },
              {
                "answer": "Stops a Rigidbody",
                "right": false
              },
              {
                "answer": "Changes the Rigidbody’s scale",
                "right": false
              },
              {
                "answer": "Rotates a Rigidbody",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between 'OnCollisionEnter' and 'OnTriggerEnter' in Unity?",
            "short_title": "Collision vs Trigger",
            "answers": [
              {
                "answer": "OnCollisionEnter is for physical collisions, OnTriggerEnter is for trigger zones",
                "right": true
              },
              {
                "answer": "OnTriggerEnter is for physical collisions, OnCollisionEnter is for triggers",
                "right": false
              },
              {
                "answer": "They are the same",
                "right": false
              },
              {
                "answer": "OnCollisionEnter renders graphics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.velocity' do when modified in Unity?",
            "short_title": "Rigidbody.velocity",
            "answers": [
              {
                "answer": "Directly sets the speed and direction of movement",
                "right": true
              },
              {
                "answer": "Applies a gradual force",
                "right": false
              },
              {
                "answer": "Changes the object’s rotation",
                "right": false
              },
              {
                "answer": "Stops the object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Physics Material' in Unity?",
            "short_title": "Physics Material",
            "answers": [
              {
                "answer": "Controls friction and bounciness of a Collider",
                "right": true
              },
              {
                "answer": "Renders the object",
                "right": false
              },
              {
                "answer": "Moves the object",
                "right": false
              },
              {
                "answer": "Plays an animation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'FixedUpdate()' do differently from 'Update()' for physics?",
            "short_title": "FixedUpdate vs Update",
            "answers": [
              {
                "answer": "Runs at a fixed time step for physics updates",
                "right": true
              },
              {
                "answer": "Runs every frame for rendering",
                "right": false
              },
              {
                "answer": "Runs only on collisions",
                "right": false
              },
              {
                "answer": "Runs at startup",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when a Rigidbody’s 'isKinematic' is set to true?",
            "short_title": "isKinematic effect",
            "answers": [
              {
                "answer": "It’s controlled by code, not physics",
                "right": true
              },
              {
                "answer": "It falls faster",
                "right": false
              },
              {
                "answer": "It stops colliding",
                "right": false
              },
              {
                "answer": "It rotates automatically",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.AddTorque()' apply to an object?",
            "short_title": "AddTorque purpose",
            "answers": [
              {
                "answer": "Rotational force",
                "right": true
              },
              {
                "answer": "Linear movement",
                "right": false
              },
              {
                "answer": "Gravity increase",
                "right": false
              },
              {
                "answer": "Scale change",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Collision' parameter provide in 'OnCollisionEnter'?",
            "short_title": "Collision parameter",
            "answers": [
              {
                "answer": "Details about the collision like contact points",
                "right": true
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The animation state",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.gravity' in Unity?",
            "short_title": "Physics.gravity",
            "answers": [
              {
                "answer": "Sets the global gravity direction and strength",
                "right": true
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Changes object colors",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.constraints' control in Unity?",
            "short_title": "Rigidbody.constraints",
            "answers": [
              {
                "answer": "Locks specific movements or rotations",
                "right": true
              },
              {
                "answer": "Increases gravity",
                "right": false
              },
              {
                "answer": "Changes the mass",
                "right": false
              },
              {
                "answer": "Triggers animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Trigger Collider' used for in Unity?",
            "short_title": "Trigger Collider",
            "answers": [
              {
                "answer": "Detecting overlap without physical collision",
                "right": true
              },
              {
                "answer": "Making objects bounce",
                "right": false
              },
              {
                "answer": "Rendering graphics",
                "right": false
              },
              {
                "answer": "Moving objects",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.Raycast()' do in Unity?",
            "short_title": "Physics.Raycast()",
            "answers": [
              {
                "answer": "Casts a ray to detect collisions",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Plays an animation",
                "right": false
              },
              {
                "answer": "Renders a texture",
                "right": false
              }
            ]
          },
          {
            "title": "What information does a 'RaycastHit' provide in Unity?",
            "short_title": "RaycastHit",
            "answers": [
              {
                "answer": "Details about what the ray hit, like point and object",
                "right": true
              },
              {
                "answer": "The object’s velocity",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The animation state",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.mass' affect in Unity?",
            "short_title": "Rigidbody.mass",
            "answers": [
              {
                "answer": "How forces and collisions impact the object",
                "right": true
              },
              {
                "answer": "The object’s size",
                "right": false
              },
              {
                "answer": "The object’s color",
                "right": false
              },
              {
                "answer": "The object’s animation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'OnCollisionStay' in Unity?",
            "short_title": "OnCollisionStay",
            "answers": [
              {
                "answer": "Called every frame while objects are touching",
                "right": true
              },
              {
                "answer": "Called when objects first collide",
                "right": false
              },
              {
                "answer": "Called when objects separate",
                "right": false
              },
              {
                "answer": "Called on trigger enter",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.useGravity' control?",
            "short_title": "useGravity purpose",
            "answers": [
              {
                "answer": "Whether the object is affected by gravity",
                "right": true
              },
              {
                "answer": "The object’s rotation",
                "right": false
              },
              {
                "answer": "The object’s rendering",
                "right": false
              },
              {
                "answer": "The object’s scale",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.IgnoreCollision()' do in Unity?",
            "short_title": "IgnoreCollision",
            "answers": [
              {
                "answer": "Prevents two Colliders from colliding",
                "right": true
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Changes gravity",
                "right": false
              },
              {
                "answer": "Renders a shadow",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of a 'Character Controller' in Unity?",
            "short_title": "Character Controller",
            "answers": [
              {
                "answer": "Handles simplified physics for character movement",
                "right": true
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Controls rendering",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.angularVelocity' control?",
            "short_title": "angularVelocity",
            "answers": [
              {
                "answer": "The rotational speed and direction",
                "right": true
              },
              {
                "answer": "The linear speed",
                "right": false
              },
              {
                "answer": "The object’s scale",
                "right": false
              },
              {
                "answer": "The object’s position",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'OnTriggerStay' in Unity?",
            "short_title": "OnTriggerStay",
            "answers": [
              {
                "answer": "Called every frame an object remains in a trigger",
                "right": true
              },
              {
                "answer": "Called when a collision starts",
                "right": false
              },
              {
                "answer": "Called when an object exits a trigger",
                "right": false
              },
              {
                "answer": "Called on frame update",
                "right": false
              }
            ]
          }
        ]
      }
    },
    {
      "rank": "Middle",
      "subjects": {
        "C#": [
          {
            "title": "What is the difference between Task and Thread in C#?",
            "short_title": "Task vs Thread",
            "answers": [
              {
                "answer": "Tasks are higher-level abstractions managed by the Task Scheduler, Threads are lower-level",
                "right": true
              },
              {
                "answer": "Threads are managed by the Task Scheduler, Tasks are not",
                "right": false
              },
              {
                "answer": "Tasks cannot run concurrently",
                "right": false
              },
              {
                "answer": "There is no difference",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'lock' keyword in C#?",
            "short_title": "Purpose of 'lock'",
            "answers": [
              {
                "answer": "To ensure thread-safe access to shared resources",
                "right": true
              },
              {
                "answer": "To create a new thread",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'volatile' keyword do in C#?",
            "short_title": "Volatile keyword",
            "answers": [
              {
                "answer": "Ensures a field is not cached and is always read from memory",
                "right": true
              },
              {
                "answer": "Marks a variable as constant",
                "right": false
              },
              {
                "answer": "Locks a variable for thread safety",
                "right": false
              },
              {
                "answer": "Optimizes performance",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between 'IEnumerable' and 'IQueryable' in C#?",
            "short_title": "IEnumerable vs IQueryable",
            "answers": [
              {
                "answer": "IQueryable executes queries on the server side, IEnumerable in memory",
                "right": true
              },
              {
                "answer": "IEnumerable is for databases, IQueryable is for collections",
                "right": false
              },
              {
                "answer": "IQueryable cannot be enumerated",
                "right": false
              },
              {
                "answer": "There is no difference",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Tuple' in C#?",
            "short_title": "Tuple definition",
            "answers": [
              {
                "answer": "A data structure to group multiple values",
                "right": true
              },
              {
                "answer": "A type-safe delegate",
                "right": false
              },
              {
                "answer": "A replacement for arrays",
                "right": false
              },
              {
                "answer": "A threading utility",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ValueTask' provide compared to 'Task' in C#?",
            "short_title": "ValueTask vs Task",
            "answers": [
              {
                "answer": "Performance optimization for synchronous results",
                "right": true
              },
              {
                "answer": "Better thread management",
                "right": false
              },
              {
                "answer": "Exception handling",
                "right": false
              },
              {
                "answer": "No difference",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'async void' methods in C#?",
            "short_title": "async void purpose",
            "answers": [
              {
                "answer": "For fire-and-forget operations, typically event handlers",
                "right": true
              },
              {
                "answer": "To return a value asynchronously",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              },
              {
                "answer": "To manage threads",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between 'override' and 'new' in C#?",
            "short_title": "override vs new",
            "answers": [
              {
                "answer": "'override' extends a virtual method, 'new' hides it",
                "right": true
              },
              {
                "answer": "'new' extends a virtual method, 'override' hides it",
                "right": false
              },
              {
                "answer": "They are identical",
                "right": false
              },
              {
                "answer": "'override' is for interfaces only",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Expression Trees' in C#?",
            "short_title": "Expression Trees",
            "answers": [
              {
                "answer": "To represent code as data for runtime manipulation",
                "right": true
              },
              {
                "answer": "To optimize loops",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              },
              {
                "answer": "To create threads",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Span<T>' provide in C#?",
            "short_title": "Span<T> purpose",
            "answers": [
              {
                "answer": "A lightweight view over a contiguous memory region",
                "right": true
              },
              {
                "answer": "A replacement for arrays",
                "right": false
              },
              {
                "answer": "A threading utility",
                "right": false
              },
              {
                "answer": "A database querying tool",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Monitor' class in C#?",
            "short_title": "Monitor class",
            "answers": [
              {
                "answer": "To provide thread synchronization similar to 'lock'",
                "right": true
              },
              {
                "answer": "To create async methods",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Lazy<T>' do in C#?",
            "short_title": "Lazy<T> purpose",
            "answers": [
              {
                "answer": "Delays object initialization until it’s needed",
                "right": true
              },
              {
                "answer": "Creates a thread pool",
                "right": false
              },
              {
                "answer": "Manages collections",
                "right": false
              },
              {
                "answer": "Handles events",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between 'StringBuilder' and 'string' in C#?",
            "short_title": "StringBuilder vs string",
            "answers": [
              {
                "answer": "StringBuilder is mutable, string is immutable",
                "right": true
              },
              {
                "answer": "String is mutable, StringBuilder is immutable",
                "right": false
              },
              {
                "answer": "StringBuilder is slower",
                "right": false
              },
              {
                "answer": "No difference",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'in' keyword do for parameters in C#?",
            "short_title": "in keyword",
            "answers": [
              {
                "answer": "Passes arguments by reference without allowing modification",
                "right": true
              },
              {
                "answer": "Allows modification of arguments",
                "right": false
              },
              {
                "answer": "Creates a copy of the argument",
                "right": false
              },
              {
                "answer": "Marks a parameter as optional",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ConcurrentDictionary' in C#?",
            "short_title": "ConcurrentDictionary",
            "answers": [
              {
                "answer": "Thread-safe key-value storage",
                "right": true
              },
              {
                "answer": "A faster List implementation",
                "right": false
              },
              {
                "answer": "A database query tool",
                "right": false
              },
              {
                "answer": "A memory optimizer",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'ThreadPool' class do in C#?",
            "short_title": "ThreadPool purpose",
            "answers": [
              {
                "answer": "Manages a pool of worker threads for efficient task execution",
                "right": true
              },
              {
                "answer": "Creates a single-threaded application",
                "right": false
              },
              {
                "answer": "Handles exceptions",
                "right": false
              },
              {
                "answer": "Optimizes memory allocation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Semaphore' in C#?",
            "short_title": "Semaphore purpose",
            "answers": [
              {
                "answer": "Limits the number of threads accessing a resource",
                "right": true
              },
              {
                "answer": "Creates a new thread",
                "right": false
              },
              {
                "answer": "Manages collections",
                "right": false
              },
              {
                "answer": "Handles events",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Parallel.For' provide in C#?",
            "short_title": "Parallel.For purpose",
            "answers": [
              {
                "answer": "Executes a loop in parallel across multiple threads",
                "right": true
              },
              {
                "answer": "Runs a loop synchronously",
                "right": false
              },
              {
                "answer": "Handles exceptions",
                "right": false
              },
              {
                "answer": "Creates a single thread",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ref struct' in C#?",
            "short_title": "ref struct purpose",
            "answers": [
              {
                "answer": "Defines a struct that can only live on the stack",
                "right": true
              },
              {
                "answer": "Creates a heap-allocated struct",
                "right": false
              },
              {
                "answer": "Manages threading",
                "right": false
              },
              {
                "answer": "Handles collections",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'TaskCompletionSource' allow in C#?",
            "short_title": "TaskCompletionSource",
            "answers": [
              {
                "answer": "Manual control over Task completion",
                "right": true
              },
              {
                "answer": "Automatic thread creation",
                "right": false
              },
              {
                "answer": "Exception handling",
                "right": false
              },
              {
                "answer": "Memory optimization",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'System.Reflection' in C#?",
            "short_title": "System.Reflection",
            "answers": [
              {
                "answer": "Enables runtime type introspection and manipulation",
                "right": true
              },
              {
                "answer": "Manages threads",
                "right": false
              },
              {
                "answer": "Handles file I/O",
                "right": false
              },
              {
                "answer": "Optimizes collections",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'async Task<T>' return in C#?",
            "short_title": "async Task<T>",
            "answers": [
              {
                "answer": "A Task representing an asynchronous operation with a result",
                "right": true
              },
              {
                "answer": "A void result",
                "right": false
              },
              {
                "answer": "A synchronous result",
                "right": false
              },
              {
                "answer": "A thread handle",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Activator.CreateInstance()' in C#?",
            "short_title": "Activator.CreateInstance()",
            "answers": [
              {
                "answer": "Creates an instance of a type dynamically",
                "right": true
              },
              {
                "answer": "Manages threads",
                "right": false
              },
              {
                "answer": "Handles exceptions",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Threading.Barrier' do in C#?",
            "short_title": "Barrier purpose",
            "answers": [
              {
                "answer": "Synchronizes multiple threads at a specific point",
                "right": true
              },
              {
                "answer": "Creates a single thread",
                "right": false
              },
              {
                "answer": "Manages collections",
                "right": false
              },
              {
                "answer": "Handles events",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'System.Runtime.CompilerServices' in C#?",
            "short_title": "CompilerServices",
            "answers": [
              {
                "answer": "Provides low-level compiler-related functionality",
                "right": true
              },
              {
                "answer": "Manages UI rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          }
        ],
        "Intermediate OOP and Design Patterns": [
          {
            "title": "What does polymorphism allow in OOP?",
            "short_title": "Polymorphism",
            "answers": [
              {
                "answer": "Different classes to be treated as the same type",
                "right": true
              },
              {
                "answer": "Creating multiple variables",
                "right": false
              },
              {
                "answer": "Hiding methods",
                "right": false
              },
              {
                "answer": "Looping through objects",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to override a virtual method?",
            "short_title": "Override keyword",
            "answers": [
              {
                "answer": "override",
                "right": true
              },
              {
                "answer": "virtual",
                "right": false
              },
              {
                "answer": "new",
                "right": false
              },
              {
                "answer": "base",
                "right": false
              }
            ]
          },
          {
            "title": "What is an interface in C#?",
            "short_title": "Interface definition",
            "answers": [
              {
                "answer": "A contract defining methods a class must implement",
                "right": true
              },
              {
                "answer": "A base class",
                "right": false
              },
              {
                "answer": "A variable type",
                "right": false
              },
              {
                "answer": "A loop structure",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword declares an interface?",
            "short_title": "Interface keyword",
            "answers": [
              {
                "answer": "interface",
                "right": true
              },
              {
                "answer": "class",
                "right": false
              },
              {
                "answer": "struct",
                "right": false
              },
              {
                "answer": "abstract",
                "right": false
              }
            ]
          },
          {
            "title": "What is an abstract class in C#?",
            "short_title": "Abstract class",
            "answers": [
              {
                "answer": "A class that cannot be instantiated directly",
                "right": true
              },
              {
                "answer": "A class with only private methods",
                "right": false
              },
              {
                "answer": "A class that can’t inherit",
                "right": false
              },
              {
                "answer": "A class with no methods",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword defines an abstract class or method?",
            "short_title": "Abstract keyword",
            "answers": [
              {
                "answer": "abstract",
                "right": true
              },
              {
                "answer": "virtual",
                "right": false
              },
              {
                "answer": "override",
                "right": false
              },
              {
                "answer": "static",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Singleton pattern ensure?",
            "short_title": "Singleton pattern",
            "answers": [
              {
                "answer": "Only one instance of a class exists",
                "right": true
              },
              {
                "answer": "Multiple instances of a class",
                "right": false
              },
              {
                "answer": "A private class",
                "right": false
              },
              {
                "answer": "A loop structure",
                "right": false
              }
            ]
          },
          {
            "title": "How is a Singleton typically implemented in C#?",
            "short_title": "Singleton implementation",
            "answers": [
              {
                "answer": "Using a static instance and private constructor",
                "right": true
              },
              {
                "answer": "Using a public constructor",
                "right": false
              },
              {
                "answer": "Using multiple instances",
                "right": false
              },
              {
                "answer": "Using a virtual method",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Factory pattern used for?",
            "short_title": "Factory pattern",
            "answers": [
              {
                "answer": "Creating objects without specifying exact classes",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Looping through classes",
                "right": false
              },
              {
                "answer": "Hiding variables",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword makes a method available for overriding?",
            "short_title": "Virtual keyword",
            "answers": [
              {
                "answer": "virtual",
                "right": true
              },
              {
                "answer": "override",
                "right": false
              },
              {
                "answer": "abstract",
                "right": false
              },
              {
                "answer": "static",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'new' keyword do when used with a method?",
            "short_title": "new keyword",
            "answers": [
              {
                "answer": "Hides a base class method",
                "right": true
              },
              {
                "answer": "Overrides a method",
                "right": false
              },
              {
                "answer": "Creates an instance",
                "right": false
              },
              {
                "answer": "Declares a variable",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of interfaces?",
            "short_title": "Unity interface use",
            "answers": [
              {
                "answer": "Defining behaviors like IDamageable",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Storing variables",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'static' keyword do to a class member?",
            "short_title": "Static keyword",
            "answers": [
              {
                "answer": "Makes it belong to the class, not instances",
                "right": true
              },
              {
                "answer": "Hides the member",
                "right": false
              },
              {
                "answer": "Overrides the member",
                "right": false
              },
              {
                "answer": "Creates an instance",
                "right": false
              }
            ]
          },
          {
            "title": "What is a practical use of the Singleton pattern in Unity?",
            "short_title": "Singleton in Unity",
            "answers": [
              {
                "answer": "Managing a single GameManager instance",
                "right": true
              },
              {
                "answer": "Rendering multiple objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Hiding variables",
                "right": false
              }
            ]
          },
          {
            "title": "What does an abstract method require?",
            "short_title": "Abstract method",
            "answers": [
              {
                "answer": "Implementation in derived classes",
                "right": true
              },
              {
                "answer": "A private access modifier",
                "right": false
              },
              {
                "answer": "A static declaration",
                "right": false
              },
              {
                "answer": "No parameters",
                "right": false
              }
            ]
          },
          {
            "title": "How do you implement an interface in a C# class?",
            "short_title": "Implement interface",
            "answers": [
              {
                "answer": "Using a colon ':' after the class name",
                "right": true
              },
              {
                "answer": "Using 'implements'",
                "right": false
              },
              {
                "answer": "Using 'extends'",
                "right": false
              },
              {
                "answer": "Using 'interface'",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of the Factory pattern?",
            "short_title": "Factory in Unity",
            "answers": [
              {
                "answer": "Spawning different enemy types",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'sealed' keyword do to a class?",
            "short_title": "Sealed keyword",
            "answers": [
              {
                "answer": "Prevents inheritance",
                "right": true
              },
              {
                "answer": "Makes it abstract",
                "right": false
              },
              {
                "answer": "Hides it",
                "right": false
              },
              {
                "answer": "Allows overriding",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between 'override' and 'new' for methods?",
            "short_title": "Override vs new",
            "answers": [
              {
                "answer": "Override extends, new hides",
                "right": true
              },
              {
                "answer": "New extends, override hides",
                "right": false
              },
              {
                "answer": "Both hide methods",
                "right": false
              },
              {
                "answer": "Both create new classes",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'internal' access modifier allow?",
            "short_title": "Internal access",
            "answers": [
              {
                "answer": "Access within the same assembly",
                "right": true
              },
              {
                "answer": "Access from anywhere",
                "right": false
              },
              {
                "answer": "Access only in the class",
                "right": false
              },
              {
                "answer": "Access in derived classes",
                "right": false
              }
            ]
          }
        ],
        "Advanced Collections and LINQ": [
          {
            "title": "What does the 'HashSet<T>' collection provide in C#?",
            "short_title": "HashSet<T>",
            "answers": [
              {
                "answer": "A collection of unique items",
                "right": true
              },
              {
                "answer": "A key-value pair collection",
                "right": false
              },
              {
                "answer": "A fixed-size array",
                "right": false
              },
              {
                "answer": "An ordered list",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace is required for LINQ queries in C#?",
            "short_title": "LINQ namespace",
            "answers": [
              {
                "answer": "System.Linq",
                "right": true
              },
              {
                "answer": "System.Collections",
                "right": false
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System",
                "right": false
              }
            ]
          },
          {
            "title": "What does the LINQ 'Where' method do?",
            "short_title": "Where method",
            "answers": [
              {
                "answer": "Filters a collection based on a condition",
                "right": true
              },
              {
                "answer": "Sorts a collection",
                "right": false
              },
              {
                "answer": "Transforms items",
                "right": false
              },
              {
                "answer": "Groups items",
                "right": false
              }
            ]
          },
          {
            "title": "How do you add an item to a 'HashSet<T>'?",
            "short_title": "Add to HashSet",
            "answers": [
              {
                "answer": "Add()",
                "right": true
              },
              {
                "answer": "Insert()",
                "right": false
              },
              {
                "answer": "Push()",
                "right": false
              },
              {
                "answer": "Append()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the LINQ 'Select' method do?",
            "short_title": "Select method",
            "answers": [
              {
                "answer": "Transforms each item in a collection",
                "right": true
              },
              {
                "answer": "Filters items",
                "right": false
              },
              {
                "answer": "Sorts items",
                "right": false
              },
              {
                "answer": "Counts items",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'HashSet<T>' over 'List<T>'?",
            "short_title": "HashSet vs List",
            "answers": [
              {
                "answer": "Faster lookups and uniqueness",
                "right": true
              },
              {
                "answer": "Ordered items",
                "right": false
              },
              {
                "answer": "Larger capacity",
                "right": false
              },
              {
                "answer": "Easier sorting",
                "right": false
              }
            ]
          },
          {
            "title": "What does the LINQ 'OrderBy' method do?",
            "short_title": "OrderBy method",
            "answers": [
              {
                "answer": "Sorts a collection in ascending order",
                "right": true
              },
              {
                "answer": "Filters a collection",
                "right": false
              },
              {
                "answer": "Transforms items",
                "right": false
              },
              {
                "answer": "Groups items",
                "right": false
              }
            ]
          },
          {
            "title": "How do you check if an item exists in a 'HashSet<T>'?",
            "short_title": "Check HashSet",
            "answers": [
              {
                "answer": "Contains()",
                "right": true
              },
              {
                "answer": "Exists()",
                "right": false
              },
              {
                "answer": "Has()",
                "right": false
              },
              {
                "answer": "Find()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the LINQ 'First' method return?",
            "short_title": "First method",
            "answers": [
              {
                "answer": "The first item in a collection",
                "right": true
              },
              {
                "answer": "The last item",
                "right": false
              },
              {
                "answer": "A random item",
                "right": false
              },
              {
                "answer": "The total count",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Queue<T>' represent in C#?",
            "short_title": "Queue<T>",
            "answers": [
              {
                "answer": "A first-in, first-out collection",
                "right": true
              },
              {
                "answer": "A last-in, first-out collection",
                "right": false
              },
              {
                "answer": "A key-value pair collection",
                "right": false
              },
              {
                "answer": "An unordered set",
                "right": false
              }
            ]
          },
          {
            "title": "How do you add an item to a 'Queue<T>'?",
            "short_title": "Add to Queue",
            "answers": [
              {
                "answer": "Enqueue()",
                "right": true
              },
              {
                "answer": "Add()",
                "right": false
              },
              {
                "answer": "Push()",
                "right": false
              },
              {
                "answer": "Insert()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the LINQ 'Count' method do?",
            "short_title": "Count method",
            "answers": [
              {
                "answer": "Returns the number of items",
                "right": true
              },
              {
                "answer": "Filters items",
                "right": false
              },
              {
                "answer": "Sorts items",
                "right": false
              },
              {
                "answer": "Transforms items",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Stack<T>' represent in C#?",
            "short_title": "Stack<T>",
            "answers": [
              {
                "answer": "A last-in, first-out collection",
                "right": true
              },
              {
                "answer": "A first-in, first-out collection",
                "right": false
              },
              {
                "answer": "A key-value pair collection",
                "right": false
              },
              {
                "answer": "An unordered set",
                "right": false
              }
            ]
          },
          {
            "title": "How do you remove and return the top item from a 'Stack<T>'?",
            "short_title": "Remove from Stack",
            "answers": [
              {
                "answer": "Pop()",
                "right": true
              },
              {
                "answer": "Dequeue()",
                "right": false
              },
              {
                "answer": "Remove()",
                "right": false
              },
              {
                "answer": "Take()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the LINQ 'Any' method check?",
            "short_title": "Any method",
            "answers": [
              {
                "answer": "If any item meets a condition",
                "right": true
              },
              {
                "answer": "The total count",
                "right": false
              },
              {
                "answer": "The first item",
                "right": false
              },
              {
                "answer": "The last item",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of LINQ 'Where'?",
            "short_title": "Where in Unity",
            "answers": [
              {
                "answer": "Filtering active GameObjects",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "How do you remove an item from a 'Queue<T>'?",
            "short_title": "Remove from Queue",
            "answers": [
              {
                "answer": "Dequeue()",
                "right": true
              },
              {
                "answer": "Pop()",
                "right": false
              },
              {
                "answer": "Remove()",
                "right": false
              },
              {
                "answer": "Take()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the LINQ 'Take' method do?",
            "short_title": "Take method",
            "answers": [
              {
                "answer": "Returns a specified number of items",
                "right": true
              },
              {
                "answer": "Filters items",
                "right": false
              },
              {
                "answer": "Sorts items",
                "right": false
              },
              {
                "answer": "Counts items",
                "right": false
              }
            ]
          },
          {
            "title": "What is a practical Unity use of 'Dictionary<string, GameObject>'?",
            "short_title": "Dictionary in Unity",
            "answers": [
              {
                "answer": "Storing named GameObjects",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the LINQ 'GroupBy' method do?",
            "short_title": "GroupBy method",
            "answers": [
              {
                "answer": "Groups items by a key",
                "right": true
              },
              {
                "answer": "Filters items",
                "right": false
              },
              {
                "answer": "Sorts items",
                "right": false
              },
              {
                "answer": "Transforms items",
                "right": false
              }
            ]
          }
        ],
        "Asynchronous Programming Basics": [
          {
            "title": "What is the purpose of asynchronous programming in C#?",
            "short_title": "Async purpose",
            "answers": [
              {
                "answer": "To perform tasks without blocking the main thread",
                "right": true
              },
              {
                "answer": "To create loops",
                "right": false
              },
              {
                "answer": "To render objects",
                "right": false
              },
              {
                "answer": "To manage variables",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to define an asynchronous method?",
            "short_title": "Async keyword",
            "answers": [
              {
                "answer": "async",
                "right": true
              },
              {
                "answer": "await",
                "right": false
              },
              {
                "answer": "task",
                "right": false
              },
              {
                "answer": "yield",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'await' keyword do in an async method?",
            "short_title": "Await keyword",
            "answers": [
              {
                "answer": "Pauses execution until a task completes",
                "right": true
              },
              {
                "answer": "Starts a loop",
                "right": false
              },
              {
                "answer": "Throws an exception",
                "right": false
              },
              {
                "answer": "Declares a variable",
                "right": false
              }
            ]
          },
          {
            "title": "What type is commonly returned by an async method?",
            "short_title": "Async return type",
            "answers": [
              {
                "answer": "Task",
                "right": true
              },
              {
                "answer": "int",
                "right": false
              },
              {
                "answer": "string",
                "right": false
              },
              {
                "answer": "void",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Task' represent in C#?",
            "short_title": "Task definition",
            "answers": [
              {
                "answer": "An asynchronous operation",
                "right": true
              },
              {
                "answer": "A synchronous method",
                "right": false
              },
              {
                "answer": "A variable",
                "right": false
              },
              {
                "answer": "A loop",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace is required for 'Task' in C#?",
            "short_title": "Task namespace",
            "answers": [
              {
                "answer": "System.Threading.Tasks",
                "right": true
              },
              {
                "answer": "System",
                "right": false
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System.Collections",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity coroutine?",
            "short_title": "Coroutine definition",
            "answers": [
              {
                "answer": "A method that runs over multiple frames",
                "right": true
              },
              {
                "answer": "A synchronous loop",
                "right": false
              },
              {
                "answer": "A variable type",
                "right": false
              },
              {
                "answer": "A rendering function",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to pause a coroutine in Unity?",
            "short_title": "Coroutine pause",
            "answers": [
              {
                "answer": "yield",
                "right": true
              },
              {
                "answer": "await",
                "right": false
              },
              {
                "answer": "pause",
                "right": false
              },
              {
                "answer": "break",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'StartCoroutine()' do in Unity?",
            "short_title": "StartCoroutine",
            "answers": [
              {
                "answer": "Begins execution of a coroutine",
                "right": true
              },
              {
                "answer": "Stops a coroutine",
                "right": false
              },
              {
                "answer": "Renders a task",
                "right": false
              },
              {
                "answer": "Creates a variable",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'yield return null' do in a Unity coroutine?",
            "short_title": "yield return null",
            "answers": [
              {
                "answer": "Waits until the next frame",
                "right": true
              },
              {
                "answer": "Stops the coroutine",
                "right": false
              },
              {
                "answer": "Throws an exception",
                "right": false
              },
              {
                "answer": "Waits for a second",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of coroutines?",
            "short_title": "Coroutine use",
            "answers": [
              {
                "answer": "Delaying an action over time",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Storing data",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Task.Run()' do in C#?",
            "short_title": "Task.Run",
            "answers": [
              {
                "answer": "Runs a method on a background thread",
                "right": true
              },
              {
                "answer": "Stops a task",
                "right": false
              },
              {
                "answer": "Renders a task",
                "right": false
              },
              {
                "answer": "Creates a variable",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'yield return new WaitForSeconds(1)' do in a coroutine?",
            "short_title": "WaitForSeconds",
            "answers": [
              {
                "answer": "Pauses the coroutine for 1 second",
                "right": true
              },
              {
                "answer": "Waits for the next frame",
                "right": false
              },
              {
                "answer": "Stops the coroutine",
                "right": false
              },
              {
                "answer": "Throws an error",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if you forget 'await' in an async method?",
            "short_title": "Missing await",
            "answers": [
              {
                "answer": "The method runs synchronously",
                "right": true
              },
              {
                "answer": "The program crashes",
                "right": false
              },
              {
                "answer": "The task is canceled",
                "right": false
              },
              {
                "answer": "An exception is thrown",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'StopCoroutine()' do in Unity?",
            "short_title": "StopCoroutine",
            "answers": [
              {
                "answer": "Stops a running coroutine",
                "right": true
              },
              {
                "answer": "Starts a coroutine",
                "right": false
              },
              {
                "answer": "Pauses a coroutine",
                "right": false
              },
              {
                "answer": "Renders a coroutine",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Task’s 'Result' property used for?",
            "short_title": "Task.Result",
            "answers": [
              {
                "answer": "Gets the result of a completed task",
                "right": true
              },
              {
                "answer": "Stops the task",
                "right": false
              },
              {
                "answer": "Creates a task",
                "right": false
              },
              {
                "answer": "Renders a result",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'async void' indicate in a method?",
            "short_title": "async void",
            "answers": [
              {
                "answer": "An async method with no return value",
                "right": true
              },
              {
                "answer": "A synchronous method",
                "right": false
              },
              {
                "answer": "A method that throws errors",
                "right": false
              },
              {
                "answer": "A looping method",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of async methods?",
            "short_title": "Async in Unity",
            "answers": [
              {
                "answer": "Loading assets without freezing",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Task.Delay()' do in C#?",
            "short_title": "Task.Delay",
            "answers": [
              {
                "answer": "Creates a task that completes after a delay",
                "right": true
              },
              {
                "answer": "Stops a task",
                "right": false
              },
              {
                "answer": "Renders a delay",
                "right": false
              },
              {
                "answer": "Creates a loop",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'yield break' do in a Unity coroutine?",
            "short_title": "yield break",
            "answers": [
              {
                "answer": "Ends the coroutine immediately",
                "right": true
              },
              {
                "answer": "Pauses the coroutine",
                "right": false
              },
              {
                "answer": "Waits for a frame",
                "right": false
              },
              {
                "answer": "Throws an exception",
                "right": false
              }
            ]
          }
        ],
        "Memory Management in C#": [
          {
            "title": "What is the Garbage Collector (GC) in C#?",
            "short_title": "Garbage Collector",
            "answers": [
              {
                "answer": "A system that automatically frees unused memory",
                "right": true
              },
              {
                "answer": "A tool for rendering",
                "right": false
              },
              {
                "answer": "A method for looping",
                "right": false
              },
              {
                "answer": "A variable manager",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'heap memory' store in C#?",
            "short_title": "Heap memory",
            "answers": [
              {
                "answer": "Objects managed by the GC",
                "right": true
              },
              {
                "answer": "Local variables",
                "right": false
              },
              {
                "answer": "Method calls",
                "right": false
              },
              {
                "answer": "Static variables",
                "right": false
              }
            ]
          },
          {
            "title": "What is 'stack memory' used for in C#?",
            "short_title": "Stack memory",
            "answers": [
              {
                "answer": "Local variables and method calls",
                "right": true
              },
              {
                "answer": "Objects managed by the GC",
                "right": false
              },
              {
                "answer": "Global variables",
                "right": false
              },
              {
                "answer": "Heap allocations",
                "right": false
              }
            ]
          },
          {
            "title": "What causes garbage collection to occur in Unity?",
            "short_title": "GC trigger",
            "answers": [
              {
                "answer": "Creating new objects repeatedly",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Using loops",
                "right": false
              },
              {
                "answer": "Calling methods",
                "right": false
              }
            ]
          },
          {
            "title": "What is 'boxing' in C#?",
            "short_title": "Boxing",
            "answers": [
              {
                "answer": "Converting a value type to an object",
                "right": true
              },
              {
                "answer": "Creating a new class",
                "right": false
              },
              {
                "answer": "Rendering a value",
                "right": false
              },
              {
                "answer": "Looping through data",
                "right": false
              }
            ]
          },
          {
            "title": "Why should you avoid frequent string concatenation in Unity?",
            "short_title": "String concatenation",
            "answers": [
              {
                "answer": "It generates garbage",
                "right": true
              },
              {
                "answer": "It slows rendering",
                "right": false
              },
              {
                "answer": "It stops physics",
                "right": false
              },
              {
                "answer": "It breaks methods",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'StringBuilder' do for memory management?",
            "short_title": "StringBuilder",
            "answers": [
              {
                "answer": "Reduces garbage when building strings",
                "right": true
              },
              {
                "answer": "Increases memory usage",
                "right": false
              },
              {
                "answer": "Renders strings",
                "right": false
              },
              {
                "answer": "Stops string operations",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace is 'StringBuilder' part of in C#?",
            "short_title": "StringBuilder namespace",
            "answers": [
              {
                "answer": "System.Text",
                "right": true
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System",
                "right": false
              },
              {
                "answer": "System.Collections",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when an object is set to 'null' in C#?",
            "short_title": "Set to null",
            "answers": [
              {
                "answer": "It becomes eligible for garbage collection",
                "right": true
              },
              {
                "answer": "It is deleted immediately",
                "right": false
              },
              {
                "answer": "It renders null",
                "right": false
              },
              {
                "answer": "It stops functioning",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GC.Collect()' do in C#?",
            "short_title": "GC.Collect",
            "answers": [
              {
                "answer": "Forces garbage collection to run",
                "right": true
              },
              {
                "answer": "Stops the GC",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Creates objects",
                "right": false
              }
            ]
          },
          {
            "title": "Why is boxing a performance concern in Unity?",
            "short_title": "Boxing performance",
            "answers": [
              {
                "answer": "It creates garbage on the heap",
                "right": true
              },
              {
                "answer": "It slows rendering",
                "right": false
              },
              {
                "answer": "It stops physics",
                "right": false
              },
              {
                "answer": "It breaks loops",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity example of avoiding garbage?",
            "short_title": "Avoiding garbage",
            "answers": [
              {
                "answer": "Reusing a List instead of creating a new one",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Using loops",
                "right": false
              },
              {
                "answer": "Calling methods",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'struct' keyword define in C#?",
            "short_title": "Struct",
            "answers": [
              {
                "answer": "A value type stored on the stack",
                "right": true
              },
              {
                "answer": "A reference type",
                "right": false
              },
              {
                "answer": "A method",
                "right": false
              },
              {
                "answer": "An event",
                "right": false
              }
            ]
          },
          {
            "title": "How does a 'struct' differ from a 'class' in memory?",
            "short_title": "Struct vs Class",
            "answers": [
              {
                "answer": "Structs are stack-allocated, classes are heap-allocated",
                "right": true
              },
              {
                "answer": "Both are stack-allocated",
                "right": false
              },
              {
                "answer": "Both are heap-allocated",
                "right": false
              },
              {
                "answer": "Structs are slower",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.GC.SuppressFinalize()' do?",
            "short_title": "SuppressFinalize",
            "answers": [
              {
                "answer": "Prevents an object’s finalizer from running",
                "right": true
              },
              {
                "answer": "Forces garbage collection",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Stops objects",
                "right": false
              }
            ]
          },
          {
            "title": "What is a memory leak in C#?",
            "short_title": "Memory leak",
            "answers": [
              {
                "answer": "Memory that is allocated but not freed",
                "right": true
              },
              {
                "answer": "Memory that is freed too early",
                "right": false
              },
              {
                "answer": "A rendering issue",
                "right": false
              },
              {
                "answer": "A physics error",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'using' statement do for memory management?",
            "short_title": "Using statement",
            "answers": [
              {
                "answer": "Automatically disposes objects",
                "right": true
              },
              {
                "answer": "Creates new objects",
                "right": false
              },
              {
                "answer": "Stops disposal",
                "right": false
              },
              {
                "answer": "Renders objects",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity cause of memory leaks?",
            "short_title": "Unity memory leak",
            "answers": [
              {
                "answer": "Not removing event listeners",
                "right": true
              },
              {
                "answer": "Using Debug.Log",
                "right": false
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'WeakReference' allow in C#?",
            "short_title": "WeakReference",
            "answers": [
              {
                "answer": "References an object without preventing GC",
                "right": true
              },
              {
                "answer": "Forces garbage collection",
                "right": false
              },
              {
                "answer": "Renders weak objects",
                "right": false
              },
              {
                "answer": "Stops memory management",
                "right": false
              }
            ]
          },
          {
            "title": "Why is 'new' in Update() a concern in Unity?",
            "short_title": "new in Update",
            "answers": [
              {
                "answer": "It creates garbage every frame",
                "right": true
              },
              {
                "answer": "It slows physics",
                "right": false
              },
              {
                "answer": "It stops rendering",
                "right": false
              },
              {
                "answer": "It breaks loops",
                "right": false
              }
            ]
          }
        ],
        "Threading and Concurrency Fundamentals": [
          {
            "title": "What is the purpose of threading in C#?",
            "short_title": "Threading purpose",
            "answers": [
              {
                "answer": "To run tasks on separate threads",
                "right": true
              },
              {
                "answer": "To render objects",
                "right": false
              },
              {
                "answer": "To manage variables",
                "right": false
              },
              {
                "answer": "To create loops",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace is used for basic threading in C#?",
            "short_title": "Threading namespace",
            "answers": [
              {
                "answer": "System.Threading",
                "right": true
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System",
                "right": false
              },
              {
                "answer": "System.Collections",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Thread' class do in C#?",
            "short_title": "Thread class",
            "answers": [
              {
                "answer": "Creates and manages a new thread",
                "right": true
              },
              {
                "answer": "Stops all threads",
                "right": false
              },
              {
                "answer": "Renders threads",
                "right": false
              },
              {
                "answer": "Creates variables",
                "right": false
              }
            ]
          },
          {
            "title": "How do you start a new thread in C#?",
            "short_title": "Start thread",
            "answers": [
              {
                "answer": "Call Start() on a Thread object",
                "right": true
              },
              {
                "answer": "Use Run()",
                "right": false
              },
              {
                "answer": "Use Begin()",
                "right": false
              },
              {
                "answer": "Use Execute()",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main thread in Unity?",
            "short_title": "Main thread",
            "answers": [
              {
                "answer": "The thread that runs game logic and rendering",
                "right": true
              },
              {
                "answer": "A background thread",
                "right": false
              },
              {
                "answer": "A physics thread",
                "right": false
              },
              {
                "answer": "A UI thread",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Thread.Sleep()' do?",
            "short_title": "Thread.Sleep",
            "answers": [
              {
                "answer": "Pauses the current thread for a time",
                "right": true
              },
              {
                "answer": "Stops all threads",
                "right": false
              },
              {
                "answer": "Renders a delay",
                "right": false
              },
              {
                "answer": "Creates a new thread",
                "right": false
              }
            ]
          },
          {
            "title": "Why should you avoid Thread.Sleep() on Unity’s main thread?",
            "short_title": "Avoid Sleep",
            "answers": [
              {
                "answer": "It freezes the game",
                "right": true
              },
              {
                "answer": "It speeds up rendering",
                "right": false
              },
              {
                "answer": "It stops physics",
                "right": false
              },
              {
                "answer": "It creates garbage",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Unity Job System?",
            "short_title": "Job System",
            "answers": [
              {
                "answer": "A way to run tasks on multiple threads",
                "right": true
              },
              {
                "answer": "A rendering system",
                "right": false
              },
              {
                "answer": "A physics system",
                "right": false
              },
              {
                "answer": "A variable manager",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ThreadPool.QueueUserWorkItem()' do?",
            "short_title": "QueueUserWorkItem",
            "answers": [
              {
                "answer": "Runs a method on a thread pool thread",
                "right": true
              },
              {
                "answer": "Stops the thread pool",
                "right": false
              },
              {
                "answer": "Renders a task",
                "right": false
              },
              {
                "answer": "Creates a variable",
                "right": false
              }
            ]
          },
          {
            "title": "What is concurrency in programming?",
            "short_title": "Concurrency",
            "answers": [
              {
                "answer": "Running multiple tasks at the same time",
                "right": true
              },
              {
                "answer": "Running one task repeatedly",
                "right": false
              },
              {
                "answer": "Rendering multiple objects",
                "right": false
              },
              {
                "answer": "Stopping tasks",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'lock' keyword ensure in C#?",
            "short_title": "Lock keyword",
            "answers": [
              {
                "answer": "Only one thread accesses a block at a time",
                "right": true
              },
              {
                "answer": "Stops all threads",
                "right": false
              },
              {
                "answer": "Renders a lock",
                "right": false
              },
              {
                "answer": "Creates a new thread",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of threading?",
            "short_title": "Threading in Unity",
            "answers": [
              {
                "answer": "Running heavy calculations off the main thread",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Monitor.Enter()' do in C#?",
            "short_title": "Monitor.Enter",
            "answers": [
              {
                "answer": "Locks an object for exclusive access",
                "right": true
              },
              {
                "answer": "Stops a monitor",
                "right": false
              },
              {
                "answer": "Renders a lock",
                "right": false
              },
              {
                "answer": "Exits a thread",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Monitor.Exit()' do?",
            "short_title": "Monitor.Exit",
            "answers": [
              {
                "answer": "Releases a lock on an object",
                "right": true
              },
              {
                "answer": "Starts a lock",
                "right": false
              },
              {
                "answer": "Stops a thread",
                "right": false
              },
              {
                "answer": "Renders an exit",
                "right": false
              }
            ]
          },
          {
            "title": "What is a race condition?",
            "short_title": "Race condition",
            "answers": [
              {
                "answer": "When threads access shared data unpredictably",
                "right": true
              },
              {
                "answer": "A fast thread",
                "right": false
              },
              {
                "answer": "A rendering issue",
                "right": false
              },
              {
                "answer": "A stopped thread",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'IJob' interface define in Unity?",
            "short_title": "IJob",
            "answers": [
              {
                "answer": "A task to run on a worker thread",
                "right": true
              },
              {
                "answer": "A rendering job",
                "right": false
              },
              {
                "answer": "A physics job",
                "right": false
              },
              {
                "answer": "A variable job",
                "right": false
              }
            ]
          },
          {
            "title": "How do you schedule a job in Unity’s Job System?",
            "short_title": "Schedule job",
            "answers": [
              {
                "answer": "Call Schedule() on a job struct",
                "right": true
              },
              {
                "answer": "Use Start()",
                "right": false
              },
              {
                "answer": "Use Run()",
                "right": false
              },
              {
                "answer": "Use Execute()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Thread.CurrentThread' return?",
            "short_title": "CurrentThread",
            "answers": [
              {
                "answer": "The currently executing thread",
                "right": true
              },
              {
                "answer": "The main thread",
                "right": false
              },
              {
                "answer": "A stopped thread",
                "right": false
              },
              {
                "answer": "A rendered thread",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity limitation with threading?",
            "short_title": "Threading limitation",
            "answers": [
              {
                "answer": "Unity API can only be called from the main thread",
                "right": true
              },
              {
                "answer": "Threads can’t run jobs",
                "right": false
              },
              {
                "answer": "Threads stop rendering",
                "right": false
              },
              {
                "answer": "Threads can’t use variables",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Interlocked.Increment()' do?",
            "short_title": "Interlocked.Increment",
            "answers": [
              {
                "answer": "Increments a value safely across threads",
                "right": true
              },
              {
                "answer": "Stops a thread",
                "right": false
              },
              {
                "answer": "Renders an increment",
                "right": false
              },
              {
                "answer": "Creates a lock",
                "right": false
              }
            ]
          }
        ],
        "Unity": [
          {
            "title": "What is the purpose of the Entity Component System (ECS) in Unity?",
            "short_title": "ECS purpose",
            "answers": [
              {
                "answer": "To improve performance with data-oriented design",
                "right": true
              },
              {
                "answer": "To manage UI elements",
                "right": false
              },
              {
                "answer": "To handle shaders",
                "right": false
              },
              {
                "answer": "To create prefabs",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Jobs System in Unity?",
            "short_title": "Jobs System",
            "answers": [
              {
                "answer": "A way to run multithreaded code efficiently",
                "right": true
              },
              {
                "answer": "A tool for scene management",
                "right": false
              },
              {
                "answer": "A physics simulation system",
                "right": false
              },
              {
                "answer": "A UI framework",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Burst Compiler do in Unity?",
            "short_title": "Burst Compiler",
            "answers": [
              {
                "answer": "Optimizes Jobs System code with high-performance native code",
                "right": true
              },
              {
                "answer": "Compiles shaders",
                "right": false
              },
              {
                "answer": "Manages memory",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between MonoBehaviour and ScriptableObject?",
            "short_title": "MonoBehaviour vs ScriptableObject",
            "answers": [
              {
                "answer": "MonoBehaviour attaches to GameObjects, ScriptableObject is an asset",
                "right": true
              },
              {
                "answer": "ScriptableObject attaches to GameObjects, MonoBehaviour is an asset",
                "right": false
              },
              {
                "answer": "MonoBehaviour is for data, ScriptableObject is for behavior",
                "right": false
              },
              {
                "answer": "No difference",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Unity's Addressable Asset System?",
            "short_title": "Addressables purpose",
            "answers": [
              {
                "answer": "To manage and load assets dynamically with better memory control",
                "right": true
              },
              {
                "answer": "To create animations",
                "right": false
              },
              {
                "answer": "To optimize physics",
                "right": false
              },
              {
                "answer": "To render UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'ExecuteInEditMode' attribute do in Unity?",
            "short_title": "ExecuteInEditMode",
            "answers": [
              {
                "answer": "Runs a script in the Editor even when not playing",
                "right": true
              },
              {
                "answer": "Optimizes runtime performance",
                "right": false
              },
              {
                "answer": "Disables a script in play mode",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the NavMesh system in Unity?",
            "short_title": "NavMesh purpose",
            "answers": [
              {
                "answer": "To enable AI pathfinding on surfaces",
                "right": true
              },
              {
                "answer": "To render UI",
                "right": false
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does Physics.Raycast() return in Unity?",
            "short_title": "Physics.Raycast()",
            "answers": [
              {
                "answer": "A boolean indicating if the ray hit something, plus hit info",
                "right": true
              },
              {
                "answer": "A list of all objects in the scene",
                "right": false
              },
              {
                "answer": "A vector for movement",
                "right": false
              },
              {
                "answer": "A rotation quaternion",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Animator Override Controller in Unity?",
            "short_title": "Animator Override Controller",
            "answers": [
              {
                "answer": "To swap animation clips without changing the state machine",
                "right": true
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To render UI",
                "right": false
              },
              {
                "answer": "To optimize performance",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'RequireComponent' attribute do in Unity?",
            "short_title": "RequireComponent",
            "answers": [
              {
                "answer": "Ensures a GameObject has a specific component",
                "right": true
              },
              {
                "answer": "Disables a component",
                "right": false
              },
              {
                "answer": "Loads an asset",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Timeline in Unity?",
            "short_title": "Timeline purpose",
            "answers": [
              {
                "answer": "To create cinematic sequences and control animations",
                "right": true
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              },
              {
                "answer": "To render UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Reflection Probe' do in Unity?",
            "short_title": "Reflection Probe",
            "answers": [
              {
                "answer": "Captures environment reflections for real-time rendering",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Playable Director' in Unity?",
            "short_title": "Playable Director",
            "answers": [
              {
                "answer": "Controls Timeline and Playable assets",
                "right": true
              },
              {
                "answer": "Optimizes physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.LoadSceneAsync' do in Unity?",
            "short_title": "LoadSceneAsync",
            "answers": [
              {
                "answer": "Loads a scene asynchronously in the background",
                "right": true
              },
              {
                "answer": "Loads a scene synchronously",
                "right": false
              },
              {
                "answer": "Unloads a scene",
                "right": false
              },
              {
                "answer": "Reloads the current scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Particle System Force Field' in Unity?",
            "short_title": "Particle Force Field",
            "answers": [
              {
                "answer": "Applies forces to influence particle behavior",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'IJobParallelFor' in Unity?",
            "short_title": "IJobParallelFor",
            "answers": [
              {
                "answer": "Executes a job in parallel over a data set",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'TransformAccessArray' do in Unity Jobs?",
            "short_title": "TransformAccessArray",
            "answers": [
              {
                "answer": "Provides efficient access to Transform data in Jobs",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Entities.ForEach' in Unity ECS?",
            "short_title": "Entities.ForEach",
            "answers": [
              {
                "answer": "Iterates over entities with specified components",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ComponentSystem' do in Unity ECS?",
            "short_title": "ComponentSystem",
            "answers": [
              {
                "answer": "Defines behavior for entities on the main thread",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Hybrid Renderer' in Unity?",
            "short_title": "Hybrid Renderer",
            "answers": [
              {
                "answer": "Renders ECS entities efficiently with SRP",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RenderPipelineManager' do in Unity?",
            "short_title": "RenderPipelineManager",
            "answers": [
              {
                "answer": "Manages custom Scriptable Render Pipelines",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NavMeshAgent' in Unity?",
            "short_title": "NavMeshAgent",
            "answers": [
              {
                "answer": "Controls an object’s movement along a NavMesh",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysicsShapeGroup2D' do in Unity?",
            "short_title": "PhysicsShapeGroup2D",
            "answers": [
              {
                "answer": "Manages 2D physics shapes for collision",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles 3D physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'PlayableGraph' in Unity?",
            "short_title": "PlayableGraph",
            "answers": [
              {
                "answer": "Manages a hierarchy of playable assets",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Lightmapping.BakeAsync()' do in Unity?",
            "short_title": "Lightmapping.BakeAsync()",
            "answers": [
              {
                "answer": "Bakes lightmaps asynchronously",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'TerrainData' in Unity?",
            "short_title": "TerrainData",
            "answers": [
              {
                "answer": "Stores data for terrain generation and modification",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysicsScene' allow in Unity?",
            "short_title": "PhysicsScene",
            "answers": [
              {
                "answer": "Simulates physics in a custom scene",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          }
        ],
        "Design Patterns": [
          {
            "title": "What is the Singleton pattern commonly used for in Unity?",
            "short_title": "Singleton pattern",
            "answers": [
              {
                "answer": "To ensure only one instance of a class exists",
                "right": true
              },
              {
                "answer": "To manage multiple instances",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              },
              {
                "answer": "To handle physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Observer pattern in Unity?",
            "short_title": "Observer pattern",
            "answers": [
              {
                "answer": "To notify objects of state changes",
                "right": true
              },
              {
                "answer": "To create singletons",
                "right": false
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To render UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Factory pattern used for in Unity?",
            "short_title": "Factory pattern",
            "answers": [
              {
                "answer": "To create objects without specifying their exact classes",
                "right": true
              },
              {
                "answer": "To manage threads",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              },
              {
                "answer": "To handle animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Command pattern useful for in Unity?",
            "short_title": "Command pattern",
            "answers": [
              {
                "answer": "To encapsulate actions as objects, enabling undo/redo",
                "right": true
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To create shaders",
                "right": false
              },
              {
                "answer": "To optimize performance",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Strategy pattern allow in Unity?",
            "short_title": "Strategy pattern",
            "answers": [
              {
                "answer": "Swapping algorithms or behaviors at runtime",
                "right": true
              },
              {
                "answer": "Creating singletons",
                "right": false
              },
              {
                "answer": "Managing UI",
                "right": false
              },
              {
                "answer": "Handling physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the State pattern in Unity?",
            "short_title": "State pattern",
            "answers": [
              {
                "answer": "To manage object behavior based on its current state",
                "right": true
              },
              {
                "answer": "To create factories",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              },
              {
                "answer": "To handle physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Decorator pattern provide in Unity?",
            "short_title": "Decorator pattern",
            "answers": [
              {
                "answer": "Extends functionality without modifying the original class",
                "right": true
              },
              {
                "answer": "Creates singletons",
                "right": false
              },
              {
                "answer": "Manages threading",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Adapter pattern in Unity?",
            "short_title": "Adapter pattern",
            "answers": [
              {
                "answer": "To make incompatible interfaces work together",
                "right": true
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              },
              {
                "answer": "To create animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Composite pattern in Unity?",
            "short_title": "Composite pattern",
            "answers": [
              {
                "answer": "Treats individual objects and compositions uniformly",
                "right": true
              },
              {
                "answer": "Manages threads",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Flyweight pattern achieve in Unity?",
            "short_title": "Flyweight pattern",
            "answers": [
              {
                "answer": "Reduces memory usage by sharing common data",
                "right": true
              },
              {
                "answer": "Creates singletons",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Chain of Responsibility pattern in Unity?",
            "short_title": "Chain of Responsibility",
            "answers": [
              {
                "answer": "Passes requests along a chain of handlers",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Visitor pattern allow in Unity?",
            "short_title": "Visitor pattern",
            "answers": [
              {
                "answer": "Adds operations to objects without modifying their classes",
                "right": true
              },
              {
                "answer": "Handles threading",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Memento pattern in Unity?",
            "short_title": "Memento pattern",
            "answers": [
              {
                "answer": "Captures and restores an object’s state",
                "right": true
              },
              {
                "answer": "Creates factories",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Facade pattern provide in Unity?",
            "short_title": "Facade pattern",
            "answers": [
              {
                "answer": "Simplifies interaction with a complex subsystem",
                "right": true
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Proxy pattern in Unity?",
            "short_title": "Proxy pattern",
            "answers": [
              {
                "answer": "Controls access to an object",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Template Method pattern define in Unity?",
            "short_title": "Template Method",
            "answers": [
              {
                "answer": "A skeleton for an algorithm with customizable steps",
                "right": true
              },
              {
                "answer": "Manages threading",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ],
        "Optimization": [
          {
            "title": "What is the benefit of using the Unity Jobs System?",
            "short_title": "Jobs System benefit",
            "answers": [
              {
                "answer": "Efficient multithreading for performance",
                "right": true
              },
              {
                "answer": "Better UI rendering",
                "right": false
              },
              {
                "answer": "Improved shader quality",
                "right": false
              },
              {
                "answer": "Simplified physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does dynamic batching do in Unity?",
            "short_title": "Dynamic batching",
            "answers": [
              {
                "answer": "Combines draw calls for moving objects with shared materials",
                "right": true
              },
              {
                "answer": "Optimizes physics",
                "right": false
              },
              {
                "answer": "Reduces texture size",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Level of Detail (LOD) in Unity?",
            "short_title": "LOD purpose",
            "answers": [
              {
                "answer": "To reduce polygon count for distant objects",
                "right": true
              },
              {
                "answer": "To improve physics accuracy",
                "right": false
              },
              {
                "answer": "To manage UI",
                "right": false
              },
              {
                "answer": "To create shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'NativeArray' provide in Unity?",
            "short_title": "NativeArray purpose",
            "answers": [
              {
                "answer": "A high-performance, unmanaged array for Jobs",
                "right": true
              },
              {
                "answer": "A managed list for UI",
                "right": false
              },
              {
                "answer": "A physics utility",
                "right": false
              },
              {
                "answer": "A shader container",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using Compute Shaders in Unity?",
            "short_title": "Compute Shaders benefit",
            "answers": [
              {
                "answer": "Parallel processing on the GPU for complex calculations",
                "right": true
              },
              {
                "answer": "Improved physics",
                "right": false
              },
              {
                "answer": "Better UI rendering",
                "right": false
              },
              {
                "answer": "Simplified scripting",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Graphics Settings' allow in Unity?",
            "short_title": "Graphics Settings",
            "answers": [
              {
                "answer": "Customization of rendering pipeline and performance",
                "right": true
              },
              {
                "answer": "Physics optimization",
                "right": false
              },
              {
                "answer": "UI management",
                "right": false
              },
              {
                "answer": "Animation control",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AsyncGPUReadback' in Unity?",
            "short_title": "AsyncGPUReadback",
            "answers": [
              {
                "answer": "Reads GPU data asynchronously to avoid stalling",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Dynamic Resolution' do in Unity?",
            "short_title": "Dynamic Resolution",
            "answers": [
              {
                "answer": "Adjusts render resolution based on performance",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Preloading' in Unity?",
            "short_title": "Shader Preloading",
            "answers": [
              {
                "answer": "Reduces runtime shader compilation hitches",
                "right": true
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.autoSimulation' control in Unity?",
            "short_title": "Physics.autoSimulation",
            "answers": [
              {
                "answer": "Enables or disables automatic physics updates",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'NativeList' in Unity?",
            "short_title": "NativeList benefit",
            "answers": [
              {
                "answer": "Provides a dynamic, unmanaged list for Jobs",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RenderTexture' optimize in Unity?",
            "short_title": "RenderTexture",
            "answers": [
              {
                "answer": "Off-screen rendering for effects and post-processing",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'JobSystem.ScheduleBatchedJobs()' in Unity?",
            "short_title": "ScheduleBatchedJobs()",
            "answers": [
              {
                "answer": "Executes multiple Jobs in a batch",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Occlusion Culling Baking' do in Unity?",
            "short_title": "Occlusion Culling Baking",
            "answers": [
              {
                "answer": "Precomputes visibility to reduce rendering",
                "right": true
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              }
            ]
          }
        ],
        "Shaders": [
          {
            "title": "What is a Compute Shader in Unity?",
            "short_title": "Compute Shader",
            "answers": [
              {
                "answer": "A shader for general-purpose GPU computing",
                "right": true
              },
              {
                "answer": "A shader for vertex processing",
                "right": false
              },
              {
                "answer": "A shader for UI rendering",
                "right": false
              },
              {
                "answer": "A physics tool",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'GrabPass' do in Unity shaders?",
            "short_title": "GrabPass purpose",
            "answers": [
              {
                "answer": "Captures the screen contents into a texture",
                "right": true
              },
              {
                "answer": "Applies lighting",
                "right": false
              },
              {
                "answer": "Transforms vertices",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'CGPROGRAM' block in Unity shaders?",
            "short_title": "CGPROGRAM purpose",
            "answers": [
              {
                "answer": "Defines shader code in Cg/HLSL",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Stencil Buffer' do in Unity shaders?",
            "short_title": "Stencil Buffer",
            "answers": [
              {
                "answer": "Controls which pixels are rendered based on a mask",
                "right": true
              },
              {
                "answer": "Applies textures",
                "right": false
              },
              {
                "answer": "Manages lighting",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Feature' in Unity?",
            "short_title": "Shader Feature",
            "answers": [
              {
                "answer": "Allows conditional shader compilation for variants",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Tessellation' do in Unity shaders?",
            "short_title": "Tessellation",
            "answers": [
              {
                "answer": "Subdivides geometry for smoother surfaces",
                "right": true
              },
              {
                "answer": "Applies textures",
                "right": false
              },
              {
                "answer": "Handles lighting",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ShaderLab' define in Unity?",
            "short_title": "ShaderLab",
            "answers": [
              {
                "answer": "A high-level language for shader structure",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'RenderQueue' in Unity shaders?",
            "short_title": "RenderQueue",
            "answers": [
              {
                "answer": "Controls the order of object rendering",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Shader.PropertyToID()' do in Unity?",
            "short_title": "Shader.PropertyToID()",
            "answers": [
              {
                "answer": "Converts a shader property name to an integer ID",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Variant Collection' in Unity?",
            "short_title": "Shader Variant Collection",
            "answers": [
              {
                "answer": "Preloads specific shader variants for performance",
                "right": true
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Depth Buffer' control in Unity shaders?",
            "short_title": "Depth Buffer",
            "answers": [
              {
                "answer": "Determines rendering order based on distance",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          }
        ],
        "UI": [
          {
            "title": "What is the purpose of the Canvas Scaler in Unity?",
            "short_title": "Canvas Scaler",
            "answers": [
              {
                "answer": "Adjusts UI scale based on screen resolution",
                "right": true
              },
              {
                "answer": "Renders 3D objects",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the EventSystem do in Unity UI?",
            "short_title": "EventSystem purpose",
            "answers": [
              {
                "answer": "Handles input events for UI interaction",
                "right": true
              },
              {
                "answer": "Renders UI graphics",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes performance",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Graphic Raycaster?",
            "short_title": "Graphic Raycaster",
            "answers": [
              {
                "answer": "Detects UI elements under a pointer",
                "right": true
              },
              {
                "answer": "Renders 3D models",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Layout Group do in Unity UI?",
            "short_title": "Layout Group",
            "answers": [
              {
                "answer": "Automatically arranges UI elements",
                "right": true
              },
              {
                "answer": "Renders 3D objects",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CanvasGroup' do in Unity UI?",
            "short_title": "CanvasGroup",
            "answers": [
              {
                "answer": "Controls visibility and interaction of UI groups",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UIElements' in Unity?",
            "short_title": "UIElements",
            "answers": [
              {
                "answer": "Provides a retained-mode UI system for Editor and runtime",
                "right": true
              },
              {
                "answer": "Renders 3D objects",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RectTransformUtility' do in Unity?",
            "short_title": "RectTransformUtility",
            "answers": [
              {
                "answer": "Helper methods for RectTransform calculations",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Selectable' in Unity UI?",
            "short_title": "Selectable",
            "answers": [
              {
                "answer": "Base class for interactive UI elements",
                "right": true
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ],
        "Animation": [
          {
            "title": "What is the purpose of an Avatar in Unity?",
            "short_title": "Avatar purpose",
            "answers": [
              {
                "answer": "Maps animations to a humanoid rig",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does Animator.CrossFade() do in Unity?",
            "short_title": "Animator.CrossFade()",
            "answers": [
              {
                "answer": "Smoothly transitions between animation states",
                "right": true
              },
              {
                "answer": "Stops an animation",
                "right": false
              },
              {
                "answer": "Reloads the scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the AnimationCurve class in Unity?",
            "short_title": "AnimationCurve purpose",
            "answers": [
              {
                "answer": "Defines custom interpolation for properties over time",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does Animator.SetTrigger() do in Unity?",
            "short_title": "Animator.SetTrigger()",
            "answers": [
              {
                "answer": "Triggers a transition in the Animator state machine",
                "right": true
              },
              {
                "answer": "Stops an animation",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AnimationPlayable' do in Unity?",
            "short_title": "AnimationPlayable",
            "answers": [
              {
                "answer": "Manages animation clips in a PlayableGraph",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AnimatorControllerPlayable' in Unity?",
            "short_title": "AnimatorControllerPlayable",
            "answers": [
              {
                "answer": "Integrates Animator Controllers into PlayableGraph",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AnimationClipPlayable' allow in Unity?",
            "short_title": "AnimationClipPlayable",
            "answers": [
              {
                "answer": "Controls a single animation clip in a Playable",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              }
            ]
          }
        ],
        "Asset Management": [
          {
            "title": "What is the benefit of using AssetPostprocessor in Unity?",
            "short_title": "AssetPostprocessor benefit",
            "answers": [
              {
                "answer": "Customizes asset import settings",
                "right": true
              },
              {
                "answer": "Optimizes physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the AssetDatabase class do in Unity?",
            "short_title": "AssetDatabase purpose",
            "answers": [
              {
                "answer": "Manages and manipulates assets in the Editor",
                "right": true
              },
              {
                "answer": "Loads scenes",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AssetBundle.Unload' in Unity?",
            "short_title": "AssetBundle.Unload",
            "answers": [
              {
                "answer": "Frees memory by unloading an AssetBundle",
                "right": true
              },
              {
                "answer": "Loads a new bundle",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorBuildSettings' do in Unity?",
            "short_title": "EditorBuildSettings",
            "answers": [
              {
                "answer": "Configures scenes for the build process",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AssetImporter' in Unity?",
            "short_title": "AssetImporter",
            "answers": [
              {
                "answer": "Base class for custom asset import logic",
                "right": true
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.LoadAssetAsync()' do in Unity?",
            "short_title": "LoadAssetAsync()",
            "answers": [
              {
                "answer": "Loads an asset asynchronously by address",
                "right": true
              },
              {
                "answer": "Unloads an asset",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          }
        ],
        "Input System": [
          {
            "title": "What is an Input Action in Unity’s new Input System?",
            "short_title": "Input Action",
            "answers": [
              {
                "answer": "A configurable binding for input events",
                "right": true
              },
              {
                "answer": "A physics tool",
                "right": false
              },
              {
                "answer": "A shader property",
                "right": false
              },
              {
                "answer": "A UI element",
                "right": false
              }
            ]
          },
          {
            "title": "What does the PlayerInput component do in Unity?",
            "short_title": "PlayerInput purpose",
            "answers": [
              {
                "answer": "Connects input actions to game logic",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Input Action Maps in Unity?",
            "short_title": "Input Action Maps",
            "answers": [
              {
                "answer": "Groups related input actions for different contexts",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputDevice' represent in Unity’s new Input System?",
            "short_title": "InputDevice",
            "answers": [
              {
                "answer": "A physical input device like a keyboard or controller",
                "right": true
              },
              {
                "answer": "A UI element",
                "right": false
              },
              {
                "answer": "A physics component",
                "right": false
              },
              {
                "answer": "A shader property",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputActionAsset' in Unity?",
            "short_title": "InputActionAsset",
            "answers": [
              {
                "answer": "Stores a collection of input actions and maps",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.QueueDeltaStateEvent()' do in Unity?",
            "short_title": "QueueDeltaStateEvent()",
            "answers": [
              {
                "answer": "Queues a state change for an input device",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          }
        ],
        "Audio": [
          {
            "title": "What is the purpose of the Audio Mixer in Unity?",
            "short_title": "Audio Mixer purpose",
            "answers": [
              {
                "answer": "Controls and mixes multiple audio sources",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Audio Effect component do in Unity?",
            "short_title": "Audio Effect",
            "answers": [
              {
                "answer": "Applies effects like reverb or distortion to audio",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Audio Mixer Snapshots?",
            "short_title": "Audio Mixer Snapshots",
            "answers": [
              {
                "answer": "Stores audio settings for smooth transitions",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.PlayScheduled()' do in Unity?",
            "short_title": "PlayScheduled()",
            "answers": [
              {
                "answer": "Plays audio at a specific time",
                "right": true
              },
              {
                "answer": "Stops audio",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSettings.dspTime' in Unity?",
            "short_title": "dspTime",
            "answers": [
              {
                "answer": "Provides the current audio processing time",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioMixer.SetFloat()' do in Unity?",
            "short_title": "SetFloat()",
            "answers": [
              {
                "answer": "Sets an exposed parameter value in the mixer",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ],
        "Physics": [
          {
            "title": "What is the purpose of the Physics Material in Unity?",
            "short_title": "Physics Material",
            "answers": [
              {
                "answer": "Defines friction and bounciness for colliders",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does Rigidbody Constraints do in Unity?",
            "short_title": "Rigidbody Constraints",
            "answers": [
              {
                "answer": "Limits movement or rotation of a Rigidbody",
                "right": true
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Loads assets",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Physics.OverlapSphere() in Unity?",
            "short_title": "Physics.OverlapSphere()",
            "answers": [
              {
                "answer": "Detects colliders within a spherical area",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.AddForceAtPosition()' do in Unity?",
            "short_title": "AddForceAtPosition()",
            "answers": [
              {
                "answer": "Applies a force at a specific point in 2D",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics2D.gravity' in Unity?",
            "short_title": "Physics2D.gravity",
            "answers": [
              {
                "answer": "Sets the global gravity vector for 2D physics",
                "right": true
              },
              {
                "answer": "Handles UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Joint2D' do in Unity?",
            "short_title": "Joint2D",
            "answers": [
              {
                "answer": "Connects two 2D rigidbodies with constraints",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles physics in 3D",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          }
        ],
        "Moment of Inertia": [
          {
            "title": "How does the moment of inertia depend on the choice of the axis of rotation?",
            "short_title": "MoI and axis choice",
            "answers": [
              {
                "answer": "It changes depending on the axis",
                "right": true
              },
              {
                "answer": "It remains constant",
                "right": false
              },
              {
                "answer": "It depends only on mass",
                "right": false
              },
              {
                "answer": "The axis of rotation does not affect the moment of inertia",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these factors does NOT affect the moment of inertia?",
            "short_title": "MoI factors",
            "answers": [
              {
                "answer": "Rotation speed",
                "right": true
              },
              {
                "answer": "Mass distribution",
                "right": false
              },
              {
                "answer": "Object shape",
                "right": false
              },
              {
                "answer": "Object radius",
                "right": false
              }
            ]
          },
          {
            "title": "How is Steiner's theorem used to calculate the moment of inertia?",
            "short_title": "Steiner’s theorem",
            "answers": [
              {
                "answer": "It allows calculating the moment of inertia about an arbitrary axis",
                "right": true
              },
              {
                "answer": "It applies only to symmetric bodies",
                "right": false
              },
              {
                "answer": "It depends only on the body's mass",
                "right": false
              },
              {
                "answer": "It determines the center of mass of the body",
                "right": false
              }
            ]
          },
          {
            "title": "How does the moment of inertia affect angular acceleration?",
            "short_title": "MoI and angular acceleration",
            "answers": [
              {
                "answer": "The larger the moment of inertia, the smaller the angular acceleration",
                "right": true
              },
              {
                "answer": "Angular acceleration does not depend on the moment of inertia",
                "right": false
              },
              {
                "answer": "The larger the moment of inertia, the larger the angular acceleration",
                "right": false
              },
              {
                "answer": "Angular acceleration depends only on external forces",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these objects has the largest moment of inertia with the same mass and radius?",
            "short_title": "MoI for different objects",
            "answers": [
              {
                "answer": "Thin ring",
                "right": true
              },
              {
                "answer": "Solid disk",
                "right": false
              },
              {
                "answer": "Solid sphere",
                "right": false
              },
              {
                "answer": "Point mass at the center",
                "right": false
              }
            ]
          },
          {
            "title": "What is the formula for the moment of inertia of a solid disk with radius R and mass M?",
            "short_title": "MoI formula for disk",
            "answers": [
              {
                "answer": "I = (1/2)MR²",
                "right": true
              },
              {
                "answer": "I = MR²",
                "right": false
              },
              {
                "answer": "I = (2/5)MR²",
                "right": false
              },
              {
                "answer": "I = (3/5)MR²",
                "right": false
              }
            ]
          },
          {
            "title": "How can the moment of inertia of a system be reduced?",
            "short_title": "Reducing MoI",
            "answers": [
              {
                "answer": "By moving the mass closer to the axis of rotation",
                "right": true
              },
              {
                "answer": "By increasing the rotation radius",
                "right": false
              },
              {
                "answer": "By increasing the mass of the body",
                "right": false
              },
              {
                "answer": "By applying more force",
                "right": false
              }
            ]
          },
          {
            "title": "How does doubling the height of a cylinder affect its moment of inertia?",
            "short_title": "MoI and cylinder height",
            "answers": [
              {
                "answer": "It remains unchanged",
                "right": true
              },
              {
                "answer": "It doubles",
                "right": false
              },
              {
                "answer": "It decreases by half",
                "right": false
              },
              {
                "answer": "It depends on the material of the cylinder",
                "right": false
              }
            ]
          },
          {
            "title": "How are rotational kinetic energy and moment of inertia related?",
            "short_title": "MoI and kinetic energy",
            "answers": [
              {
                "answer": "Kinetic energy is proportional to the moment of inertia",
                "right": true
              },
              {
                "answer": "Kinetic energy does not depend on the moment of inertia",
                "right": false
              },
              {
                "answer": "The greater the moment of inertia, the lower the kinetic energy",
                "right": false
              },
              {
                "answer": "The moment of inertia only determines the rotation speed",
                "right": false
              }
            ]
          },
          {
            "title": "Why does a gyroscope maintain its orientation in space?",
            "short_title": "Gyroscope and MoI",
            "answers": [
              {
                "answer": "Due to a large moment of inertia",
                "right": true
              },
              {
                "answer": "Due to the absence of friction",
                "right": false
              },
              {
                "answer": "Due to centripetal force",
                "right": false
              },
              {
                "answer": "Due to gravitational force",
                "right": false
              }
            ]
          },
          {
            "title": "Which parameter does NOT affect the moment of inertia of a rotating body?",
            "short_title": "MoI parameters",
            "answers": [
              {
                "answer": "Rotation speed",
                "right": true
              },
              {
                "answer": "Mass distribution",
                "right": false
              },
              {
                "answer": "Rotation radius",
                "right": false
              },
              {
                "answer": "Body mass",
                "right": false
              }
            ]
          },
          {
            "title": "Which has a larger moment of inertia: a hollow cylinder or a solid cylinder of the same radius and mass?",
            "short_title": "MoI for cylinders",
            "answers": [
              {
                "answer": "Hollow cylinder",
                "right": true
              },
              {
                "answer": "Solid cylinder",
                "right": false
              },
              {
                "answer": "Same for both",
                "right": false
              },
              {
                "answer": "Depends on the rotation speed",
                "right": false
              }
            ]
          },
          {
            "title": "Which formula is used to find the moment of inertia relative to a parallel axis?",
            "short_title": "MoI parallel axis",
            "answers": [
              {
                "answer": "I = I₀ + Md²",
                "right": true
              },
              {
                "answer": "I = MR²",
                "right": false
              },
              {
                "answer": "I = (1/2)MR²",
                "right": false
              },
              {
                "answer": "I = (2/5)MR²",
                "right": false
              }
            ]
          },
          {
            "title": "How does the moment of inertia affect rotational dynamics?",
            "short_title": "MoI and rotation dynamics",
            "answers": [
              {
                "answer": "A larger moment of inertia makes rotation less sensitive to forces",
                "right": true
              },
              {
                "answer": "The larger the moment of inertia, the easier it is to change rotation speed",
                "right": false
              },
              {
                "answer": "The moment of inertia only affects linear motion",
                "right": false
              },
              {
                "answer": "The moment of inertia has no role in dynamics",
                "right": false
              }
            ]
          }
        ],
        "Acceleration": [
          {
            "title": "What is acceleration in physics?",
            "short_title": "Definition of Acceleration",
            "answers": [
              {
                "answer": "The rate of change of velocity over time",
                "right": true
              },
              {
                "answer": "The speed of an object",
                "right": false
              },
              {
                "answer": "The mass of an object",
                "right": false
              },
              {
                "answer": "The force applied to an object",
                "right": false
              }
            ]
          },
          {
            "title": "Which equation represents acceleration?",
            "short_title": "Acceleration Formula",
            "answers": [
              {
                "answer": "a = Δv / Δt",
                "right": true
              },
              {
                "answer": "F = ma",
                "right": false
              },
              {
                "answer": "v = d/t",
                "right": false
              },
              {
                "answer": "p = mv",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration affect an object’s velocity?",
            "short_title": "Acceleration Effect",
            "answers": [
              {
                "answer": "It increases or decreases velocity over time",
                "right": true
              },
              {
                "answer": "It keeps the velocity constant",
                "right": false
              },
              {
                "answer": "It changes only the object’s direction",
                "right": false
              },
              {
                "answer": "It reduces the object's mass",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to an object in free fall under Earth's gravity?",
            "short_title": "Free Fall Acceleration",
            "answers": [
              {
                "answer": "It accelerates at 9.8 m/s² downward",
                "right": true
              },
              {
                "answer": "It moves at a constant velocity",
                "right": false
              },
              {
                "answer": "It loses all acceleration after a few seconds",
                "right": false
              },
              {
                "answer": "It slows down before reaching the ground",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between acceleration and velocity?",
            "short_title": "Acceleration vs. Velocity",
            "answers": [
              {
                "answer": "Acceleration is the rate of change of velocity, while velocity is speed with direction",
                "right": true
              },
              {
                "answer": "Velocity measures change in acceleration",
                "right": false
              },
              {
                "answer": "Acceleration is speed in a straight line",
                "right": false
              },
              {
                "answer": "Velocity and acceleration are the same",
                "right": false
              }
            ]
          },
          {
            "title": "What is negative acceleration commonly called?",
            "short_title": "Negative Acceleration",
            "answers": [
              {
                "answer": "Deceleration",
                "right": true
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Momentum",
                "right": false
              },
              {
                "answer": "Impulse",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity method can apply acceleration to an object?",
            "short_title": "Applying Acceleration in Unity",
            "answers": [
              {
                "answer": "Rigidbody.AddForce with ForceMode.Acceleration",
                "right": true
              },
              {
                "answer": "Rigidbody.velocity",
                "right": false
              },
              {
                "answer": "Rigidbody.mass",
                "right": false
              },
              {
                "answer": "Rigidbody.drag",
                "right": false
              }
            ]
          },
          {
            "title": "How does friction affect acceleration?",
            "short_title": "Friction and Acceleration",
            "answers": [
              {
                "answer": "Friction opposes acceleration and reduces motion",
                "right": true
              },
              {
                "answer": "Friction increases acceleration",
                "right": false
              },
              {
                "answer": "Friction has no effect on acceleration",
                "right": false
              },
              {
                "answer": "Acceleration eliminates friction",
                "right": false
              }
            ]
          },
          {
            "title": "If an object is moving at a constant velocity, what is its acceleration?",
            "short_title": "Constant Velocity Acceleration",
            "answers": [
              {
                "answer": "Zero",
                "right": true
              },
              {
                "answer": "Equal to the velocity",
                "right": false
              },
              {
                "answer": "Infinity",
                "right": false
              },
              {
                "answer": "It depends on mass",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if two forces of equal magnitude act in opposite directions on an object?",
            "short_title": "Balanced Forces Effect",
            "answers": [
              {
                "answer": "The object experiences no acceleration",
                "right": true
              },
              {
                "answer": "The object accelerates in the direction of the larger force",
                "right": false
              },
              {
                "answer": "The object moves at an increasing velocity",
                "right": false
              },
              {
                "answer": "The object starts rotating",
                "right": false
              }
            ]
          },
          {
            "title": "How does increasing mass affect acceleration if force is constant?",
            "short_title": "Mass and Acceleration",
            "answers": [
              {
                "answer": "Acceleration decreases",
                "right": true
              },
              {
                "answer": "Acceleration increases",
                "right": false
              },
              {
                "answer": "Acceleration remains the same",
                "right": false
              },
              {
                "answer": "Mass does not affect acceleration",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to acceleration if you double the force on an object while keeping mass the same?",
            "short_title": "Doubling Force",
            "answers": [
              {
                "answer": "Acceleration doubles",
                "right": true
              },
              {
                "answer": "Acceleration stays the same",
                "right": false
              },
              {
                "answer": "Acceleration is halved",
                "right": false
              },
              {
                "answer": "Acceleration is zero",
                "right": false
              }
            ]
          },
          {
            "title": "How does acceleration affect the motion of a rolling ball down a hill?",
            "short_title": "Rolling Ball Acceleration",
            "answers": [
              {
                "answer": "The ball speeds up as it moves down",
                "right": true
              },
              {
                "answer": "The ball rolls at a constant speed",
                "right": false
              },
              {
                "answer": "The ball slows down",
                "right": false
              },
              {
                "answer": "The ball stops immediately",
                "right": false
              }
            ]
          },
          {
            "title": "Which force is responsible for acceleration in free-fall motion?",
            "short_title": "Free-Fall Force",
            "answers": [
              {
                "answer": "Gravity",
                "right": true
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Air resistance",
                "right": false
              },
              {
                "answer": "Tension",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if you apply acceleration in the opposite direction of motion?",
            "short_title": "Opposing Acceleration",
            "answers": [
              {
                "answer": "The object slows down",
                "right": true
              },
              {
                "answer": "The object speeds up",
                "right": false
              },
              {
                "answer": "The object moves at a constant speed",
                "right": false
              },
              {
                "answer": "The object rotates",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following is NOT a unit of acceleration?",
            "short_title": "Acceleration Units",
            "answers": [
              {
                "answer": "m/s",
                "right": true
              },
              {
                "answer": "m/s²",
                "right": false
              },
              {
                "answer": "ft/s²",
                "right": false
              },
              {
                "answer": "km/h²",
                "right": false
              }
            ]
          },
          {
            "title": "If an object accelerates uniformly, how does its velocity change?",
            "short_title": "Uniform Acceleration",
            "answers": [
              {
                "answer": "It increases or decreases at a constant rate",
                "right": true
              },
              {
                "answer": "It remains constant",
                "right": false
              },
              {
                "answer": "It changes randomly",
                "right": false
              },
              {
                "answer": "It stops moving",
                "right": false
              }
            ]
          }
        ],
        "Joints": [
          {
            "title": "What is the primary purpose of joints in physics simulations?",
            "short_title": "Purpose of Joints",
            "answers": [
              {
                "answer": "To connect two objects and constrain their movement",
                "right": true
              },
              {
                "answer": "To increase object speed",
                "right": false
              },
              {
                "answer": "To detect collisions",
                "right": false
              },
              {
                "answer": "To modify object mass",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of joint allows rotation but restricts linear movement?",
            "short_title": "Rotation-Only Joint",
            "answers": [
              {
                "answer": "Hinge Joint",
                "right": true
              },
              {
                "answer": "Fixed Joint",
                "right": false
              },
              {
                "answer": "Spring Joint",
                "right": false
              },
              {
                "answer": "Slider Joint",
                "right": false
              }
            ]
          },
          {
            "title": "Which joint in Unity is commonly used for ragdoll physics?",
            "short_title": "Ragdoll Joint",
            "answers": [
              {
                "answer": "Character Joint",
                "right": true
              },
              {
                "answer": "Fixed Joint",
                "right": false
              },
              {
                "answer": "Spring Joint",
                "right": false
              },
              {
                "answer": "Hinge Joint",
                "right": false
              }
            ]
          },
          {
            "title": "What does a fixed joint do in a physics simulation?",
            "short_title": "Fixed Joint Function",
            "answers": [
              {
                "answer": "Prevents relative movement between connected objects",
                "right": true
              },
              {
                "answer": "Allows free rotation",
                "right": false
              },
              {
                "answer": "Acts like a spring",
                "right": false
              },
              {
                "answer": "Adds friction to an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of a spring joint?",
            "short_title": "Spring Joint Purpose",
            "answers": [
              {
                "answer": "It applies force to maintain a specific distance between objects",
                "right": true
              },
              {
                "answer": "It locks objects in place",
                "right": false
              },
              {
                "answer": "It removes physics constraints",
                "right": false
              },
              {
                "answer": "It makes objects spin infinitely",
                "right": false
              }
            ]
          },
          {
            "title": "Which joint allows an object to move along a single axis?",
            "short_title": "Single-Axis Movement",
            "answers": [
              {
                "answer": "Slider Joint",
                "right": true
              },
              {
                "answer": "Hinge Joint",
                "right": false
              },
              {
                "answer": "Character Joint",
                "right": false
              },
              {
                "answer": "Fixed Joint",
                "right": false
              }
            ]
          },
          {
            "title": "How does a configurable joint differ from other joints in Unity?",
            "short_title": "Configurable Joint",
            "answers": [
              {
                "answer": "It allows custom constraints on movement and rotation",
                "right": true
              },
              {
                "answer": "It always behaves like a hinge",
                "right": false
              },
              {
                "answer": "It has no physics properties",
                "right": false
              },
              {
                "answer": "It is only used for ragdolls",
                "right": false
              }
            ]
          },
          {
            "title": "Which parameter in a spring joint controls how strongly objects are pulled together?",
            "short_title": "Spring Joint Stiffness",
            "answers": [
              {
                "answer": "Spring",
                "right": true
              },
              {
                "answer": "Damping",
                "right": false
              },
              {
                "answer": "Break Force",
                "right": false
              },
              {
                "answer": "Friction",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if a joint’s break force is exceeded?",
            "short_title": "Breaking a Joint",
            "answers": [
              {
                "answer": "The joint disconnects and no longer affects the objects",
                "right": true
              },
              {
                "answer": "The objects become frozen",
                "right": false
              },
              {
                "answer": "The simulation stops",
                "right": false
              },
              {
                "answer": "The joint becomes a spring joint",
                "right": false
              }
            ]
          },
          {
            "title": "What is a prismatic joint?",
            "short_title": "Prismatic Joint",
            "answers": [
              {
                "answer": "A joint that allows movement along a single linear axis",
                "right": true
              },
              {
                "answer": "A joint that only allows rotation",
                "right": false
              },
              {
                "answer": "A joint that restricts movement completely",
                "right": false
              },
              {
                "answer": "A joint used only for animations",
                "right": false
              }
            ]
          },
          {
            "title": "What role does damping play in a spring joint?",
            "short_title": "Damping Effect",
            "answers": [
              {
                "answer": "It reduces oscillations and stabilizes movement",
                "right": true
              },
              {
                "answer": "It increases the speed of movement",
                "right": false
              },
              {
                "answer": "It causes infinite bouncing",
                "right": false
              },
              {
                "answer": "It disables the joint",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of joint would be best for simulating a swinging door?",
            "short_title": "Swinging Door Joint",
            "answers": [
              {
                "answer": "Hinge Joint",
                "right": true
              },
              {
                "answer": "Fixed Joint",
                "right": false
              },
              {
                "answer": "Slider Joint",
                "right": false
              },
              {
                "answer": "Spring Joint",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main function of a character joint?",
            "short_title": "Character Joint Function",
            "answers": [
              {
                "answer": "It simulates realistic bone movement with limits",
                "right": true
              },
              {
                "answer": "It prevents all rotation",
                "right": false
              },
              {
                "answer": "It only allows linear movement",
                "right": false
              },
              {
                "answer": "It increases object mass",
                "right": false
              }
            ]
          },
          {
            "title": "Which parameter in Unity’s hinge joint controls how much force is needed to rotate?",
            "short_title": "Hinge Joint Motor",
            "answers": [
              {
                "answer": "Motor Torque",
                "right": true
              },
              {
                "answer": "Break Force",
                "right": false
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Spring",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when a joint’s limits are exceeded?",
            "short_title": "Exceeding Joint Limits",
            "answers": [
              {
                "answer": "The connected objects will stop moving beyond the limit",
                "right": true
              },
              {
                "answer": "The objects break apart immediately",
                "right": false
              },
              {
                "answer": "The simulation crashes",
                "right": false
              },
              {
                "answer": "The joint turns into a fixed joint",
                "right": false
              }
            ]
          },
          {
            "title": "Which physics engine commonly used in game development supports joints?",
            "short_title": "Physics Engine with Joints",
            "answers": [
              {
                "answer": "NVIDIA PhysX",
                "right": true
              },
              {
                "answer": "DirectX",
                "right": false
              },
              {
                "answer": "OpenGL",
                "right": false
              },
              {
                "answer": "Vulkan",
                "right": false
              }
            ]
          },
          {
            "title": "In a hinge joint, what is the role of the ‘use motor’ setting?",
            "short_title": "Hinge Joint Motor",
            "answers": [
              {
                "answer": "It enables the joint to rotate automatically",
                "right": true
              },
              {
                "answer": "It disables the joint completely",
                "right": false
              },
              {
                "answer": "It makes the joint follow gravity",
                "right": false
              },
              {
                "answer": "It changes the joint type",
                "right": false
              }
            ]
          }
        ],
        "Restitution": [
          {
            "title": "What does restitution represent in game physics?",
            "short_title": "Restitution Definition",
            "answers": [
              {
                "answer": "The bounciness of a surface after a collision",
                "right": true
              },
              {
                "answer": "The mass of an object",
                "right": false
              },
              {
                "answer": "The friction coefficient between two surfaces",
                "right": false
              },
              {
                "answer": "The damping of an object's velocity",
                "right": false
              }
            ]
          },
          {
            "title": "What is the restitution value for a perfectly elastic collision?",
            "short_title": "Elastic Collision Restitution",
            "answers": [
              {
                "answer": "1.0",
                "right": true
              },
              {
                "answer": "0.0",
                "right": false
              },
              {
                "answer": "0.5",
                "right": false
              },
              {
                "answer": "Infinity",
                "right": false
              }
            ]
          },
          {
            "title": "If an object has a restitution value of 0, how will it behave upon collision?",
            "short_title": "Restitution = 0 Effect",
            "answers": [
              {
                "answer": "It will not bounce at all",
                "right": true
              },
              {
                "answer": "It will bounce infinitely",
                "right": false
              },
              {
                "answer": "It will bounce higher than before",
                "right": false
              },
              {
                "answer": "It will pass through the other object",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following real-world materials has a high restitution value?",
            "short_title": "High Restitution Material",
            "answers": [
              {
                "answer": "Rubber",
                "right": true
              },
              {
                "answer": "Clay",
                "right": false
              },
              {
                "answer": "Sand",
                "right": false
              },
              {
                "answer": "Mud",
                "right": false
              }
            ]
          },
          {
            "title": "How is restitution typically calculated in a physics engine?",
            "short_title": "Restitution Calculation",
            "answers": [
              {
                "answer": "By taking the maximum or average of the two colliding objects' restitution values",
                "right": true
              },
              {
                "answer": "By summing the restitution values of both objects",
                "right": false
              },
              {
                "answer": "By multiplying the restitution values",
                "right": false
              },
              {
                "answer": "Restitution is always set to 1 by default",
                "right": false
              }
            ]
          },
          {
            "title": "If two objects collide and have restitution values of 0.7 and 0.5, what would the resulting restitution likely be?",
            "short_title": "Combining Restitution",
            "answers": [
              {
                "answer": "Between 0.5 and 0.7",
                "right": true
              },
              {
                "answer": "Exactly 1.0",
                "right": false
              },
              {
                "answer": "Exactly 0.35",
                "right": false
              },
              {
                "answer": "Exactly 0.2",
                "right": false
              }
            ]
          },
          {
            "title": "What would be the effect of increasing an object's restitution value in a physics engine?",
            "short_title": "Increasing Restitution",
            "answers": [
              {
                "answer": "It will bounce more upon impact",
                "right": true
              },
              {
                "answer": "It will move slower",
                "right": false
              },
              {
                "answer": "It will lose more energy upon collision",
                "right": false
              },
              {
                "answer": "It will stop immediately upon contact",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following best describes an inelastic collision?",
            "short_title": "Inelastic Collision",
            "answers": [
              {
                "answer": "A collision where kinetic energy is not conserved",
                "right": true
              },
              {
                "answer": "A collision where objects bounce infinitely",
                "right": false
              },
              {
                "answer": "A collision where no momentum is transferred",
                "right": false
              },
              {
                "answer": "A collision that never occurs in real life",
                "right": false
              }
            ]
          },
          {
            "title": "What would be the effect of setting restitution to a value greater than 1?",
            "short_title": "Restitution > 1 Effect",
            "answers": [
              {
                "answer": "The object would gain energy and bounce higher than its initial drop",
                "right": true
              },
              {
                "answer": "The object would bounce infinitely",
                "right": false
              },
              {
                "answer": "The object would instantly stop",
                "right": false
              },
              {
                "answer": "The object would lose all velocity",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when two objects with equal and opposite velocities but different restitution values collide?",
            "short_title": "Collision with Different Restitution",
            "answers": [
              {
                "answer": "The object with the higher restitution will bounce more",
                "right": true
              },
              {
                "answer": "Both objects will stop immediately",
                "right": false
              },
              {
                "answer": "The object with the lower restitution will bounce more",
                "right": false
              },
              {
                "answer": "Both objects will behave identically",
                "right": false
              }
            ]
          },
          {
            "title": "How does air resistance affect restitution?",
            "short_title": "Air Resistance & Restitution",
            "answers": [
              {
                "answer": "It decreases the height of each bounce over time",
                "right": true
              },
              {
                "answer": "It increases the restitution value",
                "right": false
              },
              {
                "answer": "It has no effect",
                "right": false
              },
              {
                "answer": "It makes objects bounce higher",
                "right": false
              }
            ]
          },
          {
            "title": "In which type of game is restitution most important?",
            "short_title": "Game Genre & Restitution",
            "answers": [
              {
                "answer": "Pinball",
                "right": true
              },
              {
                "answer": "Turn-based RPG",
                "right": false
              },
              {
                "answer": "Puzzle game",
                "right": false
              },
              {
                "answer": "Text-based adventure",
                "right": false
              }
            ]
          },
          {
            "title": "If a ball dropped from a height of 10 meters only bounces up to 5 meters, what is its approximate restitution?",
            "short_title": "Restitution Calculation Example",
            "answers": [
              {
                "answer": "0.7",
                "right": true
              },
              {
                "answer": "1.0",
                "right": false
              },
              {
                "answer": "0.2",
                "right": false
              },
              {
                "answer": "0.1",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following statements about restitution is true?",
            "short_title": "Restitution Fact",
            "answers": [
              {
                "answer": "Restitution affects the energy lost during a collision",
                "right": true
              },
              {
                "answer": "Restitution determines an object's mass",
                "right": false
              },
              {
                "answer": "Restitution only applies to rigid bodies",
                "right": false
              },
              {
                "answer": "Restitution does not affect game physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common issue when setting restitution too high in a physics engine?",
            "short_title": "High Restitution Issues",
            "answers": [
              {
                "answer": "Objects may behave unpredictably or jitter",
                "right": true
              },
              {
                "answer": "Objects become completely static",
                "right": false
              },
              {
                "answer": "Objects start rotating indefinitely",
                "right": false
              },
              {
                "answer": "Objects ignore gravity",
                "right": false
              }
            ]
          }
        ],
        "Force": [
          {
            "title": "What is the formula for calculating force in classical mechanics?",
            "short_title": "Force Formula",
            "answers": [
              {
                "answer": "F = ma",
                "right": true
              },
              {
                "answer": "F = mv",
                "right": false
              },
              {
                "answer": "F = m/v",
                "right": false
              },
              {
                "answer": "F = m + a",
                "right": false
              }
            ]
          },
          {
            "title": "Which force counteracts gravity when an object is resting on a surface?",
            "short_title": "Gravity Counteracting Force",
            "answers": [
              {
                "answer": "Normal force",
                "right": true
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Tension",
                "right": false
              },
              {
                "answer": "Buoyant force",
                "right": false
              }
            ]
          },
          {
            "title": "What type of force acts in the opposite direction of an object’s motion?",
            "short_title": "Opposing Motion Force",
            "answers": [
              {
                "answer": "Friction",
                "right": true
              },
              {
                "answer": "Normal force",
                "right": false
              },
              {
                "answer": "Centripetal force",
                "right": false
              },
              {
                "answer": "Spring force",
                "right": false
              }
            ]
          },
          {
            "title": "What force is responsible for keeping planets in orbit around the sun?",
            "short_title": "Orbital Force",
            "answers": [
              {
                "answer": "Gravitational force",
                "right": true
              },
              {
                "answer": "Electromagnetic force",
                "right": false
              },
              {
                "answer": "Centrifugal force",
                "right": false
              },
              {
                "answer": "Nuclear force",
                "right": false
              }
            ]
          },
          {
            "title": "Which force causes an object to move in a circular path?",
            "short_title": "Circular Motion Force",
            "answers": [
              {
                "answer": "Centripetal force",
                "right": true
              },
              {
                "answer": "Centrifugal force",
                "right": false
              },
              {
                "answer": "Gravitational force",
                "right": false
              },
              {
                "answer": "Drag force",
                "right": false
              }
            ]
          },
          {
            "title": "Which force in a physics engine is commonly used to simulate wind resistance?",
            "short_title": "Wind Resistance Force",
            "answers": [
              {
                "answer": "Drag",
                "right": true
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Tension",
                "right": false
              },
              {
                "answer": "Spring force",
                "right": false
              }
            ]
          },
          {
            "title": "What is the unit of force in the SI system?",
            "short_title": "Force Unit",
            "answers": [
              {
                "answer": "Newton (N)",
                "right": true
              },
              {
                "answer": "Joule (J)",
                "right": false
              },
              {
                "answer": "Pascal (Pa)",
                "right": false
              },
              {
                "answer": "Watt (W)",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when the net force on an object is zero?",
            "short_title": "Net Force Zero Effect",
            "answers": [
              {
                "answer": "The object remains at rest or moves at constant velocity",
                "right": true
              },
              {
                "answer": "The object accelerates",
                "right": false
              },
              {
                "answer": "The object moves in a circular path",
                "right": false
              },
              {
                "answer": "The object experiences infinite energy",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these is an example of an applied force in a physics engine?",
            "short_title": "Applied Force Example",
            "answers": [
              {
                "answer": "A character pushing a box",
                "right": true
              },
              {
                "answer": "Gravity pulling an object down",
                "right": false
              },
              {
                "answer": "A pendulum swinging",
                "right": false
              },
              {
                "answer": "A falling rock",
                "right": false
              }
            ]
          },
          {
            "title": "How does increasing mass affect the force needed to accelerate an object?",
            "short_title": "Mass & Force Relationship",
            "answers": [
              {
                "answer": "More force is required",
                "right": true
              },
              {
                "answer": "Less force is required",
                "right": false
              },
              {
                "answer": "Force remains the same",
                "right": false
              },
              {
                "answer": "The object moves faster",
                "right": false
              }
            ]
          },
          {
            "title": "What type of force is exerted by a stretched or compressed spring?",
            "short_title": "Spring Force",
            "answers": [
              {
                "answer": "Elastic force",
                "right": true
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Gravitational force",
                "right": false
              },
              {
                "answer": "Magnetic force",
                "right": false
              }
            ]
          },
          {
            "title": "What law states that every action has an equal and opposite reaction?",
            "short_title": "Action-Reaction Law",
            "answers": [
              {
                "answer": "Newton's Third Law",
                "right": true
              },
              {
                "answer": "Newton's First Law",
                "right": false
              },
              {
                "answer": "Newton's Second Law",
                "right": false
              },
              {
                "answer": "Law of Conservation of Energy",
                "right": false
              }
            ]
          },
          {
            "title": "Which force is strongest at a subatomic level?",
            "short_title": "Strongest Subatomic Force",
            "answers": [
              {
                "answer": "Strong nuclear force",
                "right": true
              },
              {
                "answer": "Gravitational force",
                "right": false
              },
              {
                "answer": "Electromagnetic force",
                "right": false
              },
              {
                "answer": "Weak nuclear force",
                "right": false
              }
            ]
          },
          {
            "title": "Which force keeps an object from sinking when submerged in a fluid?",
            "short_title": "Floating Force",
            "answers": [
              {
                "answer": "Buoyant force",
                "right": true
              },
              {
                "answer": "Drag force",
                "right": false
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Centripetal force",
                "right": false
              }
            ]
          },
          {
            "title": "How does force relate to impulse in physics?",
            "short_title": "Force & Impulse Relationship",
            "answers": [
              {
                "answer": "Impulse is force multiplied by time",
                "right": true
              },
              {
                "answer": "Impulse is force divided by mass",
                "right": false
              },
              {
                "answer": "Impulse is equal to force",
                "right": false
              },
              {
                "answer": "Impulse is independent of force",
                "right": false
              }
            ]
          },
          {
            "title": "What force is used to simulate explosions in a physics engine?",
            "short_title": "Explosion Force",
            "answers": [
              {
                "answer": "Radial force",
                "right": true
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Normal force",
                "right": false
              },
              {
                "answer": "Tension",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to the force on an object if the acceleration is doubled while keeping mass constant?",
            "short_title": "Acceleration Effect on Force",
            "answers": [
              {
                "answer": "The force doubles",
                "right": true
              },
              {
                "answer": "The force halves",
                "right": false
              },
              {
                "answer": "The force remains the same",
                "right": false
              },
              {
                "answer": "The force becomes zero",
                "right": false
              }
            ]
          }
        ],
        "Angular Velocity": [
          {
            "title": "What is the formula for angular velocity?",
            "short_title": "Angular Velocity Formula",
            "answers": [
              {
                "answer": "ω = θ / t",
                "right": true
              },
              {
                "answer": "ω = v / r",
                "right": false
              },
              {
                "answer": "ω = F * r",
                "right": false
              },
              {
                "answer": "ω = a / t",
                "right": false
              }
            ]
          },
          {
            "title": "Which unit is used to measure angular velocity in the SI system?",
            "short_title": "Angular Velocity Unit",
            "answers": [
              {
                "answer": "Radians per second (rad/s)",
                "right": true
              },
              {
                "answer": "Meters per second (m/s)",
                "right": false
              },
              {
                "answer": "Degrees per second (°/s)",
                "right": false
              },
              {
                "answer": "Newtons (N)",
                "right": false
              }
            ]
          },
          {
            "title": "What is the relationship between linear velocity (v) and angular velocity (ω)?",
            "short_title": "Linear & Angular Velocity Relationship",
            "answers": [
              {
                "answer": "v = ω * r",
                "right": true
              },
              {
                "answer": "v = ω / r",
                "right": false
              },
              {
                "answer": "v = ω² * r",
                "right": false
              },
              {
                "answer": "v = ω + r",
                "right": false
              }
            ]
          },
          {
            "title": "What physical quantity remains constant in uniform circular motion?",
            "short_title": "Constant in Circular Motion",
            "answers": [
              {
                "answer": "Angular velocity",
                "right": true
              },
              {
                "answer": "Linear velocity",
                "right": false
              },
              {
                "answer": "Tangential acceleration",
                "right": false
              },
              {
                "answer": "Radial acceleration",
                "right": false
              }
            ]
          },
          {
            "title": "How does angular velocity change if the radius of rotation increases while keeping linear velocity constant?",
            "short_title": "Radius Effect on Angular Velocity",
            "answers": [
              {
                "answer": "It decreases",
                "right": true
              },
              {
                "answer": "It increases",
                "right": false
              },
              {
                "answer": "It remains the same",
                "right": false
              },
              {
                "answer": "It becomes zero",
                "right": false
              }
            ]
          },
          {
            "title": "What is the angular velocity of a stationary object?",
            "short_title": "Stationary Object Angular Velocity",
            "answers": [
              {
                "answer": "Zero",
                "right": true
              },
              {
                "answer": "Infinity",
                "right": false
              },
              {
                "answer": "Equal to linear velocity",
                "right": false
              },
              {
                "answer": "Depends on mass",
                "right": false
              }
            ]
          },
          {
            "title": "Which physical property resists changes in angular velocity?",
            "short_title": "Resistance to Angular Velocity Change",
            "answers": [
              {
                "answer": "Moment of inertia",
                "right": true
              },
              {
                "answer": "Torque",
                "right": false
              },
              {
                "answer": "Angular momentum",
                "right": false
              },
              {
                "answer": "Centripetal force",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to the angular velocity of a figure skater when they pull their arms inward during a spin?",
            "short_title": "Skater's Angular Velocity Change",
            "answers": [
              {
                "answer": "It increases",
                "right": true
              },
              {
                "answer": "It decreases",
                "right": false
              },
              {
                "answer": "It remains constant",
                "right": false
              },
              {
                "answer": "It stops completely",
                "right": false
              }
            ]
          },
          {
            "title": "Which equation describes the relationship between torque (τ) and angular acceleration (α)?",
            "short_title": "Torque & Angular Acceleration Relationship",
            "answers": [
              {
                "answer": "τ = I * α",
                "right": true
              },
              {
                "answer": "τ = F * r",
                "right": false
              },
              {
                "answer": "τ = m * v",
                "right": false
              },
              {
                "answer": "τ = ω * r",
                "right": false
              }
            ]
          },
          {
            "title": "In which direction does angular velocity act in a rotating object?",
            "short_title": "Angular Velocity Direction",
            "answers": [
              {
                "answer": "Perpendicular to the plane of rotation",
                "right": true
              },
              {
                "answer": "Tangential to the rotation",
                "right": false
              },
              {
                "answer": "Opposite to the torque",
                "right": false
              },
              {
                "answer": "Along the radius of rotation",
                "right": false
              }
            ]
          },
          {
            "title": "If a wheel rotates at a constant angular velocity, what is the angular acceleration?",
            "short_title": "Constant Angular Velocity Acceleration",
            "answers": [
              {
                "answer": "Zero",
                "right": true
              },
              {
                "answer": "Positive",
                "right": false
              },
              {
                "answer": "Negative",
                "right": false
              },
              {
                "answer": "Infinite",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these best defines angular velocity?",
            "short_title": "Definition of Angular Velocity",
            "answers": [
              {
                "answer": "The rate of change of angular displacement",
                "right": true
              },
              {
                "answer": "The rate of change of linear displacement",
                "right": false
              },
              {
                "answer": "The resistance to rotation",
                "right": false
              },
              {
                "answer": "The force exerted in circular motion",
                "right": false
              }
            ]
          },
          {
            "title": "How is angular velocity affected if an object’s mass is doubled but radius remains the same?",
            "short_title": "Mass Effect on Angular Velocity",
            "answers": [
              {
                "answer": "No effect",
                "right": true
              },
              {
                "answer": "It doubles",
                "right": false
              },
              {
                "answer": "It halves",
                "right": false
              },
              {
                "answer": "It becomes zero",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle explains the increase in angular velocity when the moment of inertia decreases?",
            "short_title": "Angular Velocity Increase Principle",
            "answers": [
              {
                "answer": "Conservation of angular momentum",
                "right": true
              },
              {
                "answer": "Newton's First Law",
                "right": false
              },
              {
                "answer": "Centripetal force law",
                "right": false
              },
              {
                "answer": "Hooke's Law",
                "right": false
              }
            ]
          },
          {
            "title": "Which quantity is obtained by multiplying angular velocity by the moment of inertia?",
            "short_title": "Angular Momentum Formula",
            "answers": [
              {
                "answer": "Angular momentum",
                "right": true
              },
              {
                "answer": "Torque",
                "right": false
              },
              {
                "answer": "Linear velocity",
                "right": false
              },
              {
                "answer": "Centripetal force",
                "right": false
              }
            ]
          },
          {
            "title": "If an object rotates clockwise, what is the sign of its angular velocity in the standard coordinate system?",
            "short_title": "Clockwise Angular Velocity Sign",
            "answers": [
              {
                "answer": "Negative",
                "right": true
              },
              {
                "answer": "Positive",
                "right": false
              },
              {
                "answer": "Zero",
                "right": false
              },
              {
                "answer": "Infinity",
                "right": false
              }
            ]
          }
        ],
        "Buoyancy": [
          {
            "title": "What is the primary force responsible for buoyancy?",
            "short_title": "Buoyant Force",
            "answers": [
              {
                "answer": "Upward force exerted by a fluid",
                "right": true
              },
              {
                "answer": "Downward force due to gravity",
                "right": false
              },
              {
                "answer": "Frictional force in water",
                "right": false
              },
              {
                "answer": "Surface tension",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle explains why objects float in a fluid?",
            "short_title": "Floating Principle",
            "answers": [
              {
                "answer": "Archimedes' Principle",
                "right": true
              },
              {
                "answer": "Newton's Third Law",
                "right": false
              },
              {
                "answer": "Bernoulli's Principle",
                "right": false
              },
              {
                "answer": "Hooke's Law",
                "right": false
              }
            ]
          },
          {
            "title": "How is the buoyant force on an object submerged in a fluid calculated?",
            "short_title": "Buoyant Force Formula",
            "answers": [
              {
                "answer": "F_b = ρ * g * V",
                "right": true
              },
              {
                "answer": "F_b = m * g",
                "right": false
              },
              {
                "answer": "F_b = P * A",
                "right": false
              },
              {
                "answer": "F_b = 1/2 * ρ * v² * A",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to an object’s buoyant force if it is moved to a denser fluid?",
            "short_title": "Effect of Fluid Density on Buoyancy",
            "answers": [
              {
                "answer": "It increases",
                "right": true
              },
              {
                "answer": "It decreases",
                "right": false
              },
              {
                "answer": "It remains constant",
                "right": false
              },
              {
                "answer": "It becomes zero",
                "right": false
              }
            ]
          },
          {
            "title": "If an object floats in water, what can be said about its weight and the buoyant force?",
            "short_title": "Floating Object Forces",
            "answers": [
              {
                "answer": "They are equal",
                "right": true
              },
              {
                "answer": "Weight is greater than buoyant force",
                "right": false
              },
              {
                "answer": "Buoyant force is greater than weight",
                "right": false
              },
              {
                "answer": "None of the above",
                "right": false
              }
            ]
          },
          {
            "title": "What is the unit of buoyant force in the SI system?",
            "short_title": "Buoyant Force Unit",
            "answers": [
              {
                "answer": "Newton (N)",
                "right": true
              },
              {
                "answer": "Pascal (Pa)",
                "right": false
              },
              {
                "answer": "Kilogram (kg)",
                "right": false
              },
              {
                "answer": "Joule (J)",
                "right": false
              }
            ]
          },
          {
            "title": "Why does a ship made of steel float while a steel block sinks?",
            "short_title": "Ship vs Steel Block Buoyancy",
            "answers": [
              {
                "answer": "The ship displaces more water than its weight",
                "right": true
              },
              {
                "answer": "The ship has greater density than water",
                "right": false
              },
              {
                "answer": "The ship is lighter than the steel block",
                "right": false
              },
              {
                "answer": "The ship has more kinetic energy",
                "right": false
              }
            ]
          },
          {
            "title": "What factor determines whether an object will sink or float?",
            "short_title": "Sink or Float Determination",
            "answers": [
              {
                "answer": "Density relative to the fluid",
                "right": true
              },
              {
                "answer": "Mass of the object",
                "right": false
              },
              {
                "answer": "Volume of the object",
                "right": false
              },
              {
                "answer": "Gravity alone",
                "right": false
              }
            ]
          },
          {
            "title": "What will happen to a floating object if gravity increases?",
            "short_title": "Effect of Gravity on Floating Object",
            "answers": [
              {
                "answer": "It will sink deeper",
                "right": true
              },
              {
                "answer": "It will rise",
                "right": false
              },
              {
                "answer": "It will float higher",
                "right": false
              },
              {
                "answer": "It will remain unaffected",
                "right": false
              }
            ]
          },
          {
            "title": "A cube is floating on water with 70% of its volume submerged. What is the ratio of the cube’s density to water density?",
            "short_title": "Density Ratio of Floating Cube",
            "answers": [
              {
                "answer": "0.7",
                "right": true
              },
              {
                "answer": "1.0",
                "right": false
              },
              {
                "answer": "1.3",
                "right": false
              },
              {
                "answer": "0.3",
                "right": false
              }
            ]
          },
          {
            "title": "Why does a helium balloon rise in the air?",
            "short_title": "Helium Balloon Buoyancy",
            "answers": [
              {
                "answer": "Helium is less dense than air",
                "right": true
              },
              {
                "answer": "Helium is heavier than air",
                "right": false
              },
              {
                "answer": "Helium creates lift",
                "right": false
              },
              {
                "answer": "The balloon is filled with pressure",
                "right": false
              }
            ]
          },
          {
            "title": "Which force counteracts buoyancy?",
            "short_title": "Buoyancy Counteracting Force",
            "answers": [
              {
                "answer": "Gravity",
                "right": true
              },
              {
                "answer": "Centripetal force",
                "right": false
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Surface tension",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if the weight of a submerged object is greater than the buoyant force?",
            "short_title": "Sinking Object Condition",
            "answers": [
              {
                "answer": "The object sinks",
                "right": true
              },
              {
                "answer": "The object floats",
                "right": false
              },
              {
                "answer": "The object rises",
                "right": false
              },
              {
                "answer": "The object remains suspended",
                "right": false
              }
            ]
          },
          {
            "title": "What is the buoyant force on an object that is completely submerged but neutrally buoyant?",
            "short_title": "Neutrally Buoyant Object",
            "answers": [
              {
                "answer": "Equal to the object's weight",
                "right": true
              },
              {
                "answer": "Greater than the object's weight",
                "right": false
              },
              {
                "answer": "Less than the object's weight",
                "right": false
              },
              {
                "answer": "Zero",
                "right": false
              }
            ]
          },
          {
            "title": "Which factor does NOT affect buoyancy?",
            "short_title": "Buoyancy Independent Factor",
            "answers": [
              {
                "answer": "Object’s mass alone",
                "right": true
              },
              {
                "answer": "Fluid density",
                "right": false
              },
              {
                "answer": "Gravity",
                "right": false
              },
              {
                "answer": "Object’s volume",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to buoyant force if the depth of an object increases in an incompressible fluid?",
            "short_title": "Depth Effect on Buoyancy",
            "answers": [
              {
                "answer": "It remains the same",
                "right": true
              },
              {
                "answer": "It increases",
                "right": false
              },
              {
                "answer": "It decreases",
                "right": false
              },
              {
                "answer": "It becomes zero",
                "right": false
              }
            ]
          },
          {
            "title": "What is the condition for an object to be neutrally buoyant?",
            "short_title": "Neutrally Buoyant Condition",
            "answers": [
              {
                "answer": "Density of object equals density of fluid",
                "right": true
              },
              {
                "answer": "Object’s mass is zero",
                "right": false
              },
              {
                "answer": "Buoyant force is greater than weight",
                "right": false
              },
              {
                "answer": "Fluid is incompressible",
                "right": false
              }
            ]
          }
        ],
        "Friction": [
          {
            "title": "What is friction?",
            "short_title": "Friction Definition",
            "answers": [
              {
                "answer": "A force that resists motion between two surfaces",
                "right": true
              },
              {
                "answer": "A force that accelerates objects",
                "right": false
              },
              {
                "answer": "A force that only acts on moving objects",
                "right": false
              },
              {
                "answer": "A force that increases kinetic energy",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of friction occurs when an object is moving?",
            "short_title": "Type of Moving Friction",
            "answers": [
              {
                "answer": "Kinetic friction",
                "right": true
              },
              {
                "answer": "Static friction",
                "right": false
              },
              {
                "answer": "Rolling friction",
                "right": false
              },
              {
                "answer": "Fluid friction",
                "right": false
              }
            ]
          },
          {
            "title": "Which coefficient is usually larger: static or kinetic friction?",
            "short_title": "Friction Coefficient Comparison",
            "answers": [
              {
                "answer": "Static friction",
                "right": true
              },
              {
                "answer": "Kinetic friction",
                "right": false
              },
              {
                "answer": "They are always equal",
                "right": false
              },
              {
                "answer": "Depends on the material",
                "right": false
              }
            ]
          },
          {
            "title": "What is the formula for friction force?",
            "short_title": "Friction Force Formula",
            "answers": [
              {
                "answer": "F_f = μ * N",
                "right": true
              },
              {
                "answer": "F_f = m * a",
                "right": false
              },
              {
                "answer": "F_f = k * x",
                "right": false
              },
              {
                "answer": "F_f = 1/2 * m * v²",
                "right": false
              }
            ]
          },
          {
            "title": "What does the coefficient of friction (μ) depend on?",
            "short_title": "Coefficient of Friction Dependency",
            "answers": [
              {
                "answer": "Material properties of surfaces",
                "right": true
              },
              {
                "answer": "Surface area of contact",
                "right": false
              },
              {
                "answer": "Mass of the object",
                "right": false
              },
              {
                "answer": "Velocity of the object",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of friction is responsible for preventing slipping when walking?",
            "short_title": "Friction in Walking",
            "answers": [
              {
                "answer": "Static friction",
                "right": true
              },
              {
                "answer": "Kinetic friction",
                "right": false
              },
              {
                "answer": "Rolling friction",
                "right": false
              },
              {
                "answer": "Fluid friction",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of friction is experienced by a car’s wheels when driving on a road?",
            "short_title": "Friction in Car Motion",
            "answers": [
              {
                "answer": "Rolling friction",
                "right": true
              },
              {
                "answer": "Kinetic friction",
                "right": false
              },
              {
                "answer": "Static friction",
                "right": false
              },
              {
                "answer": "Fluid friction",
                "right": false
              }
            ]
          },
          {
            "title": "What effect does increasing the normal force have on friction?",
            "short_title": "Normal Force Effect on Friction",
            "answers": [
              {
                "answer": "It increases friction",
                "right": true
              },
              {
                "answer": "It decreases friction",
                "right": false
              },
              {
                "answer": "It has no effect on friction",
                "right": false
              },
              {
                "answer": "It reduces kinetic energy",
                "right": false
              }
            ]
          },
          {
            "title": "What type of friction is experienced by a falling object through air?",
            "short_title": "Air Resistance Type",
            "answers": [
              {
                "answer": "Fluid friction",
                "right": true
              },
              {
                "answer": "Kinetic friction",
                "right": false
              },
              {
                "answer": "Static friction",
                "right": false
              },
              {
                "answer": "Rolling friction",
                "right": false
              }
            ]
          },
          {
            "title": "How can friction be reduced?",
            "short_title": "Friction Reduction Methods",
            "answers": [
              {
                "answer": "Using lubrication",
                "right": true
              },
              {
                "answer": "Increasing surface roughness",
                "right": false
              },
              {
                "answer": "Increasing normal force",
                "right": false
              },
              {
                "answer": "Increasing surface contact area",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of friction occurs between a ball and the ground?",
            "short_title": "Friction in Rolling Objects",
            "answers": [
              {
                "answer": "Rolling friction",
                "right": true
              },
              {
                "answer": "Static friction",
                "right": false
              },
              {
                "answer": "Kinetic friction",
                "right": false
              },
              {
                "answer": "Fluid friction",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to friction when temperature increases in most materials?",
            "short_title": "Temperature Effect on Friction",
            "answers": [
              {
                "answer": "It decreases due to reduced surface interaction",
                "right": true
              },
              {
                "answer": "It increases due to stronger molecular bonds",
                "right": false
              },
              {
                "answer": "It remains unchanged",
                "right": false
              },
              {
                "answer": "It becomes zero",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of friction allows a car to start moving without slipping?",
            "short_title": "Friction in Car Acceleration",
            "answers": [
              {
                "answer": "Static friction",
                "right": true
              },
              {
                "answer": "Kinetic friction",
                "right": false
              },
              {
                "answer": "Rolling friction",
                "right": false
              },
              {
                "answer": "Fluid friction",
                "right": false
              }
            ]
          },
          {
            "title": "If a box is resting on a surface and does not move, which friction type is acting?",
            "short_title": "Friction in Resting Object",
            "answers": [
              {
                "answer": "Static friction",
                "right": true
              },
              {
                "answer": "Kinetic friction",
                "right": false
              },
              {
                "answer": "Rolling friction",
                "right": false
              },
              {
                "answer": "Fluid friction",
                "right": false
              }
            ]
          },
          {
            "title": "Why is it harder to start moving an object than to keep it moving?",
            "short_title": "Static vs Kinetic Friction",
            "answers": [
              {
                "answer": "Static friction is greater than kinetic friction",
                "right": true
              },
              {
                "answer": "Kinetic friction is greater than static friction",
                "right": false
              },
              {
                "answer": "Rolling friction is greater than kinetic friction",
                "right": false
              },
              {
                "answer": "Friction does not affect movement",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these is NOT an example of friction?",
            "short_title": "Non-Friction Example",
            "answers": [
              {
                "answer": "A magnet attracting iron",
                "right": true
              },
              {
                "answer": "A car braking on a road",
                "right": false
              },
              {
                "answer": "A person sliding on ice",
                "right": false
              },
              {
                "answer": "A box being pushed across a table",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if there is no friction?",
            "short_title": "Friction Absence Effect",
            "answers": [
              {
                "answer": "Objects keep moving indefinitely",
                "right": true
              },
              {
                "answer": "Objects slow down faster",
                "right": false
              },
              {
                "answer": "Objects do not move at all",
                "right": false
              },
              {
                "answer": "Objects gain more mass",
                "right": false
              }
            ]
          },
          {
            "title": "What role does friction play in game physics?",
            "short_title": "Friction in Game Physics",
            "answers": [
              {
                "answer": "It helps simulate realistic movement and stopping forces",
                "right": true
              },
              {
                "answer": "It has no effect on game mechanics",
                "right": false
              },
              {
                "answer": "It only affects jumping mechanics",
                "right": false
              },
              {
                "answer": "It increases an object’s speed",
                "right": false
              }
            ]
          }
        ],
        "Linear Velocity": [
          {
            "title": "What is linear velocity?",
            "short_title": "Definition of Linear Velocity",
            "answers": [
              {
                "answer": "The rate of change of an object's position over time",
                "right": true
              },
              {
                "answer": "The rotational speed of an object",
                "right": false
              },
              {
                "answer": "The force applied to an object",
                "right": false
              },
              {
                "answer": "The energy of an object due to its motion",
                "right": false
              }
            ]
          },
          {
            "title": "Which formula represents linear velocity?",
            "short_title": "Linear Velocity Formula",
            "answers": [
              {
                "answer": "v = d/t",
                "right": true
              },
              {
                "answer": "v = m * a",
                "right": false
              },
              {
                "answer": "v = r * ω",
                "right": false
              },
              {
                "answer": "v = 1/2 * m * v²",
                "right": false
              }
            ]
          },
          {
            "title": "Which unit is used to measure linear velocity?",
            "short_title": "Linear Velocity Unit",
            "answers": [
              {
                "answer": "Meters per second (m/s)",
                "right": true
              },
              {
                "answer": "Radians per second (rad/s)",
                "right": false
              },
              {
                "answer": "Newtons (N)",
                "right": false
              },
              {
                "answer": "Joules (J)",
                "right": false
              }
            ]
          },
          {
            "title": "If an object moves 10 meters in 2 seconds, what is its linear velocity?",
            "short_title": "Basic Linear Velocity Calculation",
            "answers": [
              {
                "answer": "5 m/s",
                "right": true
              },
              {
                "answer": "10 m/s",
                "right": false
              },
              {
                "answer": "2 m/s",
                "right": false
              },
              {
                "answer": "20 m/s",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to an object's velocity if its acceleration is zero?",
            "short_title": "Effect of Zero Acceleration",
            "answers": [
              {
                "answer": "The object moves at a constant velocity",
                "right": true
              },
              {
                "answer": "The object stops moving",
                "right": false
              },
              {
                "answer": "The object's velocity increases",
                "right": false
              },
              {
                "answer": "The object's velocity decreases",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these is an example of an object with constant linear velocity?",
            "short_title": "Constant Linear Velocity Example",
            "answers": [
              {
                "answer": "A car driving at 60 km/h on a straight road",
                "right": true
              },
              {
                "answer": "A ball being thrown upward",
                "right": false
              },
              {
                "answer": "A pendulum swinging",
                "right": false
              },
              {
                "answer": "A spinning wheel",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to an object’s velocity if a force is applied in the direction of motion?",
            "short_title": "Effect of Force on Velocity",
            "answers": [
              {
                "answer": "The velocity increases",
                "right": true
              },
              {
                "answer": "The velocity decreases",
                "right": false
              },
              {
                "answer": "The velocity remains unchanged",
                "right": false
              },
              {
                "answer": "The object stops moving",
                "right": false
              }
            ]
          },
          {
            "title": "How does friction affect an object’s linear velocity?",
            "short_title": "Friction and Linear Velocity",
            "answers": [
              {
                "answer": "It decreases velocity over time",
                "right": true
              },
              {
                "answer": "It increases velocity over time",
                "right": false
              },
              {
                "answer": "It has no effect on velocity",
                "right": false
              },
              {
                "answer": "It reverses the object's direction",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these affects an object's linear velocity?",
            "short_title": "Factors Affecting Linear Velocity",
            "answers": [
              {
                "answer": "Force applied to the object",
                "right": true
              },
              {
                "answer": "The object's color",
                "right": false
              },
              {
                "answer": "The object's temperature",
                "right": false
              },
              {
                "answer": "The shape of the object",
                "right": false
              }
            ]
          },
          {
            "title": "How is linear velocity different from angular velocity?",
            "short_title": "Linear vs Angular Velocity",
            "answers": [
              {
                "answer": "Linear velocity measures motion along a straight path, while angular velocity measures rotation",
                "right": true
              },
              {
                "answer": "Linear velocity is always greater than angular velocity",
                "right": false
              },
              {
                "answer": "Angular velocity is measured in meters per second",
                "right": false
              },
              {
                "answer": "Linear velocity depends on angular momentum",
                "right": false
              }
            ]
          },
          {
            "title": "If an object moves in a circular path at a constant speed, does its linear velocity remain constant?",
            "short_title": "Linear Velocity in Circular Motion",
            "answers": [
              {
                "answer": "No, because its direction is constantly changing",
                "right": true
              },
              {
                "answer": "Yes, because its speed is constant",
                "right": false
              },
              {
                "answer": "Yes, because there is no acceleration",
                "right": false
              },
              {
                "answer": "No, because circular motion does not have velocity",
                "right": false
              }
            ]
          },
          {
            "title": "Which physical quantity is the product of mass and linear velocity?",
            "short_title": "Momentum and Linear Velocity",
            "answers": [
              {
                "answer": "Momentum",
                "right": true
              },
              {
                "answer": "Acceleration",
                "right": false
              },
              {
                "answer": "Force",
                "right": false
              },
              {
                "answer": "Energy",
                "right": false
              }
            ]
          },
          {
            "title": "How can you increase an object's linear velocity?",
            "short_title": "Increasing Linear Velocity",
            "answers": [
              {
                "answer": "By applying a force in the direction of motion",
                "right": true
              },
              {
                "answer": "By increasing friction",
                "right": false
              },
              {
                "answer": "By decreasing its mass",
                "right": false
              },
              {
                "answer": "By stopping the object",
                "right": false
              }
            ]
          },
          {
            "title": "What does negative velocity indicate?",
            "short_title": "Negative Velocity Meaning",
            "answers": [
              {
                "answer": "The object is moving in the opposite direction",
                "right": true
              },
              {
                "answer": "The object is moving faster",
                "right": false
              },
              {
                "answer": "The object has stopped",
                "right": false
              },
              {
                "answer": "The object is gaining energy",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these will NOT affect an object's linear velocity?",
            "short_title": "Unrelated to Linear Velocity",
            "answers": [
              {
                "answer": "The color of the object",
                "right": true
              },
              {
                "answer": "The force applied to the object",
                "right": false
              },
              {
                "answer": "The friction acting on the object",
                "right": false
              },
              {
                "answer": "The mass of the object",
                "right": false
              }
            ]
          },
          {
            "title": "If an object’s acceleration is negative, what happens to its velocity?",
            "short_title": "Negative Acceleration Effect",
            "answers": [
              {
                "answer": "It decreases",
                "right": true
              },
              {
                "answer": "It increases",
                "right": false
              },
              {
                "answer": "It remains constant",
                "right": false
              },
              {
                "answer": "It becomes zero",
                "right": false
              }
            ]
          },
          {
            "title": "How does linear velocity relate to kinetic energy?",
            "short_title": "Linear Velocity and Kinetic Energy",
            "answers": [
              {
                "answer": "Kinetic energy is proportional to the square of velocity",
                "right": true
              },
              {
                "answer": "Kinetic energy is proportional to velocity",
                "right": false
              },
              {
                "answer": "Velocity does not affect kinetic energy",
                "right": false
              },
              {
                "answer": "Kinetic energy is inversely proportional to velocity",
                "right": false
              }
            ]
          }
        ],
        "Dynamics": [
          {
            "title": "What is dynamics in physics?",
            "short_title": "Definition of Dynamics",
            "answers": [
              {
                "answer": "The study of forces and their effects on motion",
                "right": true
              },
              {
                "answer": "The study of stationary objects",
                "right": false
              },
              {
                "answer": "The study of energy conservation",
                "right": false
              },
              {
                "answer": "The study of wave motion",
                "right": false
              }
            ]
          },
          {
            "title": "Which of Newton’s laws is most directly related to dynamics?",
            "short_title": "Newton’s Laws and Dynamics",
            "answers": [
              {
                "answer": "Newton's Second Law (F = m * a)",
                "right": true
              },
              {
                "answer": "Newton's First Law (Inertia)",
                "right": false
              },
              {
                "answer": "Newton's Third Law (Action-Reaction)",
                "right": false
              },
              {
                "answer": "Law of Universal Gravitation",
                "right": false
              }
            ]
          },
          {
            "title": "If an object has a net force of zero acting on it, what will happen?",
            "short_title": "Effect of Zero Net Force",
            "answers": [
              {
                "answer": "It remains at rest or moves at a constant velocity",
                "right": true
              },
              {
                "answer": "It accelerates",
                "right": false
              },
              {
                "answer": "It comes to a stop",
                "right": false
              },
              {
                "answer": "It changes direction",
                "right": false
              }
            ]
          },
          {
            "title": "Which formula expresses Newton’s Second Law?",
            "short_title": "Newton’s Second Law Formula",
            "answers": [
              {
                "answer": "F = m * a",
                "right": true
              },
              {
                "answer": "F = m * v",
                "right": false
              },
              {
                "answer": "F = m * g",
                "right": false
              },
              {
                "answer": "F = 1/2 * m * v²",
                "right": false
              }
            ]
          },
          {
            "title": "An object with a mass of 10 kg is accelerated at 2 m/s². What force is acting on it?",
            "short_title": "Force Calculation",
            "answers": [
              {
                "answer": "20 N",
                "right": true
              },
              {
                "answer": "5 N",
                "right": false
              },
              {
                "answer": "10 N",
                "right": false
              },
              {
                "answer": "2 N",
                "right": false
              }
            ]
          },
          {
            "title": "What is inertia?",
            "short_title": "Inertia Definition",
            "answers": [
              {
                "answer": "The resistance of an object to changes in its motion",
                "right": true
              },
              {
                "answer": "The force that causes acceleration",
                "right": false
              },
              {
                "answer": "The rate of change of velocity",
                "right": false
              },
              {
                "answer": "The energy stored in a moving object",
                "right": false
              }
            ]
          },
          {
            "title": "Which force always opposes the motion of an object?",
            "short_title": "Opposing Forces",
            "answers": [
              {
                "answer": "Friction",
                "right": true
              },
              {
                "answer": "Gravity",
                "right": false
              },
              {
                "answer": "Normal Force",
                "right": false
              },
              {
                "answer": "Centripetal Force",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these describes a situation where an object is in dynamic equilibrium?",
            "short_title": "Dynamic Equilibrium Example",
            "answers": [
              {
                "answer": "A car moving at a constant speed on a highway",
                "right": true
              },
              {
                "answer": "A ball at rest on the ground",
                "right": false
              },
              {
                "answer": "A rocket accelerating into space",
                "right": false
              },
              {
                "answer": "A pendulum swinging back and forth",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of force is required to change an object's motion?",
            "short_title": "Force for Motion Change",
            "answers": [
              {
                "answer": "Unbalanced force",
                "right": true
              },
              {
                "answer": "Balanced force",
                "right": false
              },
              {
                "answer": "Frictional force",
                "right": false
              },
              {
                "answer": "Normal force",
                "right": false
              }
            ]
          },
          {
            "title": "What does Newton’s Third Law state?",
            "short_title": "Newton’s Third Law",
            "answers": [
              {
                "answer": "For every action, there is an equal and opposite reaction",
                "right": true
              },
              {
                "answer": "Objects at rest stay at rest unless acted upon",
                "right": false
              },
              {
                "answer": "F = m * a",
                "right": false
              },
              {
                "answer": "Every force creates an acceleration",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to acceleration if the force acting on an object is doubled, assuming mass remains constant?",
            "short_title": "Effect of Doubling Force",
            "answers": [
              {
                "answer": "It doubles",
                "right": true
              },
              {
                "answer": "It remains the same",
                "right": false
              },
              {
                "answer": "It is halved",
                "right": false
              },
              {
                "answer": "It becomes zero",
                "right": false
              }
            ]
          },
          {
            "title": "Which force is responsible for keeping planets in orbit around the sun?",
            "short_title": "Force in Orbital Motion",
            "answers": [
              {
                "answer": "Gravity",
                "right": true
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Electromagnetic Force",
                "right": false
              },
              {
                "answer": "Nuclear Force",
                "right": false
              }
            ]
          },
          {
            "title": "If two objects collide and stick together, what type of collision is this?",
            "short_title": "Collision Type",
            "answers": [
              {
                "answer": "Perfectly inelastic collision",
                "right": true
              },
              {
                "answer": "Elastic collision",
                "right": false
              },
              {
                "answer": "Partially elastic collision",
                "right": false
              },
              {
                "answer": "Superelastic collision",
                "right": false
              }
            ]
          },
          {
            "title": "A moving object comes to rest due to friction. What does friction do in this case?",
            "short_title": "Friction’s Effect",
            "answers": [
              {
                "answer": "Converts kinetic energy into heat",
                "right": true
              },
              {
                "answer": "Increases the object's velocity",
                "right": false
              },
              {
                "answer": "Has no effect on the object",
                "right": false
              },
              {
                "answer": "Creates a balanced force",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these is NOT an example of a force?",
            "short_title": "Non-Force Example",
            "answers": [
              {
                "answer": "Momentum",
                "right": true
              },
              {
                "answer": "Gravity",
                "right": false
              },
              {
                "answer": "Tension",
                "right": false
              },
              {
                "answer": "Normal force",
                "right": false
              }
            ]
          },
          {
            "title": "If an object's mass increases while the force remains constant, what happens to acceleration?",
            "short_title": "Mass and Acceleration Relationship",
            "answers": [
              {
                "answer": "It decreases",
                "right": true
              },
              {
                "answer": "It increases",
                "right": false
              },
              {
                "answer": "It remains the same",
                "right": false
              },
              {
                "answer": "It becomes zero",
                "right": false
              }
            ]
          },
          {
            "title": "Which force acts perpendicular to a surface supporting an object?",
            "short_title": "Normal Force Definition",
            "answers": [
              {
                "answer": "Normal force",
                "right": true
              },
              {
                "answer": "Tension",
                "right": false
              },
              {
                "answer": "Friction",
                "right": false
              },
              {
                "answer": "Gravitational force",
                "right": false
              }
            ]
          }
        ],
        "Collision Detection": [
          {
            "title": "What are the main computational challenges in collision detection?",
            "short_title": "Collision challenges",
            "answers": [
              {
                "answer": "Handling large numbers of objects efficiently",
                "right": true
              },
              {
                "answer": "Rendering object textures accurately",
                "right": false
              },
              {
                "answer": "Synchronizing animation and physics",
                "right": false
              },
              {
                "answer": "Reducing the number of lights in a scene",
                "right": false
              }
            ]
          },
          {
            "title": "Which data structures are commonly used in Broad Phase collision detection?",
            "short_title": "Broad Phase structures",
            "answers": [
              {
                "answer": "Quadtrees and BVH (Bounding Volume Hierarchies)",
                "right": true
              },
              {
                "answer": "Linked Lists and Stacks",
                "right": false
              },
              {
                "answer": "Binary Search Trees",
                "right": false
              },
              {
                "answer": "Hash Maps",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main advantage of using Bounding Volume Hierarchies (BVH) in collision detection?",
            "short_title": "BVH advantage",
            "answers": [
              {
                "answer": "Efficiently culling unnecessary collision checks",
                "right": true
              },
              {
                "answer": "Generating more precise physics interactions",
                "right": false
              },
              {
                "answer": "Increasing object rendering speed",
                "right": false
              },
              {
                "answer": "Reducing texture memory usage",
                "right": false
              }
            ]
          },
          {
            "title": "How does the Sweep and Prune algorithm work in Broad Phase collision detection?",
            "short_title": "Sweep and Prune",
            "answers": [
              {
                "answer": "It sorts objects along an axis and checks for overlaps",
                "right": true
              },
              {
                "answer": "It applies a brute-force approach to all objects",
                "right": false
              },
              {
                "answer": "It performs ray tracing on each object",
                "right": false
              },
              {
                "answer": "It discards all objects outside of the viewport",
                "right": false
              }
            ]
          },
          {
            "title": "Which algorithm is widely used for Narrow Phase collision detection in convex shapes?",
            "short_title": "Narrow Phase algo",
            "answers": [
              {
                "answer": "GJK (Gilbert-Johnson-Keerthi)",
                "right": true
              },
              {
                "answer": "AABB (Axis-Aligned Bounding Box)",
                "right": false
              },
              {
                "answer": "DFS (Depth First Search)",
                "right": false
              },
              {
                "answer": "NavMesh Pathfinding",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of the EPA (Expanding Polytope Algorithm) in Narrow Phase detection?",
            "short_title": "EPA role",
            "answers": [
              {
                "answer": "It calculates the exact collision penetration depth",
                "right": true
              },
              {
                "answer": "It sorts collision candidates in Broad Phase",
                "right": false
              },
              {
                "answer": "It generates bounding boxes for collision tests",
                "right": false
              },
              {
                "answer": "It optimizes texture memory for physics objects",
                "right": false
              }
            ]
          },
          {
            "title": "What is a limitation of using AABBs (Axis-Aligned Bounding Boxes) in collision detection?",
            "short_title": "AABB limitation",
            "answers": [
              {
                "answer": "They do not rotate with the object",
                "right": true
              },
              {
                "answer": "They require high GPU memory usage",
                "right": false
              },
              {
                "answer": "They cannot be used in 3D simulations",
                "right": false
              },
              {
                "answer": "They slow down Broad Phase calculations",
                "right": false
              }
            ]
          },
          {
            "title": "Which method improves accuracy in Continuous Collision Detection (CCD)?",
            "short_title": "CCD improvement",
            "answers": [
              {
                "answer": "Swept volume tests",
                "right": true
              },
              {
                "answer": "Reducing the physics update rate",
                "right": false
              },
              {
                "answer": "Using simpler collision shapes",
                "right": false
              },
              {
                "answer": "Increasing the Broad Phase grid size",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Time of Impact (TOI) calculations in CCD?",
            "short_title": "TOI purpose",
            "answers": [
              {
                "answer": "To determine when two objects first collide",
                "right": true
              },
              {
                "answer": "To resolve overlapping collisions",
                "right": false
              },
              {
                "answer": "To ignore small collisions",
                "right": false
              },
              {
                "answer": "To detect objects outside of the camera view",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following techniques can help reduce performance costs in collision detection?",
            "short_title": "Optimization techniques",
            "answers": [
              {
                "answer": "Using simplified collision shapes",
                "right": true
              },
              {
                "answer": "Increasing the physics update rate",
                "right": false
              },
              {
                "answer": "Applying ray tracing to all objects",
                "right": false
              },
              {
                "answer": "Removing Broad Phase detection",
                "right": false
              }
            ]
          }
        ],
        "Bounding Volume": [
          {
            "title": "What is the main drawback of using an Axis-Aligned Bounding Box (AABB)?",
            "short_title": "AABB limitation",
            "answers": [
              {
                "answer": "It does not rotate with the object, leading to inefficiency in some cases",
                "right": true
              },
              {
                "answer": "It requires a lot of memory compared to other bounding volumes",
                "right": false
              },
              {
                "answer": "It is difficult to implement in physics engines",
                "right": false
              },
              {
                "answer": "It is only useful for 2D collision detection",
                "right": false
              }
            ]
          },
          {
            "title": "Which bounding volume is better suited for objects that frequently rotate?",
            "short_title": "Best bounding volume for rotating objects",
            "answers": [
              {
                "answer": "Oriented Bounding Box (OBB)",
                "right": true
              },
              {
                "answer": "AABB (Axis-Aligned Bounding Box)",
                "right": false
              },
              {
                "answer": "Bounding Sphere",
                "right": false
              },
              {
                "answer": "Convex Hull",
                "right": false
              }
            ]
          },
          {
            "title": "What is a key advantage of using bounding spheres for collision detection?",
            "short_title": "Bounding sphere advantage",
            "answers": [
              {
                "answer": "Distance checks are very fast",
                "right": true
              },
              {
                "answer": "They always provide the most accurate collision results",
                "right": false
              },
              {
                "answer": "They work best for concave objects",
                "right": false
              },
              {
                "answer": "They require the least amount of memory",
                "right": false
              }
            ]
          },
          {
            "title": "When would a convex hull be used instead of an AABB or OBB?",
            "short_title": "Convex Hull use case",
            "answers": [
              {
                "answer": "When more accurate collision detection is needed",
                "right": true
              },
              {
                "answer": "When the object is a perfect sphere",
                "right": false
              },
              {
                "answer": "When performance is the highest priority",
                "right": false
              },
              {
                "answer": "When the object is very small",
                "right": false
              }
            ]
          },
          {
            "title": "How does a bounding volume hierarchy (BVH) improve collision detection?",
            "short_title": "BVH benefits",
            "answers": [
              {
                "answer": "By structuring objects in a tree for efficient spatial queries",
                "right": true
              },
              {
                "answer": "By reducing the memory footprint of physics simulations",
                "right": false
              },
              {
                "answer": "By ensuring collisions are always detected accurately",
                "right": false
              },
              {
                "answer": "By using only one type of bounding volume",
                "right": false
              }
            ]
          }
        ],
        "Convexity": [
          {
            "title": "How is a convex shape defined?",
            "short_title": "Convex shape definition",
            "answers": [
              {
                "answer": "A shape where any line segment between two points inside remains inside",
                "right": true
              },
              {
                "answer": "A shape that contains holes or indentations",
                "right": false
              },
              {
                "answer": "A shape with an uneven surface",
                "right": false
              },
              {
                "answer": "A shape with only 90-degree angles",
                "right": false
              }
            ]
          }
        ],
        "Networking": [
          {
            "title": "What is the purpose of Unity Netcode for GameObjects?",
            "short_title": "Netcode purpose",
            "answers": [
              {
                "answer": "To synchronize GameObjects across a network",
                "right": true
              },
              {
                "answer": "To render UI",
                "right": false
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the NetworkBehaviour class do in Unity?",
            "short_title": "NetworkBehaviour",
            "answers": [
              {
                "answer": "Provides networked functionality for scripts",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Network Variable in Unity Netcode?",
            "short_title": "Network Variable",
            "answers": [
              {
                "answer": "A variable synchronized across the network",
                "right": true
              },
              {
                "answer": "A local physics variable",
                "right": false
              },
              {
                "answer": "A UI property",
                "right": false
              },
              {
                "answer": "A shader parameter",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NetworkTransform' do in Unity Netcode?",
            "short_title": "NetworkTransform",
            "answers": [
              {
                "answer": "Synchronizes Transform data over the network",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NetworkObject' in Unity Netcode?",
            "short_title": "NetworkObject",
            "answers": [
              {
                "answer": "Represents a networked GameObject",
                "right": true
              },
              {
                "answer": "Handles UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ServerRpc' attribute do in Unity Netcode?",
            "short_title": "ServerRpc",
            "answers": [
              {
                "answer": "Marks a method to be called on the server",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ],
        "Debugging": [
          {
            "title": "What does the Unity Profiler’s Deep Profile mode do?",
            "short_title": "Deep Profile",
            "answers": [
              {
                "answer": "Provides detailed call stack performance data",
                "right": true
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Debug.LogException() in Unity?",
            "short_title": "Debug.LogException",
            "answers": [
              {
                "answer": "Logs an exception with stack trace details",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Frame Debugger do in Unity?",
            "short_title": "Frame Debugger",
            "answers": [
              {
                "answer": "Analyzes rendering steps for a single frame",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Debug.DrawRay()' do in Unity?",
            "short_title": "Debug.DrawRay()",
            "answers": [
              {
                "answer": "Visualizes a ray in the Scene view",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Profiler.BeginSample()' in Unity?",
            "short_title": "BeginSample()",
            "answers": [
              {
                "answer": "Marks the start of a custom profiling block",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Debug.Assert()' do in Unity?",
            "short_title": "Debug.Assert()",
            "answers": [
              {
                "answer": "Logs an error if a condition fails",
                "right": true
              },
              {
                "answer": "Handles UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ]
      }
    },
    {
      "rank": "Middle+",
      "subjects": {
        "Advanced Rendering Techniques": [
          {
            "title": "What is the primary purpose of the Universal Render Pipeline (URP) in Unity?",
            "short_title": "URP purpose",
            "answers": [
              {
                "answer": "Optimized rendering for a wide range of platforms",
                "right": true
              },
              {
                "answer": "High-end cinematic rendering only",
                "right": false
              },
              {
                "answer": "Physics simulation",
                "right": false
              },
              {
                "answer": "Audio processing",
                "right": false
              }
            ]
          },
          {
            "title": "What does the High Definition Render Pipeline (HDRP) focus on in Unity?",
            "short_title": "HDRP focus",
            "answers": [
              {
                "answer": "High-fidelity visuals for modern hardware",
                "right": true
              },
              {
                "answer": "Low-end mobile performance",
                "right": false
              },
              {
                "answer": "2D rendering only",
                "right": false
              },
              {
                "answer": "Physics-based rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Shader Graph used for in Unity?",
            "short_title": "Shader Graph",
            "answers": [
              {
                "answer": "Creating shaders visually without code",
                "right": true
              },
              {
                "answer": "Writing physics simulations",
                "right": false
              },
              {
                "answer": "Managing animation states",
                "right": false
              },
              {
                "answer": "Rendering UI elements",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Dynamic Batching' do in Unity’s rendering system?",
            "short_title": "Dynamic Batching",
            "answers": [
              {
                "answer": "Combines draw calls for moving objects with shared materials",
                "right": true
              },
              {
                "answer": "Precomputes lighting",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Static Batching' in Unity?",
            "short_title": "Static Batching",
            "answers": [
              {
                "answer": "Combines static objects into a single draw call",
                "right": true
              },
              {
                "answer": "Handles dynamic objects",
                "right": false
              },
              {
                "answer": "Improves physics performance",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Post-Processing Stack' add to Unity rendering?",
            "short_title": "Post-Processing Stack",
            "answers": [
              {
                "answer": "Effects like bloom and color grading after rendering",
                "right": true
              },
              {
                "answer": "Physics calculations",
                "right": false
              },
              {
                "answer": "Real-time shadows",
                "right": false
              },
              {
                "answer": "Audio effects",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Render Texture' used for in Unity?",
            "short_title": "Render Texture",
            "answers": [
              {
                "answer": "Captures rendering output for effects or display",
                "right": true
              },
              {
                "answer": "Stores physics data",
                "right": false
              },
              {
                "answer": "Manages animation frames",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Shader Replacement' allow in Unity?",
            "short_title": "Shader Replacement",
            "answers": [
              {
                "answer": "Overrides shaders for specific rendering effects",
                "right": true
              },
              {
                "answer": "Changes physics properties",
                "right": false
              },
              {
                "answer": "Renders UI only",
                "right": false
              },
              {
                "answer": "Optimizes animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Camera.Render()' in Unity?",
            "short_title": "Camera.Render()",
            "answers": [
              {
                "answer": "Manually forces a camera to render",
                "right": true
              },
              {
                "answer": "Moves the camera",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              },
              {
                "answer": "Changes physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Light Probe Groups' improve in Unity rendering?",
            "short_title": "Light Probe Groups",
            "answers": [
              {
                "answer": "Dynamic object lighting with baked data",
                "right": true
              },
              {
                "answer": "Physics accuracy",
                "right": false
              },
              {
                "answer": "UI rendering",
                "right": false
              },
              {
                "answer": "Animation playback",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'Reflection Probes' in Unity?",
            "short_title": "Reflection Probes",
            "answers": [
              {
                "answer": "Captures environment reflections for objects",
                "right": true
              },
              {
                "answer": "Handles physics reflections",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              },
              {
                "answer": "Manages audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Shader.SetGlobalTexture()' do in Unity?",
            "short_title": "SetGlobalTexture",
            "answers": [
              {
                "answer": "Sets a texture accessible to all shaders",
                "right": true
              },
              {
                "answer": "Changes a single material",
                "right": false
              },
              {
                "answer": "Renders a new frame",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is 'GPU Instancing' in Unity used for?",
            "short_title": "GPU Instancing",
            "answers": [
              {
                "answer": "Renders multiple identical objects with one draw call",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Handles audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Render Pipeline Asset' configure in Unity?",
            "short_title": "Render Pipeline Asset",
            "answers": [
              {
                "answer": "Settings for URP or HDRP rendering",
                "right": true
              },
              {
                "answer": "Physics properties",
                "right": false
              },
              {
                "answer": "Animation states",
                "right": false
              },
              {
                "answer": "Input bindings",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Occlusion Culling' in Unity?",
            "short_title": "Occlusion Culling",
            "answers": [
              {
                "answer": "Hides objects not visible to the camera",
                "right": true
              },
              {
                "answer": "Renders all objects",
                "right": false
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Shader Variant Collection' optimize in Unity?",
            "short_title": "Shader Variant Collection",
            "answers": [
              {
                "answer": "Preloads shader variants to reduce runtime compilation",
                "right": true
              },
              {
                "answer": "Handles physics variants",
                "right": false
              },
              {
                "answer": "Renders UI faster",
                "right": false
              },
              {
                "answer": "Improves animation",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Depth Buffer' used for in Unity rendering?",
            "short_title": "Depth Buffer",
            "answers": [
              {
                "answer": "Determines object draw order based on distance",
                "right": true
              },
              {
                "answer": "Stores physics data",
                "right": false
              },
              {
                "answer": "Manages audio",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Camera.targetTexture' do in Unity?",
            "short_title": "targetTexture",
            "answers": [
              {
                "answer": "Renders the camera output to a Render Texture",
                "right": true
              },
              {
                "answer": "Changes the camera position",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Feature Directives' in Unity?",
            "short_title": "Shader Feature Directives",
            "answers": [
              {
                "answer": "Enable conditional shader compilation",
                "right": true
              },
              {
                "answer": "Render UI elements",
                "right": false
              },
              {
                "answer": "Manage physics",
                "right": false
              },
              {
                "answer": "Optimize animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Graphics.Blit()' do in Unity?",
            "short_title": "Graphics.Blit()",
            "answers": [
              {
                "answer": "Copies a source texture to a destination with a shader",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          }
        ],
        "Physics Simulation and Optimization": [
          {
            "title": "What does 'Physics.Simulate()' allow in Unity?",
            "short_title": "Physics.Simulate()",
            "answers": [
              {
                "answer": "Manually steps the physics simulation",
                "right": true
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.autoSimulation' in Unity?",
            "short_title": "autoSimulation",
            "answers": [
              {
                "answer": "Enables or disables automatic physics updates",
                "right": true
              },
              {
                "answer": "Controls rendering",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.solverIterations' affect in Unity?",
            "short_title": "solverIterations",
            "answers": [
              {
                "answer": "The accuracy of physics calculations",
                "right": true
              },
              {
                "answer": "The object’s render quality",
                "right": false
              },
              {
                "answer": "The animation speed",
                "right": false
              },
              {
                "answer": "The input response",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'Physics.OverlapSphereNonAlloc()' over 'Physics.OverlapSphere()'?",
            "short_title": "OverlapSphereNonAlloc",
            "answers": [
              {
                "answer": "Reduces memory allocations by reusing an array",
                "right": true
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Renders objects faster",
                "right": false
              },
              {
                "answer": "Stops collisions",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.MovePosition()' do differently from setting 'position' directly?",
            "short_title": "MovePosition vs position",
            "answers": [
              {
                "answer": "Moves with physics interpolation",
                "right": true
              },
              {
                "answer": "Teleports instantly without physics",
                "right": false
              },
              {
                "answer": "Changes rotation",
                "right": false
              },
              {
                "answer": "Stops movement",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics2D.Simulate()' in Unity?",
            "short_title": "Physics2D.Simulate()",
            "answers": [
              {
                "answer": "Manually steps the 2D physics simulation",
                "right": true
              },
              {
                "answer": "Renders 2D graphics",
                "right": false
              },
              {
                "answer": "Handles 3D physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.velocity' control in Unity?",
            "short_title": "Rigidbody2D.velocity",
            "answers": [
              {
                "answer": "The 2D speed and direction of movement",
                "right": true
              },
              {
                "answer": "The object’s rotation",
                "right": false
              },
              {
                "answer": "The rendering quality",
                "right": false
              },
              {
                "answer": "The animation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of using 'Physics.RaycastNonAlloc()' in Unity?",
            "short_title": "RaycastNonAlloc",
            "answers": [
              {
                "answer": "Avoids garbage allocation with a pre-allocated array",
                "right": true
              },
              {
                "answer": "Increases raycast distance",
                "right": false
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.sleepThreshold' determine in Unity?",
            "short_title": "sleepThreshold",
            "answers": [
              {
                "answer": "When a Rigidbody goes to sleep to save performance",
                "right": true
              },
              {
                "answer": "The object’s mass",
                "right": false
              },
              {
                "answer": "The rendering order",
                "right": false
              },
              {
                "answer": "The animation duration",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Joint2D' in Unity?",
            "short_title": "Joint2D",
            "answers": [
              {
                "answer": "Connects two 2D Rigidbodies with constraints",
                "right": true
              },
              {
                "answer": "Renders joints",
                "right": false
              },
              {
                "answer": "Handles 3D physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysicsScene.Simulate()' allow in Unity?",
            "short_title": "PhysicsScene.Simulate()",
            "answers": [
              {
                "answer": "Runs physics in a custom scene independently",
                "right": true
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Rigidbody.interpolation' in Unity?",
            "short_title": "Rigidbody.interpolation",
            "answers": [
              {
                "answer": "Smooths movement between physics updates",
                "right": true
              },
              {
                "answer": "Increases collision accuracy",
                "right": false
              },
              {
                "answer": "Changes rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.IgnoreLayerCollision()' do in Unity?",
            "short_title": "IgnoreLayerCollision",
            "answers": [
              {
                "answer": "Prevents collisions between two layers",
                "right": true
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Renders layers",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'Physics.OverlapBoxNonAlloc()'?",
            "short_title": "OverlapBoxNonAlloc",
            "answers": [
              {
                "answer": "Reduces memory allocations for overlap checks",
                "right": true
              },
              {
                "answer": "Increases physics speed",
                "right": false
              },
              {
                "answer": "Renders boxes",
                "right": false
              },
              {
                "answer": "Stops collisions",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.AddForceAtPosition()' do in Unity?",
            "short_title": "AddForceAtPosition",
            "answers": [
              {
                "answer": "Applies a force at a specific point in 2D",
                "right": true
              },
              {
                "answer": "Moves the object instantly",
                "right": false
              },
              {
                "answer": "Changes rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.defaultContactOffset' in Unity?",
            "short_title": "defaultContactOffset",
            "answers": [
              {
                "answer": "Sets the minimum separation distance for collisions",
                "right": true
              },
              {
                "answer": "Controls rendering distance",
                "right": false
              },
              {
                "answer": "Manages animation speed",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.detectCollisions' control?",
            "short_title": "detectCollisions",
            "answers": [
              {
                "answer": "Whether the Rigidbody registers collisions",
                "right": true
              },
              {
                "answer": "The object’s rendering",
                "right": false
              },
              {
                "answer": "The animation state",
                "right": false
              },
              {
                "answer": "The physics timestep",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.sleepThreshold' in Unity?",
            "short_title": "Physics.sleepThreshold",
            "answers": [
              {
                "answer": "Global setting for when Rigidbodies sleep",
                "right": true
              },
              {
                "answer": "Controls rendering sleep",
                "right": false
              },
              {
                "answer": "Manages UI sleep",
                "right": false
              },
              {
                "answer": "Handles animation sleep",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics2D.IgnoreCollision()' do in Unity?",
            "short_title": "Physics2D.IgnoreCollision",
            "answers": [
              {
                "answer": "Prevents two 2D Colliders from colliding",
                "right": true
              },
              {
                "answer": "Renders 2D objects",
                "right": false
              },
              {
                "answer": "Stops 2D physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of using 'PhysicsScene.Raycast()' over 'Physics.Raycast()'?",
            "short_title": "PhysicsScene.Raycast",
            "answers": [
              {
                "answer": "Allows raycasting in a specific physics scene",
                "right": true
              },
              {
                "answer": "Increases raycast speed",
                "right": false
              },
              {
                "answer": "Renders rays",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          }
        ],
        "C# Performance and Patterns": [
          {
            "title": "What does 'ArrayPool<T>' provide for performance in C#?",
            "short_title": "ArrayPool<T>",
            "answers": [
              {
                "answer": "Reuses arrays to reduce memory allocations",
                "right": true
              },
              {
                "answer": "Creates new arrays each time",
                "right": false
              },
              {
                "answer": "Handles threading",
                "right": false
              },
              {
                "answer": "Optimizes rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'Span<T>' in C# for Unity?",
            "short_title": "Span<T> benefit",
            "answers": [
              {
                "answer": "Efficient memory access without allocations",
                "right": true
              },
              {
                "answer": "Improved physics calculations",
                "right": false
              },
              {
                "answer": "Faster rendering",
                "right": false
              },
              {
                "answer": "Simplified animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'readonly' modifier improve in C# performance?",
            "short_title": "readonly modifier",
            "answers": [
              {
                "answer": "Prevents unnecessary copies of structs",
                "right": true
              },
              {
                "answer": "Increases allocation speed",
                "right": false
              },
              {
                "answer": "Manages threads",
                "right": false
              },
              {
                "answer": "Renders objects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Task.Run()' in C#?",
            "short_title": "Task.Run()",
            "answers": [
              {
                "answer": "Runs a method on a thread pool thread",
                "right": true
              },
              {
                "answer": "Runs a method synchronously",
                "right": false
              },
              {
                "answer": "Stops all tasks",
                "right": false
              },
              {
                "answer": "Handles rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AggressiveInlining' attribute do in C#?",
            "short_title": "AggressiveInlining",
            "answers": [
              {
                "answer": "Forces method inlining for performance",
                "right": true
              },
              {
                "answer": "Manages memory allocations",
                "right": false
              },
              {
                "answer": "Handles threading",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the performance benefit of using a 'struct' over a 'class' in Unity?",
            "short_title": "Struct vs Class",
            "answers": [
              {
                "answer": "Avoids heap allocations and GC pressure",
                "right": true
              },
              {
                "answer": "Improves rendering speed",
                "right": false
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Simplifies animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Monitor.TryEnter()' provide in C# threading?",
            "short_title": "Monitor.TryEnter()",
            "answers": [
              {
                "answer": "Attempts to acquire a lock without blocking",
                "right": true
              },
              {
                "answer": "Forces a thread to sleep",
                "right": false
              },
              {
                "answer": "Renders a frame",
                "right": false
              },
              {
                "answer": "Stops all threads",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Factory pattern in Unity?",
            "short_title": "Factory pattern",
            "answers": [
              {
                "answer": "Creates objects without exposing instantiation logic",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Interlocked.CompareExchange()' do in C#?",
            "short_title": "CompareExchange",
            "answers": [
              {
                "answer": "Atomically compares and swaps values",
                "right": true
              },
              {
                "answer": "Allocates memory",
                "right": false
              },
              {
                "answer": "Stops threads",
                "right": false
              },
              {
                "answer": "Renders objects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of the Singleton pattern in Unity?",
            "short_title": "Singleton benefit",
            "answers": [
              {
                "answer": "Ensures a single instance with global access",
                "right": true
              },
              {
                "answer": "Improves physics performance",
                "right": false
              },
              {
                "answer": "Renders scenes faster",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ValueTask<T>' optimize in C#?",
            "short_title": "ValueTask<T>",
            "answers": [
              {
                "answer": "Reduces allocations for synchronous tasks",
                "right": true
              },
              {
                "answer": "Increases thread count",
                "right": false
              },
              {
                "answer": "Handles rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Observer pattern in Unity?",
            "short_title": "Observer pattern",
            "answers": [
              {
                "answer": "Notifies objects of state changes",
                "right": true
              },
              {
                "answer": "Creates factories",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Parallel.ForEach()' improve in C#?",
            "short_title": "Parallel.ForEach()",
            "answers": [
              {
                "answer": "Processes collections in parallel for performance",
                "right": true
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Stops threads",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'unsafe' code in C# for Unity?",
            "short_title": "unsafe code",
            "answers": [
              {
                "answer": "Allows pointer operations for performance",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Strategy pattern enable in Unity?",
            "short_title": "Strategy pattern",
            "answers": [
              {
                "answer": "Swappable algorithms at runtime",
                "right": true
              },
              {
                "answer": "Single instance management",
                "right": false
              },
              {
                "answer": "Rendering optimization",
                "right": false
              },
              {
                "answer": "Physics simulation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Thread.VolatileRead()' ensure in C#?",
            "short_title": "VolatileRead",
            "answers": [
              {
                "answer": "Reads the latest value of a variable across threads",
                "right": true
              },
              {
                "answer": "Stops a thread",
                "right": false
              },
              {
                "answer": "Renders a frame",
                "right": false
              },
              {
                "answer": "Allocates memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the performance impact of boxing in C#?",
            "short_title": "Boxing impact",
            "answers": [
              {
                "answer": "Creates heap allocations, triggering GC",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Increases physics speed",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Command pattern facilitate in Unity?",
            "short_title": "Command pattern",
            "answers": [
              {
                "answer": "Encapsulates actions for undo/redo functionality",
                "right": true
              },
              {
                "answer": "Manages rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode()' do?",
            "short_title": "GetHashCode",
            "answers": [
              {
                "answer": "Provides a stable hash code for an object",
                "right": true
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'ref' parameters in C# methods?",
            "short_title": "ref parameters",
            "answers": [
              {
                "answer": "Avoids copying large structs for performance",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles threading",
                "right": false
              },
              {
                "answer": "Stops garbage collection",
                "right": false
              }
            ]
          }
        ],
        "Animation Systems and Rigging": [
          {
            "title": "What is the purpose of 'PlayableGraph' in Unity’s animation system?",
            "short_title": "PlayableGraph",
            "answers": [
              {
                "answer": "Manages a hierarchy of playable animation assets",
                "right": true
              },
              {
                "answer": "Controls physics animations",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Handles UI animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AnimatorControllerPlayable' enable in Unity?",
            "short_title": "AnimatorControllerPlayable",
            "answers": [
              {
                "answer": "Integrates Animator Controllers into a PlayableGraph",
                "right": true
              },
              {
                "answer": "Stops all animations",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'AnimationClipPlayable' in Unity?",
            "short_title": "AnimationClipPlayable",
            "answers": [
              {
                "answer": "Allows dynamic control of a single animation clip",
                "right": true
              },
              {
                "answer": "Improves physics accuracy",
                "right": false
              },
              {
                "answer": "Renders scenes faster",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AnimatorOverrideController' do in Unity?",
            "short_title": "AnimatorOverrideController",
            "answers": [
              {
                "answer": "Swaps animation clips without changing the state machine",
                "right": true
              },
              {
                "answer": "Controls physics animations",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Manages UI transitions",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Avatar Mask' in Unity animations?",
            "short_title": "Avatar Mask",
            "answers": [
              {
                "answer": "Limits animation to specific body parts",
                "right": true
              },
              {
                "answer": "Increases animation speed",
                "right": false
              },
              {
                "answer": "Stops all animations",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.CrossFadeInFixedTime()' do in Unity?",
            "short_title": "CrossFadeInFixedTime",
            "answers": [
              {
                "answer": "Transitions to a state with a fixed duration",
                "right": true
              },
              {
                "answer": "Stops the current animation",
                "right": false
              },
              {
                "answer": "Changes physics",
                "right": false
              },
              {
                "answer": "Renders a frame",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'Humanoid Rig' in Unity?",
            "short_title": "Humanoid Rig",
            "answers": [
              {
                "answer": "Maps animations to a standardized humanoid skeleton",
                "right": true
              },
              {
                "answer": "Controls physics rigging",
                "right": false
              },
              {
                "answer": "Renders UI animations",
                "right": false
              },
              {
                "answer": "Manages audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetIKPosition()' do in Unity?",
            "short_title": "SetIKPosition",
            "answers": [
              {
                "answer": "Sets the position of an inverse kinematics target",
                "right": true
              },
              {
                "answer": "Stops animations",
                "right": false
              },
              {
                "answer": "Changes rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Blend Trees' in Unity Animator?",
            "short_title": "Blend Trees",
            "answers": [
              {
                "answer": "Blends multiple animations based on parameters",
                "right": true
              },
              {
                "answer": "Renders animation trees",
                "right": false
              },
              {
                "answer": "Manages physics blends",
                "right": false
              },
              {
                "answer": "Controls UI transitions",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.MatchTarget()' achieve in Unity?",
            "short_title": "MatchTarget",
            "answers": [
              {
                "answer": "Aligns an animation to a specific position or rotation",
                "right": true
              },
              {
                "answer": "Stops animation playback",
                "right": false
              },
              {
                "answer": "Renders a match",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Animation Compression' in Unity?",
            "short_title": "Animation Compression",
            "answers": [
              {
                "answer": "Reduces memory usage and improves performance",
                "right": true
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Renders animations faster",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.GetBoneTransform()' return in Unity?",
            "short_title": "GetBoneTransform",
            "answers": [
              {
                "answer": "The Transform of a specific bone in the rig",
                "right": true
              },
              {
                "answer": "The animation clip",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The physics state",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Animation Layer Sync' in Unity?",
            "short_title": "Layer Sync",
            "answers": [
              {
                "answer": "Synchronizes timing across animation layers",
                "right": true
              },
              {
                "answer": "Renders layers",
                "right": false
              },
              {
                "answer": "Manages physics layers",
                "right": false
              },
              {
                "answer": "Handles UI layers",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.Update()' do in Unity?",
            "short_title": "Animator.Update()",
            "answers": [
              {
                "answer": "Manually advances the animation by a time step",
                "right": true
              },
              {
                "answer": "Stops the animator",
                "right": false
              },
              {
                "answer": "Changes physics",
                "right": false
              },
              {
                "answer": "Renders a frame",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'Root Motion' in Unity animations?",
            "short_title": "Root Motion",
            "answers": [
              {
                "answer": "Drives object movement from the animation",
                "right": true
              },
              {
                "answer": "Controls rendering motion",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              },
              {
                "answer": "Manages physics motion",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetLayerWeight()' control in Unity?",
            "short_title": "SetLayerWeight",
            "answers": [
              {
                "answer": "The influence of an animation layer",
                "right": true
              },
              {
                "answer": "The animation speed",
                "right": false
              },
              {
                "answer": "The physics layer",
                "right": false
              },
              {
                "answer": "The rendering order",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Animation Mixer Playable' in Unity?",
            "short_title": "Animation Mixer Playable",
            "answers": [
              {
                "answer": "Blends multiple animation clips dynamically",
                "right": true
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Handles physics blending",
                "right": false
              },
              {
                "answer": "Manages UI animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.GetAnimatorTransitionInfo()' provide?",
            "short_title": "GetAnimatorTransitionInfo",
            "answers": [
              {
                "answer": "Details about the current transition state",
                "right": true
              },
              {
                "answer": "The physics state",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The input state",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Animator Culling Mode' in Unity?",
            "short_title": "Culling Mode",
            "answers": [
              {
                "answer": "Optimizes performance by skipping off-screen animations",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders animations faster",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetIKHintPosition()' do in Unity?",
            "short_title": "SetIKHintPosition",
            "answers": [
              {
                "answer": "Sets a hint position for IK solving",
                "right": true
              },
              {
                "answer": "Changes animation speed",
                "right": false
              },
              {
                "answer": "Renders IK",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          }
        ],
        "Input System and Multi-Device Support": [
          {
            "title": "What is the primary advantage of Unity’s new Input System over the legacy Input class?",
            "short_title": "New Input System advantage",
            "answers": [
              {
                "answer": "Flexible, multi-device support with reusable actions",
                "right": true
              },
              {
                "answer": "Faster rendering",
                "right": false
              },
              {
                "answer": "Improved physics",
                "right": false
              },
              {
                "answer": "Simplified animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does an 'InputActionAsset' store in Unity’s new Input System?",
            "short_title": "InputActionAsset",
            "answers": [
              {
                "answer": "A collection of input actions and bindings",
                "right": true
              },
              {
                "answer": "Physics settings",
                "right": false
              },
              {
                "answer": "Rendering configurations",
                "right": false
              },
              {
                "answer": "Animation clips",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'PlayerInput' in Unity’s new Input System?",
            "short_title": "PlayerInput purpose",
            "answers": [
              {
                "answer": "Links input actions to game logic for a player",
                "right": true
              },
              {
                "answer": "Renders input visuals",
                "right": false
              },
              {
                "answer": "Manages physics input",
                "right": false
              },
              {
                "answer": "Handles animation input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputActionMap' organize in Unity?",
            "short_title": "InputActionMap",
            "answers": [
              {
                "answer": "Groups related input actions for specific contexts",
                "right": true
              },
              {
                "answer": "Maps physics controls",
                "right": false
              },
              {
                "answer": "Renders UI maps",
                "right": false
              },
              {
                "answer": "Controls animation states",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'InputDevice' in the new Input System?",
            "short_title": "InputDevice",
            "answers": [
              {
                "answer": "Represents a physical input device like a controller",
                "right": true
              },
              {
                "answer": "Manages rendering devices",
                "right": false
              },
              {
                "answer": "Handles physics devices",
                "right": false
              },
              {
                "answer": "Controls animation devices",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputAction.performed' callback indicate?",
            "short_title": "performed callback",
            "answers": [
              {
                "answer": "The action has been fully executed",
                "right": true
              },
              {
                "answer": "The action was canceled",
                "right": false
              },
              {
                "answer": "The action started",
                "right": false
              },
              {
                "answer": "The action failed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputSystem.onDeviceChange' in Unity?",
            "short_title": "onDeviceChange",
            "answers": [
              {
                "answer": "Notifies when devices are added or removed",
                "right": true
              },
              {
                "answer": "Renders device changes",
                "right": false
              },
              {
                "answer": "Stops device input",
                "right": false
              },
              {
                "answer": "Handles physics changes",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputAction.Bindings' allow in Unity?",
            "short_title": "Bindings",
            "answers": [
              {
                "answer": "Configures multiple input sources for an action",
                "right": true
              },
              {
                "answer": "Renders input visuals",
                "right": false
              },
              {
                "answer": "Manages physics bindings",
                "right": false
              },
              {
                "answer": "Controls animation bindings",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'InputControlPath' in the new Input System?",
            "short_title": "InputControlPath",
            "answers": [
              {
                "answer": "Matches specific controls across devices",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.QueueStateEvent()' do in Unity?",
            "short_title": "QueueStateEvent",
            "answers": [
              {
                "answer": "Queues a custom state change for an input device",
                "right": true
              },
              {
                "answer": "Renders a state",
                "right": false
              },
              {
                "answer": "Stops input",
                "right": false
              },
              {
                "answer": "Manages physics states",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputAction.Rebind()' in Unity?",
            "short_title": "Rebind()",
            "answers": [
              {
                "answer": "Dynamically changes an action’s binding at runtime",
                "right": true
              },
              {
                "answer": "Rebinds physics controls",
                "right": false
              },
              {
                "answer": "Renders input UI",
                "right": false
              },
              {
                "answer": "Handles animation rebinding",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerInputManager' manage in Unity?",
            "short_title": "PlayerInputManager",
            "answers": [
              {
                "answer": "Multiplayer input and player joining",
                "right": true
              },
              {
                "answer": "Single-player rendering",
                "right": false
              },
              {
                "answer": "Physics simulation",
                "right": false
              },
              {
                "answer": "Animation states",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'InputActionPhase' in the new Input System?",
            "short_title": "InputActionPhase",
            "answers": [
              {
                "answer": "Tracks the current stage of an action (e.g., started, performed)",
                "right": true
              },
              {
                "answer": "Controls rendering phases",
                "right": false
              },
              {
                "answer": "Manages physics phases",
                "right": false
              },
              {
                "answer": "Handles animation phases",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.GetDevice()' allow in Unity?",
            "short_title": "GetDevice",
            "answers": [
              {
                "answer": "Retrieves a specific input device by type",
                "right": true
              },
              {
                "answer": "Renders device visuals",
                "right": false
              },
              {
                "answer": "Stops device input",
                "right": false
              },
              {
                "answer": "Controls physics devices",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputAction.CallbackContext' in Unity?",
            "short_title": "CallbackContext",
            "answers": [
              {
                "answer": "Provides details about the action’s execution",
                "right": true
              },
              {
                "answer": "Handles physics callbacks",
                "right": false
              },
              {
                "answer": "Renders input",
                "right": false
              },
              {
                "answer": "Manages animation callbacks",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.settings' configure in Unity?",
            "short_title": "InputSystem.settings",
            "answers": [
              {
                "answer": "Global input system behaviors like update mode",
                "right": true
              },
              {
                "answer": "Rendering settings",
                "right": false
              },
              {
                "answer": "Physics settings",
                "right": false
              },
              {
                "answer": "Animation settings",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'InputAction.interactions' in Unity?",
            "short_title": "Interactions",
            "answers": [
              {
                "answer": "Customizes how input triggers (e.g., hold, tap)",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.onActionChange' monitor in Unity?",
            "short_title": "onActionChange",
            "answers": [
              {
                "answer": "Changes in action states or bindings",
                "right": true
              },
              {
                "answer": "Rendering changes",
                "right": false
              },
              {
                "answer": "Physics updates",
                "right": false
              },
              {
                "answer": "Animation transitions",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputControlScheme' in the new Input System?",
            "short_title": "InputControlScheme",
            "answers": [
              {
                "answer": "Defines device-specific control layouts",
                "right": true
              },
              {
                "answer": "Controls rendering schemes",
                "right": false
              },
              {
                "answer": "Manages physics schemes",
                "right": false
              },
              {
                "answer": "Handles animation schemes",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerInput.Instantiate()' do in Unity?",
            "short_title": "PlayerInput.Instantiate",
            "answers": [
              {
                "answer": "Creates a new player with input configuration",
                "right": true
              },
              {
                "answer": "Renders a player",
                "right": false
              },
              {
                "answer": "Stops input",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          }
        ],
        "Memory Management and Profiling": [
          {
            "title": "What does 'System.Buffers.ArrayPool<T>' optimize in Unity?",
            "short_title": "ArrayPool<T>",
            "answers": [
              {
                "answer": "Reduces garbage by reusing arrays",
                "right": true
              },
              {
                "answer": "Improves rendering speed",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'GC.TryStartNoGCRegion()' in C#?",
            "short_title": "TryStartNoGCRegion",
            "answers": [
              {
                "answer": "Prevents GC during critical operations",
                "right": true
              },
              {
                "answer": "Forces immediate GC",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Unity Profiler’s 'Memory' tab analyze?",
            "short_title": "Memory tab",
            "answers": [
              {
                "answer": "Heap allocations and object references",
                "right": true
              },
              {
                "answer": "Physics performance",
                "right": false
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Animation states",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Object Pooling' in Unity?",
            "short_title": "Object Pooling",
            "answers": [
              {
                "answer": "Minimizes allocations by reusing objects",
                "right": true
              },
              {
                "answer": "Improves physics accuracy",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.GC.AddMemoryPressure()' indicate in C#?",
            "short_title": "AddMemoryPressure",
            "answers": [
              {
                "answer": "Hints to the GC about external memory usage",
                "right": true
              },
              {
                "answer": "Forces rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Deep Profile' mode in Unity Profiler?",
            "short_title": "Deep Profile",
            "answers": [
              {
                "answer": "Provides detailed call stack data",
                "right": true
              },
              {
                "answer": "Renders profiles",
                "right": false
              },
              {
                "answer": "Handles physics profiling",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'StructLayoutAttribute' optimize in C#?",
            "short_title": "StructLayoutAttribute",
            "answers": [
              {
                "answer": "Controls memory layout for interop or performance",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the impact of 'boxing' in Unity’s performance?",
            "short_title": "Boxing impact",
            "answers": [
              {
                "answer": "Generates heap allocations and GC pressure",
                "right": true
              },
              {
                "answer": "Improves physics speed",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'MemoryProfiler' package provide in Unity?",
            "short_title": "MemoryProfiler",
            "answers": [
              {
                "answer": "Detailed memory snapshots and leak detection",
                "right": true
              },
              {
                "answer": "Physics optimization",
                "right": false
              },
              {
                "answer": "Rendering analysis",
                "right": false
              },
              {
                "answer": "Animation profiling",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'WeakReference' in C#?",
            "short_title": "WeakReference",
            "answers": [
              {
                "answer": "Allows GC to collect an object while referenced",
                "right": true
              },
              {
                "answer": "Forces memory allocation",
                "right": false
              },
              {
                "answer": "Renders weak objects",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.Release()' do in Unity?",
            "short_title": "Addressables.Release()",
            "answers": [
              {
                "answer": "Frees memory by releasing an asset",
                "right": true
              },
              {
                "answer": "Loads an asset",
                "right": false
              },
              {
                "answer": "Renders an asset",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'NativeArray<T>' in Unity?",
            "short_title": "NativeArray<T>",
            "answers": [
              {
                "answer": "Unmanaged memory for high-performance tasks",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GC.GetTotalMemory()' return in C#?",
            "short_title": "GetTotalMemory",
            "answers": [
              {
                "answer": "Approximate bytes allocated in managed memory",
                "right": true
              },
              {
                "answer": "Physics memory usage",
                "right": false
              },
              {
                "answer": "Rendering memory",
                "right": false
              },
              {
                "answer": "Animation memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ProfilerMarker' in Unity?",
            "short_title": "ProfilerMarker",
            "answers": [
              {
                "answer": "Marks custom code sections for profiling",
                "right": true
              },
              {
                "answer": "Renders markers",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetBundle.Unload(true)' do in Unity?",
            "short_title": "AssetBundle.Unload(true)",
            "answers": [
              {
                "answer": "Unloads the bundle and all loaded assets",
                "right": true
              },
              {
                "answer": "Loads a new bundle",
                "right": false
              },
              {
                "answer": "Renders assets",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'stackalloc' in C# for Unity?",
            "short_title": "stackalloc",
            "answers": [
              {
                "answer": "Allocates memory on the stack, avoiding GC",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngine.Profiling.Profiler' provide?",
            "short_title": "Unity Profiler",
            "answers": [
              {
                "answer": "Low-level profiling for performance analysis",
                "right": true
              },
              {
                "answer": "Rendering controls",
                "right": false
              },
              {
                "answer": "Physics management",
                "right": false
              },
              {
                "answer": "Animation tools",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Resources.UnloadUnusedAssets()' in Unity?",
            "short_title": "UnloadUnusedAssets",
            "answers": [
              {
                "answer": "Frees memory by unloading unused Resources",
                "right": true
              },
              {
                "answer": "Loads new assets",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'MemoryStream' optimize in C#?",
            "short_title": "MemoryStream",
            "answers": [
              {
                "answer": "In-memory data manipulation without allocations",
                "right": true
              },
              {
                "answer": "Physics streaming",
                "right": false
              },
              {
                "answer": "Rendering streams",
                "right": false
              },
              {
                "answer": "Animation streaming",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'StructLayout.Sequential' in Unity?",
            "short_title": "StructLayout.Sequential",
            "answers": [
              {
                "answer": "Ensures predictable memory layout for optimization",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops GC",
                "right": false
              }
            ]
          }
        ],
        "Scene Management and Load Optimization": [
          {
            "title": "What does 'SceneManager.LoadSceneAsync()' do in Unity?",
            "short_title": "LoadSceneAsync",
            "answers": [
              {
                "answer": "Loads a scene asynchronously in the background",
                "right": true
              },
              {
                "answer": "Loads a scene synchronously",
                "right": false
              },
              {
                "answer": "Unloads a scene",
                "right": false
              },
              {
                "answer": "Renders a scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'LoadSceneMode.Additive' in Unity?",
            "short_title": "Additive mode",
            "answers": [
              {
                "answer": "Loads a scene alongside the current one",
                "right": true
              },
              {
                "answer": "Replaces the current scene",
                "right": false
              },
              {
                "answer": "Stops scene loading",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.UnloadSceneAsync()' achieve in Unity?",
            "short_title": "UnloadSceneAsync",
            "answers": [
              {
                "answer": "Unloads a scene asynchronously to free memory",
                "right": true
              },
              {
                "answer": "Loads a new scene",
                "right": false
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'AsyncOperation' with scene loading?",
            "short_title": "AsyncOperation",
            "answers": [
              {
                "answer": "Provides control and progress tracking for loading",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders scenes faster",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.GetActiveScene()' return in Unity?",
            "short_title": "GetActiveScene",
            "answers": [
              {
                "answer": "The currently active scene",
                "right": true
              },
              {
                "answer": "All loaded scenes",
                "right": false
              },
              {
                "answer": "The physics scene",
                "right": false
              },
              {
                "answer": "The rendering scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SceneManager.sceneLoaded' delegate?",
            "short_title": "sceneLoaded",
            "answers": [
              {
                "answer": "Notifies when a scene finishes loading",
                "right": true
              },
              {
                "answer": "Stops scene loading",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'LoadSceneMode.Single' do in Unity?",
            "short_title": "Single mode",
            "answers": [
              {
                "answer": "Replaces all loaded scenes with a new one",
                "right": true
              },
              {
                "answer": "Adds a scene to the current ones",
                "right": false
              },
              {
                "answer": "Unloads all scenes",
                "right": false
              },
              {
                "answer": "Pauses the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Addressables.LoadSceneAsync()' over 'SceneManager.LoadSceneAsync()'?",
            "short_title": "Addressables.LoadSceneAsync",
            "answers": [
              {
                "answer": "Loads scenes with better memory management",
                "right": true
              },
              {
                "answer": "Loads scenes faster",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.SetActiveScene()' do in Unity?",
            "short_title": "SetActiveScene",
            "answers": [
              {
                "answer": "Sets the primary scene for rendering and updates",
                "right": true
              },
              {
                "answer": "Unloads a scene",
                "right": false
              },
              {
                "answer": "Loads a new scene",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SceneUtility.GetBuildIndexByScenePath()'?",
            "short_title": "GetBuildIndexByScenePath",
            "answers": [
              {
                "answer": "Gets the build index of a scene by its path",
                "right": true
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops scene loading",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AsyncOperation.allowSceneActivation' control?",
            "short_title": "allowSceneActivation",
            "answers": [
              {
                "answer": "Whether the loaded scene activates immediately",
                "right": true
              },
              {
                "answer": "The rendering speed",
                "right": false
              },
              {
                "answer": "The physics simulation",
                "right": false
              },
              {
                "answer": "The animation playback",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of unloading scenes in Unity?",
            "short_title": "Unloading scenes",
            "answers": [
              {
                "answer": "Frees memory and reduces resource usage",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.GetSceneAt()' return in Unity?",
            "short_title": "GetSceneAt",
            "answers": [
              {
                "answer": "A loaded scene by its index",
                "right": true
              },
              {
                "answer": "The active camera",
                "right": false
              },
              {
                "answer": "The physics settings",
                "right": false
              },
              {
                "answer": "The rendering pipeline",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SceneManager.sceneCountInBuildSettings'?",
            "short_title": "sceneCountInBuildSettings",
            "answers": [
              {
                "answer": "Returns the number of scenes in the build",
                "right": true
              },
              {
                "answer": "Counts active scenes",
                "right": false
              },
              {
                "answer": "Renders scene count",
                "right": false
              },
              {
                "answer": "Manages physics scenes",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.UnloadSceneAsync()' optimize?",
            "short_title": "UnloadSceneAsync",
            "answers": [
              {
                "answer": "Memory usage by unloading scenes and assets",
                "right": true
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Physics performance",
                "right": false
              },
              {
                "answer": "Animation playback",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'SceneManager.MoveGameObjectToScene()'?",
            "short_title": "MoveGameObjectToScene",
            "answers": [
              {
                "answer": "Transfers a GameObject to another loaded scene",
                "right": true
              },
              {
                "answer": "Renders a GameObject",
                "right": false
              },
              {
                "answer": "Stops a GameObject",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AsyncOperation.progress' indicate in Unity?",
            "short_title": "AsyncOperation.progress",
            "answers": [
              {
                "answer": "The loading progress as a value from 0 to 1",
                "right": true
              },
              {
                "answer": "The rendering progress",
                "right": false
              },
              {
                "answer": "The physics progress",
                "right": false
              },
              {
                "answer": "The animation progress",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SceneManager.sceneUnloaded' delegate?",
            "short_title": "sceneUnloaded",
            "answers": [
              {
                "answer": "Notifies when a scene is fully unloaded",
                "right": true
              },
              {
                "answer": "Loads a scene",
                "right": false
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.CreateScene()' do in Unity?",
            "short_title": "CreateScene",
            "answers": [
              {
                "answer": "Creates a new scene in memory at runtime",
                "right": true
              },
              {
                "answer": "Renders a new scene",
                "right": false
              },
              {
                "answer": "Unloads a scene",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'SceneManager.LoadSceneAsync()' with priority?",
            "short_title": "LoadSceneAsync priority",
            "answers": [
              {
                "answer": "Controls loading order for multiple scenes",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops input",
                "right": false
              }
            ]
          }
        ],
        "Matrices": [
          {
            "title": "What is a matrix in the context of game development?",
            "short_title": "Matrix definition",
            "answers": [
              {
                "answer": "A grid of numbers for transformations",
                "right": true
              },
              {
                "answer": "A single vector",
                "right": false
              },
              {
                "answer": "A rendering tool",
                "right": false
              },
              {
                "answer": "A looping structure",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity type represents a 4x4 matrix?",
            "short_title": "Unity 4x4 matrix",
            "answers": [
              {
                "answer": "Matrix4x4",
                "right": true
              },
              {
                "answer": "Vector4",
                "right": false
              },
              {
                "answer": "Matrix3x3",
                "right": false
              },
              {
                "answer": "Quaternion",
                "right": false
              }
            ]
          },
          {
            "title": "What does matrix multiplication do in Unity?",
            "short_title": "Matrix multiplication",
            "answers": [
              {
                "answer": "Combines transformations",
                "right": true
              },
              {
                "answer": "Adds matrices",
                "right": false
              },
              {
                "answer": "Subtracts matrices",
                "right": false
              },
              {
                "answer": "Renders matrices",
                "right": false
              }
            ]
          },
          {
            "title": "How do you multiply two matrices in Unity?",
            "short_title": "Multiply matrices",
            "answers": [
              {
                "answer": "Using the '*' operator",
                "right": true
              },
              {
                "answer": "Using Matrix4x4.Add()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Dot()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Cross()",
                "right": false
              }
            ]
          },
          {
            "title": "What does a 4x4 matrix typically represent in Unity?",
            "short_title": "4x4 matrix use",
            "answers": [
              {
                "answer": "Position, rotation, and scale",
                "right": true
              },
              {
                "answer": "Only position",
                "right": false
              },
              {
                "answer": "Only rotation",
                "right": false
              },
              {
                "answer": "Only scale",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.identity' represent?",
            "short_title": "Matrix4x4.identity",
            "answers": [
              {
                "answer": "A matrix with no transformation",
                "right": true
              },
              {
                "answer": "A zero matrix",
                "right": false
              },
              {
                "answer": "A random matrix",
                "right": false
              },
              {
                "answer": "A rendered matrix",
                "right": false
              }
            ]
          },
          {
            "title": "How do you create a rotation matrix in Unity?",
            "short_title": "Rotation matrix",
            "answers": [
              {
                "answer": "Using Matrix4x4.Rotate()",
                "right": true
              },
              {
                "answer": "Using Matrix4x4.Move()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Scale()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Position()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.TRS()' create?",
            "short_title": "Matrix4x4.TRS",
            "answers": [
              {
                "answer": "A matrix from Translation, Rotation, Scale",
                "right": true
              },
              {
                "answer": "A translation vector",
                "right": false
              },
              {
                "answer": "A scaling factor",
                "right": false
              },
              {
                "answer": "A rendered matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for matrices?",
            "short_title": "Matrix use",
            "answers": [
              {
                "answer": "Transforming object positions",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.inverse' return?",
            "short_title": "Matrix4x4.inverse",
            "answers": [
              {
                "answer": "The inverse of the matrix",
                "right": true
              },
              {
                "answer": "The original matrix",
                "right": false
              },
              {
                "answer": "A zero matrix",
                "right": false
              },
              {
                "answer": "A transposed matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What does the inverse matrix do in Unity?",
            "short_title": "Inverse matrix",
            "answers": [
              {
                "answer": "Reverses a transformation",
                "right": true
              },
              {
                "answer": "Doubles a transformation",
                "right": false
              },
              {
                "answer": "Renders a transformation",
                "right": false
              },
              {
                "answer": "Stops a transformation",
                "right": false
              }
            ]
          },
          {
            "title": "How do you apply a matrix to a vector in Unity?",
            "short_title": "Matrix to vector",
            "answers": [
              {
                "answer": "Using Matrix4x4.MultiplyPoint()",
                "right": true
              },
              {
                "answer": "Using Matrix4x4.Add()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Dot()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Cross()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.transpose' do?",
            "short_title": "Matrix4x4.transpose",
            "answers": [
              {
                "answer": "Swaps rows and columns",
                "right": true
              },
              {
                "answer": "Inverts the matrix",
                "right": false
              },
              {
                "answer": "Renders the matrix",
                "right": false
              },
              {
                "answer": "Scales the matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is a practical use of matrix transposition in Unity?",
            "short_title": "Transpose use",
            "answers": [
              {
                "answer": "Adjusting coordinate systems",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.determinant' calculate?",
            "short_title": "Matrix4x4.determinant",
            "answers": [
              {
                "answer": "A scalar indicating scale and invertibility",
                "right": true
              },
              {
                "answer": "The matrix’s position",
                "right": false
              },
              {
                "answer": "The matrix’s rotation",
                "right": false
              },
              {
                "answer": "The matrix’s rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What does a determinant of zero indicate?",
            "short_title": "Zero determinant",
            "answers": [
              {
                "answer": "The matrix is not invertible",
                "right": true
              },
              {
                "answer": "The matrix is identity",
                "right": false
              },
              {
                "answer": "The matrix is transposed",
                "right": false
              },
              {
                "answer": "The matrix is rendered",
                "right": false
              }
            ]
          },
          {
            "title": "How do you scale a GameObject using a matrix in Unity?",
            "short_title": "Scale with matrix",
            "answers": [
              {
                "answer": "Using Matrix4x4.Scale()",
                "right": true
              },
              {
                "answer": "Using Matrix4x4.Rotate()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Move()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Position()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.localToWorldMatrix' return?",
            "short_title": "localToWorldMatrix",
            "answers": [
              {
                "answer": "A matrix converting local to world space",
                "right": true
              },
              {
                "answer": "A world position",
                "right": false
              },
              {
                "answer": "A rotation quaternion",
                "right": false
              },
              {
                "answer": "A rendered matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.worldToLocalMatrix' do?",
            "short_title": "worldToLocalMatrix",
            "answers": [
              {
                "answer": "Converts world coordinates to local",
                "right": true
              },
              {
                "answer": "Renders coordinates",
                "right": false
              },
              {
                "answer": "Scales coordinates",
                "right": false
              },
              {
                "answer": "Rotates coordinates",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use of matrix multiplication?",
            "short_title": "Matrix multiply use",
            "answers": [
              {
                "answer": "Chaining transformations for animation",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          }
        ],
        "Linear Transformations": [
          {
            "title": "What is a linear transformation in the context of game development?",
            "short_title": "Linear transformation definition",
            "answers": [
              {
                "answer": "A function mapping vectors via scaling and rotation",
                "right": true
              },
              {
                "answer": "A single vector shift",
                "right": false
              },
              {
                "answer": "A rendering process",
                "right": false
              },
              {
                "answer": "A looping mechanism",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity type is commonly used for linear transformations?",
            "short_title": "Unity transformation type",
            "answers": [
              {
                "answer": "Matrix4x4",
                "right": true
              },
              {
                "answer": "Vector3",
                "right": false
              },
              {
                "answer": "Quaternion",
                "right": false
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What does a linear transformation preserve?",
            "short_title": "Preservation",
            "answers": [
              {
                "answer": "Straight lines and the origin",
                "right": true
              },
              {
                "answer": "Curved lines",
                "right": false
              },
              {
                "answer": "Random points",
                "right": false
              },
              {
                "answer": "Rendering properties",
                "right": false
              }
            ]
          },
          {
            "title": "How is scaling represented as a linear transformation in Unity?",
            "short_title": "Scaling transformation",
            "answers": [
              {
                "answer": "Using Matrix4x4.Scale()",
                "right": true
              },
              {
                "answer": "Using Matrix4x4.Rotate()",
                "right": false
              },
              {
                "answer": "Using Vector3.Move()",
                "right": false
              },
              {
                "answer": "Using Quaternion.Scale()",
                "right": false
              }
            ]
          },
          {
            "title": "What does a rotation transformation do in Unity?",
            "short_title": "Rotation transformation",
            "answers": [
              {
                "answer": "Rotates vectors around an axis",
                "right": true
              },
              {
                "answer": "Shifts vectors",
                "right": false
              },
              {
                "answer": "Scales vectors",
                "right": false
              },
              {
                "answer": "Renders vectors",
                "right": false
              }
            ]
          },
          {
            "title": "How do you create a rotation matrix in Unity?",
            "short_title": "Rotation matrix",
            "answers": [
              {
                "answer": "Using Matrix4x4.Rotate()",
                "right": true
              },
              {
                "answer": "Using Matrix4x4.Translate()",
                "right": false
              },
              {
                "answer": "Using Vector3.Rotate()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Scale()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.TransformPoint()' do?",
            "short_title": "TransformPoint",
            "answers": [
              {
                "answer": "Applies a transformation to a point",
                "right": true
              },
              {
                "answer": "Renders a point",
                "right": false
              },
              {
                "answer": "Stops a transformation",
                "right": false
              },
              {
                "answer": "Creates a point",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for linear transformations?",
            "short_title": "Transformation use",
            "answers": [
              {
                "answer": "Rotating a player character",
                "right": true
              },
              {
                "answer": "Rendering a scene",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.TRS()' combine?",
            "short_title": "Matrix4x4.TRS",
            "answers": [
              {
                "answer": "Translation, Rotation, and Scaling",
                "right": true
              },
              {
                "answer": "Translation only",
                "right": false
              },
              {
                "answer": "Rotation only",
                "right": false
              },
              {
                "answer": "Scaling only",
                "right": false
              }
            ]
          },
          {
            "title": "How do you reverse a linear transformation in Unity?",
            "short_title": "Reverse transformation",
            "answers": [
              {
                "answer": "Using Matrix4x4.inverse",
                "right": true
              },
              {
                "answer": "Using Matrix4x4.transpose",
                "right": false
              },
              {
                "answer": "Using Vector3.Reverse()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.zero",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.InverseTransformPoint()' do?",
            "short_title": "InverseTransformPoint",
            "answers": [
              {
                "answer": "Converts a world point to local space",
                "right": true
              },
              {
                "answer": "Renders a point",
                "right": false
              },
              {
                "answer": "Scales a point",
                "right": false
              },
              {
                "answer": "Rotates a point",
                "right": false
              }
            ]
          },
          {
            "title": "What transformation does 'Matrix4x4.identity' represent?",
            "short_title": "Identity transformation",
            "answers": [
              {
                "answer": "No change to the vector",
                "right": true
              },
              {
                "answer": "A 90-degree rotation",
                "right": false
              },
              {
                "answer": "A double scaling",
                "right": false
              },
              {
                "answer": "A rendered transformation",
                "right": false
              }
            ]
          },
          {
            "title": "How do you scale an object non-uniformly in Unity?",
            "short_title": "Non-uniform scale",
            "answers": [
              {
                "answer": "Using Matrix4x4.Scale() with different x, y, z",
                "right": true
              },
              {
                "answer": "Using Matrix4x4.UniformScale()",
                "right": false
              },
              {
                "answer": "Using Vector3.ScaleUniform()",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.Rotate()",
                "right": false
              }
            ]
          },
          {
            "title": "What does multiplying a vector by a transformation matrix do?",
            "short_title": "Vector transformation",
            "answers": [
              {
                "answer": "Applies rotation, scaling, or shearing",
                "right": true
              },
              {
                "answer": "Adds the vector",
                "right": false
              },
              {
                "answer": "Subtracts the vector",
                "right": false
              },
              {
                "answer": "Renders the vector",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use of inverse transformations?",
            "short_title": "Inverse use",
            "answers": [
              {
                "answer": "Converting world to local coordinates",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.MultiplyVector()' do?",
            "short_title": "MultiplyVector",
            "answers": [
              {
                "answer": "Applies rotation and scaling to a vector",
                "right": true
              },
              {
                "answer": "Translates a vector",
                "right": false
              },
              {
                "answer": "Renders a vector",
                "right": false
              },
              {
                "answer": "Stops a vector",
                "right": false
              }
            ]
          },
          {
            "title": "What does a 3x3 matrix represent in Unity compared to 4x4?",
            "short_title": "3x3 vs 4x4",
            "answers": [
              {
                "answer": "Rotation and scaling without translation",
                "right": true
              },
              {
                "answer": "Full transformation",
                "right": false
              },
              {
                "answer": "Translation only",
                "right": false
              },
              {
                "answer": "Rendering only",
                "right": false
              }
            ]
          },
          {
            "title": "How do you combine multiple transformations in Unity?",
            "short_title": "Combine transformations",
            "answers": [
              {
                "answer": "Multiply their matrices",
                "right": true
              },
              {
                "answer": "Add their matrices",
                "right": false
              },
              {
                "answer": "Subtract their matrices",
                "right": false
              },
              {
                "answer": "Render their matrices",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.TransformDirection()' do?",
            "short_title": "TransformDirection",
            "answers": [
              {
                "answer": "Rotates a direction vector",
                "right": true
              },
              {
                "answer": "Translates a direction",
                "right": false
              },
              {
                "answer": "Scales a direction",
                "right": false
              },
              {
                "answer": "Renders a direction",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity animation use of linear transformations?",
            "short_title": "Animation use",
            "answers": [
              {
                "answer": "Blending bone rotations",
                "right": true
              },
              {
                "answer": "Rendering animations",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          }
        ],
        "Polar and Cartesian Coordinates": [
          {
            "title": "What are Cartesian coordinates in 2D game development?",
            "short_title": "Cartesian coordinates",
            "answers": [
              {
                "answer": "A position defined by x and y",
                "right": true
              },
              {
                "answer": "A position defined by r and θ",
                "right": false
              },
              {
                "answer": "A rendered position",
                "right": false
              },
              {
                "answer": "A scaled position",
                "right": false
              }
            ]
          },
          {
            "title": "What are polar coordinates in 2D?",
            "short_title": "Polar coordinates",
            "answers": [
              {
                "answer": "A position defined by radius r and angle θ",
                "right": true
              },
              {
                "answer": "A position defined by x and y",
                "right": false
              },
              {
                "answer": "A rendered angle",
                "right": false
              },
              {
                "answer": "A scaled radius",
                "right": false
              }
            ]
          },
          {
            "title": "How do you convert from Cartesian (x, y) to polar (r, θ)?",
            "short_title": "Cartesian to polar",
            "answers": [
              {
                "answer": "r = √(x² + y²), θ = atan2(y, x)",
                "right": true
              },
              {
                "answer": "r = x + y, θ = sin(x)",
                "right": false
              },
              {
                "answer": "r = x * y, θ = cos(y)",
                "right": false
              },
              {
                "answer": "r = x - y, θ = tan(x)",
                "right": false
              }
            ]
          },
          {
            "title": "How do you convert from polar (r, θ) to Cartesian (x, y)?",
            "short_title": "Polar to Cartesian",
            "answers": [
              {
                "answer": "x = r * cos(θ), y = r * sin(θ)",
                "right": true
              },
              {
                "answer": "x = r + sin(θ), y = r + cos(θ)",
                "right": false
              },
              {
                "answer": "x = r * sin(θ), y = r * cos(θ)",
                "right": false
              },
              {
                "answer": "x = r / cos(θ), y = r / sin(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity function helps calculate θ from x and y?",
            "short_title": "Calculate θ",
            "answers": [
              {
                "answer": "Mathf.Atan2()",
                "right": true
              },
              {
                "answer": "Mathf.Sin()",
                "right": false
              },
              {
                "answer": "Mathf.Cos()",
                "right": false
              },
              {
                "answer": "Mathf.Tan()",
                "right": false
              }
            ]
          },
          {
            "title": "What does r represent in polar coordinates?",
            "short_title": "r in polar",
            "answers": [
              {
                "answer": "The distance from the origin",
                "right": true
              },
              {
                "answer": "The angle from the x-axis",
                "right": false
              },
              {
                "answer": "The rendered radius",
                "right": false
              },
              {
                "answer": "The scaled distance",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for polar coordinates?",
            "short_title": "Polar use",
            "answers": [
              {
                "answer": "Spawning enemies in a circle",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "How do you calculate r from x and y in Unity?",
            "short_title": "Calculate r",
            "answers": [
              {
                "answer": "Mathf.Sqrt(x * x + y * y)",
                "right": true
              },
              {
                "answer": "Mathf.Sin(x + y)",
                "right": false
              },
              {
                "answer": "Mathf.Cos(x * y)",
                "right": false
              },
              {
                "answer": "Mathf.Atan2(x, y)",
                "right": false
              }
            ]
          },
          {
            "title": "What does θ = 0 represent in polar coordinates?",
            "short_title": "θ = 0",
            "answers": [
              {
                "answer": "The positive x-axis",
                "right": true
              },
              {
                "answer": "The positive y-axis",
                "right": false
              },
              {
                "answer": "The negative x-axis",
                "right": false
              },
              {
                "answer": "The origin",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Cartesian equivalent of (r, θ) = (1, π/2)?",
            "short_title": "Polar to Cartesian example",
            "answers": [
              {
                "answer": "(0, 1)",
                "right": true
              },
              {
                "answer": "(1, 0)",
                "right": false
              },
              {
                "answer": "(-1, 0)",
                "right": false
              },
              {
                "answer": "(0, -1)",
                "right": false
              }
            ]
          },
          {
            "title": "What is the polar equivalent of (x, y) = (1, 1)?",
            "short_title": "Cartesian to polar example",
            "answers": [
              {
                "answer": "(√2, π/4)",
                "right": true
              },
              {
                "answer": "(1, π/2)",
                "right": false
              },
              {
                "answer": "(2, 0)",
                "right": false
              },
              {
                "answer": "(√2, π)",
                "right": false
              }
            ]
          },
          {
            "title": "How do you position an object at (r, θ) in Unity?",
            "short_title": "Position at (r, θ)",
            "answers": [
              {
                "answer": "transform.position = new Vector2(r * Mathf.Cos(θ), r * Mathf.Sin(θ))",
                "right": true
              },
              {
                "answer": "transform.position = new Vector2(r, θ)",
                "right": false
              },
              {
                "answer": "transform.position = new Vector2(r * Mathf.Sin(θ), r * Mathf.Cos(θ))",
                "right": false
              },
              {
                "answer": "transform.position = new Vector2(θ, r)",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Atan2(0, -1) return?",
            "short_title": "Atan2 example",
            "answers": [
              {
                "answer": "π radians (180°)",
                "right": true
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              },
              {
                "answer": "π/2 radians (90°)",
                "right": false
              },
              {
                "answer": "-π/2 radians (-90°)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity UI use of polar coordinates?",
            "short_title": "UI use",
            "answers": [
              {
                "answer": "Creating a radial menu",
                "right": true
              },
              {
                "answer": "Rendering UI",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping UI",
                "right": false
              }
            ]
          },
          {
            "title": "How do you calculate the angle between two points in Unity?",
            "short_title": "Angle between points",
            "answers": [
              {
                "answer": "Mathf.Atan2(y2 - y1, x2 - x1)",
                "right": true
              },
              {
                "answer": "Mathf.Sin(x2 - x1)",
                "right": false
              },
              {
                "answer": "Mathf.Cos(y2 - y1)",
                "right": false
              },
              {
                "answer": "Mathf.Tan(x2 + y2)",
                "right": false
              }
            ]
          },
          {
            "title": "What does r = 0 represent in polar coordinates?",
            "short_title": "r = 0",
            "answers": [
              {
                "answer": "The origin (0, 0)",
                "right": true
              },
              {
                "answer": "The x-axis",
                "right": false
              },
              {
                "answer": "The y-axis",
                "right": false
              },
              {
                "answer": "A rendered point",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity enemy use of polar coordinates?",
            "short_title": "Enemy use",
            "answers": [
              {
                "answer": "Spawning enemies around a boss",
                "right": true
              },
              {
                "answer": "Rendering enemies",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "How do you create a circular path in Unity with polar coordinates?",
            "short_title": "Circular path",
            "answers": [
              {
                "answer": "Vary θ with constant r",
                "right": true
              },
              {
                "answer": "Vary r with constant θ",
                "right": false
              },
              {
                "answer": "Vary x with constant y",
                "right": false
              },
              {
                "answer": "Vary y with constant x",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector2.magnitude' relate to in polar coordinates?",
            "short_title": "Vector2.magnitude",
            "answers": [
              {
                "answer": "The radius r",
                "right": true
              },
              {
                "answer": "The angle θ",
                "right": false
              },
              {
                "answer": "The rendered magnitude",
                "right": false
              },
              {
                "answer": "The scaled radius",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity procedural use of polar coordinates?",
            "short_title": "Procedural use",
            "answers": [
              {
                "answer": "Generating radial patterns",
                "right": true
              },
              {
                "answer": "Rendering patterns",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          }
        ],
        "Angles and Rotations in 2D": [
          {
            "title": "What does an angle represent in 2D game development?",
            "short_title": "Angle definition",
            "answers": [
              {
                "answer": "The rotation between two directions",
                "right": true
              },
              {
                "answer": "A distance",
                "right": false
              },
              {
                "answer": "A rendering factor",
                "right": false
              },
              {
                "answer": "A scaling value",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity type is commonly used for 2D positions?",
            "short_title": "2D position type",
            "answers": [
              {
                "answer": "Vector2",
                "right": true
              },
              {
                "answer": "Vector3",
                "right": false
              },
              {
                "answer": "Quaternion",
                "right": false
              },
              {
                "answer": "Matrix4x4",
                "right": false
              }
            ]
          },
          {
            "title": "How do you convert degrees to radians in Unity?",
            "short_title": "Degrees to radians",
            "answers": [
              {
                "answer": "Multiply by Mathf.Deg2Rad",
                "right": true
              },
              {
                "answer": "Multiply by Mathf.Rad2Deg",
                "right": false
              },
              {
                "answer": "Divide by π",
                "right": false
              },
              {
                "answer": "Add π",
                "right": false
              }
            ]
          },
          {
            "title": "How do you convert radians to degrees in Unity?",
            "short_title": "Radians to degrees",
            "answers": [
              {
                "answer": "Multiply by Mathf.Rad2Deg",
                "right": true
              },
              {
                "answer": "Multiply by Mathf.Deg2Rad",
                "right": false
              },
              {
                "answer": "Divide by 180",
                "right": false
              },
              {
                "answer": "Subtract π",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Sin() help calculate for rotations?",
            "short_title": "Sine in rotation",
            "answers": [
              {
                "answer": "The y-component of a rotated point",
                "right": true
              },
              {
                "answer": "The x-component only",
                "right": false
              },
              {
                "answer": "The rendered rotation",
                "right": false
              },
              {
                "answer": "The scaling factor",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Cos() determine in 2D rotations?",
            "short_title": "Cosine in rotation",
            "answers": [
              {
                "answer": "The x-component of a rotated point",
                "right": true
              },
              {
                "answer": "The y-component only",
                "right": false
              },
              {
                "answer": "The rendered angle",
                "right": false
              },
              {
                "answer": "The rotation speed",
                "right": false
              }
            ]
          },
          {
            "title": "How do you rotate a point (x, y) by angle θ in 2D?",
            "short_title": "Rotate point",
            "answers": [
              {
                "answer": "x’ = x*cos(θ) - y*sin(θ), y’ = x*sin(θ) + y*cos(θ)",
                "right": true
              },
              {
                "answer": "x’ = x + sin(θ), y’ = y + cos(θ)",
                "right": false
              },
              {
                "answer": "x’ = x * sin(θ), y’ = y * cos(θ)",
                "right": false
              },
              {
                "answer": "x’ = x - cos(θ), y’ = y - sin(θ)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for 2D rotations?",
            "short_title": "2D rotation use",
            "answers": [
              {
                "answer": "Rotating a sprite to face a direction",
                "right": true
              },
              {
                "answer": "Rendering a scene",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.Rotate()' do in 2D Unity?",
            "short_title": "Transform.Rotate",
            "answers": [
              {
                "answer": "Rotates around the Z-axis",
                "right": true
              },
              {
                "answer": "Rotates around the X-axis",
                "right": false
              },
              {
                "answer": "Rotates around the Y-axis",
                "right": false
              },
              {
                "answer": "Renders a rotation",
                "right": false
              }
            ]
          },
          {
            "title": "How do you set a sprite’s rotation in Unity?",
            "short_title": "Sprite rotation",
            "answers": [
              {
                "answer": "Set transform.eulerAngles.z",
                "right": true
              },
              {
                "answer": "Set transform.position.z",
                "right": false
              },
              {
                "answer": "Set transform.scale.z",
                "right": false
              },
              {
                "answer": "Set transform.quaternion",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Mathf.Atan2(y, x)' calculate?",
            "short_title": "Mathf.Atan2",
            "answers": [
              {
                "answer": "The angle from the x-axis to point (x, y)",
                "right": true
              },
              {
                "answer": "The tangent of x",
                "right": false
              },
              {
                "answer": "The sine of y",
                "right": false
              },
              {
                "answer": "The rendered angle",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use of Mathf.Atan2()?",
            "short_title": "Atan2 use",
            "answers": [
              {
                "answer": "Aiming a turret at a target",
                "right": true
              },
              {
                "answer": "Rendering a turret",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What angle does Mathf.Atan2(1, 0) return?",
            "short_title": "Atan2(1, 0)",
            "answers": [
              {
                "answer": "π/2 radians (90°)",
                "right": true
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              },
              {
                "answer": "π radians (180°)",
                "right": false
              },
              {
                "answer": "-π/2 radians (-90°)",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Mathf.DeltaAngle()' calculate?",
            "short_title": "DeltaAngle",
            "answers": [
              {
                "answer": "The shortest angle between two angles",
                "right": true
              },
              {
                "answer": "The sum of two angles",
                "right": false
              },
              {
                "answer": "The rendered angle",
                "right": false
              },
              {
                "answer": "The scaled angle",
                "right": false
              }
            ]
          },
          {
            "title": "How do you rotate a Vector2 by an angle in Unity?",
            "short_title": "Rotate Vector2",
            "answers": [
              {
                "answer": "Using Mathf.Sin() and Mathf.Cos()",
                "right": true
              },
              {
                "answer": "Using Vector2.Rotate()",
                "right": false
              },
              {
                "answer": "Using Vector2.Add()",
                "right": false
              },
              {
                "answer": "Using Vector2.Scale()",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity UI use of 2D rotations?",
            "short_title": "UI rotation use",
            "answers": [
              {
                "answer": "Animating a spinning HUD element",
                "right": true
              },
              {
                "answer": "Rendering UI",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does an angle of 0° represent in Unity’s 2D space?",
            "short_title": "Angle 0°",
            "answers": [
              {
                "answer": "Positive x-axis",
                "right": true
              },
              {
                "answer": "Positive y-axis",
                "right": false
              },
              {
                "answer": "Negative x-axis",
                "right": false
              },
              {
                "answer": "Negative y-axis",
                "right": false
              }
            ]
          },
          {
            "title": "How do you calculate a circular path in Unity?",
            "short_title": "Circular path",
            "answers": [
              {
                "answer": "x = r*cos(θ), y = r*sin(θ)",
                "right": true
              },
              {
                "answer": "x = r + cos(θ), y = r + sin(θ)",
                "right": false
              },
              {
                "answer": "x = r*sin(θ), y = r*cos(θ)",
                "right": false
              },
              {
                "answer": "x = r*tan(θ), y = r",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Mathf.Repeat()' help with in rotations?",
            "short_title": "Mathf.Repeat",
            "answers": [
              {
                "answer": "Keeps angles within 0 to 360°",
                "right": true
              },
              {
                "answer": "Renders angles",
                "right": false
              },
              {
                "answer": "Scales angles",
                "right": false
              },
              {
                "answer": "Stops angles",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity enemy use of 2D rotations?",
            "short_title": "Enemy rotation use",
            "answers": [
              {
                "answer": "Rotating to face the player",
                "right": true
              },
              {
                "answer": "Rendering enemies",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          }
        ],
        "Quaternions": [
          {
            "title": "What is a quaternion in the context of game development?",
            "short_title": "Quaternion definition",
            "answers": [
              {
                "answer": "A 4D structure for representing rotations",
                "right": true
              },
              {
                "answer": "A 3D vector",
                "right": false
              },
              {
                "answer": "A rendering tool",
                "right": false
              },
              {
                "answer": "A scaling factor",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity type represents a quaternion?",
            "short_title": "Unity quaternion type",
            "answers": [
              {
                "answer": "Quaternion",
                "right": true
              },
              {
                "answer": "Vector3",
                "right": false
              },
              {
                "answer": "Matrix4x4",
                "right": false
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What does a quaternion avoid that Euler angles suffer from?",
            "short_title": "Quaternion advantage",
            "answers": [
              {
                "answer": "Gimbal lock",
                "right": true
              },
              {
                "answer": "Scaling issues",
                "right": false
              },
              {
                "answer": "Translation errors",
                "right": false
              },
              {
                "answer": "Rendering problems",
                "right": false
              }
            ]
          },
          {
            "title": "How do you create a quaternion for rotation in Unity?",
            "short_title": "Create quaternion",
            "answers": [
              {
                "answer": "Using Quaternion.Euler()",
                "right": true
              },
              {
                "answer": "Using Quaternion.Vector()",
                "right": false
              },
              {
                "answer": "Using Quaternion.Matrix()",
                "right": false
              },
              {
                "answer": "Using Quaternion.Scale()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Quaternion.identity' represent?",
            "short_title": "Quaternion.identity",
            "answers": [
              {
                "answer": "No rotation",
                "right": true
              },
              {
                "answer": "A 90-degree rotation",
                "right": false
              },
              {
                "answer": "A full rotation",
                "right": false
              },
              {
                "answer": "A rendered rotation",
                "right": false
              }
            ]
          },
          {
            "title": "How do you apply a quaternion rotation to a GameObject?",
            "short_title": "Apply quaternion",
            "answers": [
              {
                "answer": "Set Transform.rotation",
                "right": true
              },
              {
                "answer": "Set Transform.position",
                "right": false
              },
              {
                "answer": "Set Transform.scale",
                "right": false
              },
              {
                "answer": "Set GameObject.rotate",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Quaternion.Slerp()' do?",
            "short_title": "Quaternion.Slerp",
            "answers": [
              {
                "answer": "Interpolates between two rotations",
                "right": true
              },
              {
                "answer": "Creates a new rotation",
                "right": false
              },
              {
                "answer": "Renders a rotation",
                "right": false
              },
              {
                "answer": "Stops a rotation",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for quaternion interpolation?",
            "short_title": "Interpolation use",
            "answers": [
              {
                "answer": "Smoothly rotating a camera",
                "right": true
              },
              {
                "answer": "Rendering a scene",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Quaternion.Angle()' calculate?",
            "short_title": "Quaternion.Angle",
            "answers": [
              {
                "answer": "The angle between two rotations",
                "right": true
              },
              {
                "answer": "The magnitude of a quaternion",
                "right": false
              },
              {
                "answer": "The direction of rotation",
                "right": false
              },
              {
                "answer": "The rendered angle",
                "right": false
              }
            ]
          },
          {
            "title": "How do you multiply two quaternions in Unity?",
            "short_title": "Multiply quaternions",
            "answers": [
              {
                "answer": "Using the '*' operator",
                "right": true
              },
              {
                "answer": "Using Quaternion.Add()",
                "right": false
              },
              {
                "answer": "Using Quaternion.Dot()",
                "right": false
              },
              {
                "answer": "Using Quaternion.Cross()",
                "right": false
              }
            ]
          },
          {
            "title": "What does quaternion multiplication represent?",
            "short_title": "Quaternion multiplication",
            "answers": [
              {
                "answer": "Combining two rotations",
                "right": true
              },
              {
                "answer": "Adding their angles",
                "right": false
              },
              {
                "answer": "Subtracting rotations",
                "right": false
              },
              {
                "answer": "Rendering rotations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Quaternion.FromToRotation()' do?",
            "short_title": "FromToRotation",
            "answers": [
              {
                "answer": "Creates a rotation from one direction to another",
                "right": true
              },
              {
                "answer": "Renders a rotation",
                "right": false
              },
              {
                "answer": "Stops a rotation",
                "right": false
              },
              {
                "answer": "Scales a rotation",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity application of 'FromToRotation()'?",
            "short_title": "FromToRotation use",
            "answers": [
              {
                "answer": "Aligning an object to a surface normal",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Quaternion.LookRotation()' create?",
            "short_title": "LookRotation",
            "answers": [
              {
                "answer": "A rotation towards a direction",
                "right": true
              },
              {
                "answer": "A random rotation",
                "right": false
              },
              {
                "answer": "A rendered rotation",
                "right": false
              },
              {
                "answer": "A stopped rotation",
                "right": false
              }
            ]
          },
          {
            "title": "How do you invert a quaternion in Unity?",
            "short_title": "Invert quaternion",
            "answers": [
              {
                "answer": "Using Quaternion.inverse",
                "right": true
              },
              {
                "answer": "Using Quaternion.transpose",
                "right": false
              },
              {
                "answer": "Using Quaternion.zero",
                "right": false
              },
              {
                "answer": "Using Quaternion.reverse",
                "right": false
              }
            ]
          },
          {
            "title": "What does an inverse quaternion do?",
            "short_title": "Inverse quaternion",
            "answers": [
              {
                "answer": "Reverses the rotation",
                "right": true
              },
              {
                "answer": "Doubles the rotation",
                "right": false
              },
              {
                "answer": "Renders the rotation",
                "right": false
              },
              {
                "answer": "Stops the rotation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Quaternion.Dot()' calculate?",
            "short_title": "Quaternion.Dot",
            "answers": [
              {
                "answer": "Alignment between two quaternions",
                "right": true
              },
              {
                "answer": "Their cross product",
                "right": false
              },
              {
                "answer": "Their magnitude",
                "right": false
              },
              {
                "answer": "Their rendered value",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.RotateAround()' use internally?",
            "short_title": "RotateAround",
            "answers": [
              {
                "answer": "Quaternions for rotation",
                "right": true
              },
              {
                "answer": "Vectors only",
                "right": false
              },
              {
                "answer": "Matrices only",
                "right": false
              },
              {
                "answer": "Rendering tools",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity animation use of quaternions?",
            "short_title": "Animation use",
            "answers": [
              {
                "answer": "Smoothly interpolating bone rotations",
                "right": true
              },
              {
                "answer": "Rendering animations",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Quaternion.AngleAxis()' do?",
            "short_title": "AngleAxis",
            "answers": [
              {
                "answer": "Creates a rotation around an axis by an angle",
                "right": true
              },
              {
                "answer": "Scales a rotation",
                "right": false
              },
              {
                "answer": "Renders a rotation",
                "right": false
              },
              {
                "answer": "Stops a rotation",
                "right": false
              }
            ]
          }
        ],
        "Spatial Partitioning": [
          {
            "title": "What is the main advantage of using a uniform grid for spatial partitioning in game physics?",
            "short_title": "Uniform grid advantage",
            "answers": [
              {
                "answer": "Fast lookup and insertion in uniform environments",
                "right": true
              },
              {
                "answer": "It minimizes memory usage in sparse environments",
                "right": false
              },
              {
                "answer": "It adapts well to varying object densities",
                "right": false
              },
              {
                "answer": "It eliminates the need for hierarchical structures",
                "right": false
              }
            ]
          },
          {
            "title": "Which spatial partitioning method is best suited for handling objects that vary significantly in size?",
            "short_title": "Best for varying object sizes",
            "answers": [
              {
                "answer": "Quadtree/Octree",
                "right": true
              },
              {
                "answer": "Uniform grid",
                "right": false
              },
              {
                "answer": "Brute force collision detection",
                "right": false
              },
              {
                "answer": "Bounding Volume Hierarchies (BVH)",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main drawback of using a uniform grid for spatial partitioning?",
            "short_title": "Uniform grid drawback",
            "answers": [
              {
                "answer": "It does not perform well with non-uniform object distributions",
                "right": true
              },
              {
                "answer": "It is computationally expensive to traverse",
                "right": false
              },
              {
                "answer": "It requires complex hierarchical updates",
                "right": false
              },
              {
                "answer": "It cannot be used for collision detection",
                "right": false
              }
            ]
          },
          {
            "title": "How does a Quadtree differ from a Uniform Grid in spatial partitioning?",
            "short_title": "Quadtree vs Uniform Grid",
            "answers": [
              {
                "answer": "Quadtrees adapt to object density, while uniform grids use fixed cells",
                "right": true
              },
              {
                "answer": "Quadtrees require less memory than uniform grids in all cases",
                "right": false
              },
              {
                "answer": "Quadtrees are faster than uniform grids in all cases",
                "right": false
              },
              {
                "answer": "Uniform grids are hierarchical, while Quadtrees are not",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following is a primary advantage of a BVH over a uniform grid for spatial partitioning?",
            "short_title": "BVH advantage",
            "answers": [
              {
                "answer": "Better handling of sparse environments",
                "right": true
              },
              {
                "answer": "More efficient for handling high-speed objects",
                "right": false
              },
              {
                "answer": "Easier to implement than uniform grids",
                "right": false
              },
              {
                "answer": "Lower memory footprint in all cases",
                "right": false
              }
            ]
          }
        ],
        "Sort & Sweep": [
          {
            "title": "What is the primary advantage of the Sort & Sweep algorithm in broad-phase collision detection?",
            "short_title": "Sort & Sweep advantage",
            "answers": [
              {
                "answer": "It efficiently reduces the number of pairwise collision checks",
                "right": true
              },
              {
                "answer": "It completely eliminates the need for narrow-phase collision detection",
                "right": false
              },
              {
                "answer": "It works best in highly dynamic environments",
                "right": false
              },
              {
                "answer": "It is independent of object movement patterns",
                "right": false
              }
            ]
          },
          {
            "title": "In the Sort & Sweep algorithm, what data structure is commonly used to store the object intervals?",
            "short_title": "Sort & Sweep data structure",
            "answers": [
              {
                "answer": "A sorted list or array",
                "right": true
              },
              {
                "answer": "A hash map",
                "right": false
              },
              {
                "answer": "A quadtree",
                "right": false
              },
              {
                "answer": "A priority queue",
                "right": false
              }
            ]
          },
          {
            "title": "How does Sort & Sweep handle dynamic objects efficiently?",
            "short_title": "Handling dynamic objects",
            "answers": [
              {
                "answer": "By keeping the sorted list updated incrementally",
                "right": true
              },
              {
                "answer": "By completely re-sorting the entire list every frame",
                "right": false
              },
              {
                "answer": "By switching to a brute-force approach",
                "right": false
              },
              {
                "answer": "By using spatial hashing",
                "right": false
              }
            ]
          },
          {
            "title": "Which sorting algorithm is commonly used in Sort & Sweep for incremental updates?",
            "short_title": "Sorting algorithm in Sort & Sweep",
            "answers": [
              {
                "answer": "Insertion Sort",
                "right": true
              },
              {
                "answer": "Merge Sort",
                "right": false
              },
              {
                "answer": "Quick Sort",
                "right": false
              },
              {
                "answer": "Radix Sort",
                "right": false
              }
            ]
          },
          {
            "title": "Why does Sort & Sweep perform well in scenarios with limited movement of objects?",
            "short_title": "Sort & Sweep performance",
            "answers": [
              {
                "answer": "Because only minor updates to the sorted list are needed",
                "right": true
              },
              {
                "answer": "Because it ignores collisions between static objects",
                "right": false
              },
              {
                "answer": "Because it precomputes all collisions at the start of the simulation",
                "right": false
              },
              {
                "answer": "Because it uses parallel processing for sorting",
                "right": false
              }
            ]
          }
        ],
        "UI Systems and Optimization": [
          {
            "title": "What does 'Canvas.ForceUpdateCanvases()' do in Unity?",
            "short_title": "ForceUpdateCanvases",
            "answers": [
              {
                "answer": "Forces immediate UI layout recalculation",
                "right": true
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Stops UI updates",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UIElements' in Unity?",
            "short_title": "UIElements",
            "answers": [
              {
                "answer": "Provides a retained-mode UI system for Editor and runtime",
                "right": true
              },
              {
                "answer": "Handles physics UI",
                "right": false
              },
              {
                "answer": "Renders 3D objects",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CanvasScaler' optimize in Unity UI?",
            "short_title": "CanvasScaler",
            "answers": [
              {
                "answer": "Adapts UI to different screen resolutions",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders scenes faster",
                "right": false
              },
              {
                "answer": "Stops input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'RectTransformUtility' in Unity?",
            "short_title": "RectTransformUtility",
            "answers": [
              {
                "answer": "Provides helper methods for UI positioning",
                "right": true
              },
              {
                "answer": "Handles rendering",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CanvasGroup' control in Unity UI?",
            "short_title": "CanvasGroup",
            "answers": [
              {
                "answer": "Alpha, interaction, and raycast blocking for UI groups",
                "right": true
              },
              {
                "answer": "Physics groups",
                "right": false
              },
              {
                "answer": "Rendering groups",
                "right": false
              },
              {
                "answer": "Animation groups",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'GraphicRaycaster' in Unity?",
            "short_title": "GraphicRaycaster",
            "answers": [
              {
                "answer": "Detects pointer events on UI elements",
                "right": true
              },
              {
                "answer": "Renders graphics",
                "right": false
              },
              {
                "answer": "Handles physics raycasts",
                "right": false
              },
              {
                "answer": "Stops UI input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'LayoutRebuilder' do in Unity UI?",
            "short_title": "LayoutRebuilder",
            "answers": [
              {
                "answer": "Forces immediate layout updates for UI elements",
                "right": true
              },
              {
                "answer": "Renders layouts",
                "right": false
              },
              {
                "answer": "Manages physics layouts",
                "right": false
              },
              {
                "answer": "Handles animation layouts",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'Canvas.RenderMode.WorldSpace'?",
            "short_title": "WorldSpace mode",
            "answers": [
              {
                "answer": "Places UI in 3D space for interaction",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EventSystem' manage in Unity UI?",
            "short_title": "EventSystem",
            "answers": [
              {
                "answer": "Handles UI input events and raycasting",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Controls physics events",
                "right": false
              },
              {
                "answer": "Manages animation events",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ContentSizeFitter' in Unity UI?",
            "short_title": "ContentSizeFitter",
            "answers": [
              {
                "answer": "Adjusts UI size based on content",
                "right": true
              },
              {
                "answer": "Handles physics fitting",
                "right": false
              },
              {
                "answer": "Renders content",
                "right": false
              },
              {
                "answer": "Stops UI updates",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.batchCount' indicate in Unity?",
            "short_title": "batchCount",
            "answers": [
              {
                "answer": "Number of draw calls for the Canvas",
                "right": true
              },
              {
                "answer": "Physics batch count",
                "right": false
              },
              {
                "answer": "Animation batches",
                "right": false
              },
              {
                "answer": "Input batches",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'UIElements.USS' in Unity?",
            "short_title": "USS advantage",
            "answers": [
              {
                "answer": "Styles UI with CSS-like sheets",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.pixelPerfect' optimize?",
            "short_title": "pixelPerfect",
            "answers": [
              {
                "answer": "Ensures crisp UI rendering at pixel level",
                "right": true
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Selectable' base class in Unity UI?",
            "short_title": "Selectable",
            "answers": [
              {
                "answer": "Handles interactive UI elements like buttons",
                "right": true
              },
              {
                "answer": "Renders selectable objects",
                "right": false
              },
              {
                "answer": "Controls physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.sortingOrder' control in Unity?",
            "short_title": "sortingOrder",
            "answers": [
              {
                "answer": "The render order of UI Canvases",
                "right": true
              },
              {
                "answer": "Physics order",
                "right": false
              },
              {
                "answer": "Animation order",
                "right": false
              },
              {
                "answer": "Input order",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Dynamic Atlas' in Unity UI?",
            "short_title": "Dynamic Atlas",
            "answers": [
              {
                "answer": "Reduces draw calls by combining sprites",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UIElements.VisualElement' represent?",
            "short_title": "VisualElement",
            "answers": [
              {
                "answer": "A base class for all UIElements",
                "right": true
              },
              {
                "answer": "A physics element",
                "right": false
              },
              {
                "answer": "A rendering element",
                "right": false
              },
              {
                "answer": "An animation element",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.willRenderCanvases' event do?",
            "short_title": "willRenderCanvases",
            "answers": [
              {
                "answer": "Notifies before UI rendering occurs",
                "right": true
              },
              {
                "answer": "Stops UI rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Canvas.overrideSorting' in Unity?",
            "short_title": "overrideSorting",
            "answers": [
              {
                "answer": "Allows manual control of Canvas render order",
                "right": true
              },
              {
                "answer": "Controls physics sorting",
                "right": false
              },
              {
                "answer": "Renders UI faster",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UIElements.UXML' enable in Unity?",
            "short_title": "UXML",
            "answers": [
              {
                "answer": "Defines UI layouts with XML-like markup",
                "right": true
              },
              {
                "answer": "Handles physics layouts",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Optimizes animations",
                "right": false
              }
            ]
          }
        ],
        "Audio Systems and Effects": [
          {
            "title": "What does 'AudioMixer' manage in Unity?",
            "short_title": "AudioMixer",
            "answers": [
              {
                "answer": "Groups and mixes audio with effects",
                "right": true
              },
              {
                "answer": "Renders audio visuals",
                "right": false
              },
              {
                "answer": "Handles physics audio",
                "right": false
              },
              {
                "answer": "Manages UI sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSource.spatialBlend' in Unity?",
            "short_title": "spatialBlend",
            "answers": [
              {
                "answer": "Balances between 2D and 3D audio",
                "right": true
              },
              {
                "answer": "Controls volume",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Stops playback",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioMixer.SetFloat()' do in Unity?",
            "short_title": "SetFloat",
            "answers": [
              {
                "answer": "Adjusts an exposed parameter in the mixer",
                "right": true
              },
              {
                "answer": "Sets the audio clip",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders effects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'AudioListener' in Unity?",
            "short_title": "AudioListener",
            "answers": [
              {
                "answer": "Receives audio from AudioSources",
                "right": true
              },
              {
                "answer": "Plays audio clips",
                "right": false
              },
              {
                "answer": "Manages physics audio",
                "right": false
              },
              {
                "answer": "Renders audio visuals",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.PlayScheduled()' achieve in Unity?",
            "short_title": "PlayScheduled",
            "answers": [
              {
                "answer": "Plays audio at a precise time",
                "right": true
              },
              {
                "answer": "Stops audio",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioMixerSnapshot' in Unity?",
            "short_title": "AudioMixerSnapshot",
            "answers": [
              {
                "answer": "Stores a set of mixer settings for transitions",
                "right": true
              },
              {
                "answer": "Captures physics audio",
                "right": false
              },
              {
                "answer": "Renders snapshots",
                "right": false
              },
              {
                "answer": "Manages UI audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.spatialize' enable in Unity?",
            "short_title": "spatialize",
            "answers": [
              {
                "answer": "Applies 3D audio processing",
                "right": true
              },
              {
                "answer": "Stops 3D audio",
                "right": false
              },
              {
                "answer": "Controls 2D audio",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'AudioClip.Create()' in Unity?",
            "short_title": "AudioClip.Create",
            "answers": [
              {
                "answer": "Generates audio data at runtime",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders audio visuals",
                "right": false
              },
              {
                "answer": "Stops playback",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSettings.dspTime' provide in Unity?",
            "short_title": "dspTime",
            "answers": [
              {
                "answer": "The current audio processing time",
                "right": true
              },
              {
                "answer": "The physics time",
                "right": false
              },
              {
                "answer": "The rendering time",
                "right": false
              },
              {
                "answer": "The animation time",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioReverbFilter' in Unity?",
            "short_title": "AudioReverbFilter",
            "answers": [
              {
                "answer": "Adds reverb effects to audio",
                "right": true
              },
              {
                "answer": "Renders reverb visuals",
                "right": false
              },
              {
                "answer": "Handles physics reverb",
                "right": false
              },
              {
                "answer": "Stops audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.PlayOneShot()' do in Unity?",
            "short_title": "PlayOneShot",
            "answers": [
              {
                "answer": "Plays a clip once without interrupting the main audio",
                "right": true
              },
              {
                "answer": "Stops the main audio",
                "right": false
              },
              {
                "answer": "Renders a shot",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'AudioMixer.TransitionToSnapshots()'?",
            "short_title": "TransitionToSnapshots",
            "answers": [
              {
                "answer": "Smoothly transitions between mixer states",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops transitions",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioLowPassFilter' do in Unity?",
            "short_title": "AudioLowPassFilter",
            "answers": [
              {
                "answer": "Reduces high frequencies in audio",
                "right": true
              },
              {
                "answer": "Increases volume",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSource.GetOutputData()'?",
            "short_title": "GetOutputData",
            "answers": [
              {
                "answer": "Retrieves processed audio samples",
                "right": true
              },
              {
                "answer": "Stops audio output",
                "right": false
              },
              {
                "answer": "Renders samples",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioMixer.FindSnapshot()' do in Unity?",
            "short_title": "FindSnapshot",
            "answers": [
              {
                "answer": "Locates a named snapshot in the mixer",
                "right": true
              },
              {
                "answer": "Creates a snapshot",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Stops effects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'AudioSource.bypassEffects'?",
            "short_title": "bypassEffects",
            "answers": [
              {
                "answer": "Improves performance by skipping effects",
                "right": true
              },
              {
                "answer": "Enhances effects",
                "right": false
              },
              {
                "answer": "Renders audio faster",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioDistortionFilter' add to Unity audio?",
            "short_title": "AudioDistortionFilter",
            "answers": [
              {
                "answer": "Distorts audio with a clipping effect",
                "right": true
              },
              {
                "answer": "Improves clarity",
                "right": false
              },
              {
                "answer": "Renders distortion",
                "right": false
              },
              {
                "answer": "Stops audio",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSource.GetSpectrumData()'?",
            "short_title": "GetSpectrumData",
            "answers": [
              {
                "answer": "Analyzes audio frequency spectrum",
                "right": true
              },
              {
                "answer": "Stops spectrum analysis",
                "right": false
              },
              {
                "answer": "Renders spectrum",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSettings.outputSampleRate' control?",
            "short_title": "outputSampleRate",
            "answers": [
              {
                "answer": "The sample rate of audio output",
                "right": true
              },
              {
                "answer": "The physics rate",
                "right": false
              },
              {
                "answer": "The rendering rate",
                "right": false
              },
              {
                "answer": "The animation rate",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'AudioMixer.GetFloat()' in Unity?",
            "short_title": "GetFloat",
            "answers": [
              {
                "answer": "Reads mixer parameters for dynamic control",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops audio",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          }
        ],
        "AI and Pathfinding": [
          {
            "title": "What is the primary purpose of Unity’s NavMesh system?",
            "short_title": "NavMesh purpose",
            "answers": [
              {
                "answer": "Provides pathfinding on walkable surfaces",
                "right": true
              },
              {
                "answer": "Renders AI visuals",
                "right": false
              },
              {
                "answer": "Handles physics AI",
                "right": false
              },
              {
                "answer": "Manages UI navigation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent' do in Unity?",
            "short_title": "NavMeshAgent",
            "answers": [
              {
                "answer": "Controls an object’s movement along a NavMesh",
                "right": true
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Renders navigation",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NavMeshObstacle' in Unity?",
            "short_title": "NavMeshObstacle",
            "answers": [
              {
                "answer": "Dynamically carves holes in the NavMesh",
                "right": true
              },
              {
                "answer": "Renders obstacles",
                "right": false
              },
              {
                "answer": "Stops AI movement",
                "right": false
              },
              {
                "answer": "Manages physics obstacles",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.SetDestination()' do?",
            "short_title": "SetDestination",
            "answers": [
              {
                "answer": "Sets a target position for the agent to move to",
                "right": true
              },
              {
                "answer": "Stops the agent",
                "right": false
              },
              {
                "answer": "Renders a path",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'NavMeshLink' used for in Unity?",
            "short_title": "NavMeshLink",
            "answers": [
              {
                "answer": "Connects separate NavMesh areas",
                "right": true
              },
              {
                "answer": "Renders links",
                "right": false
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMesh.CalculatePath()' provide in Unity?",
            "short_title": "CalculatePath",
            "answers": [
              {
                "answer": "Computes a path between two points",
                "right": true
              },
              {
                "answer": "Renders a path",
                "right": false
              },
              {
                "answer": "Stops AI movement",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'NavMeshSurface' in Unity?",
            "short_title": "NavMeshSurface",
            "answers": [
              {
                "answer": "Defines a surface for baking a NavMesh",
                "right": true
              },
              {
                "answer": "Renders navigation surfaces",
                "right": false
              },
              {
                "answer": "Controls physics surfaces",
                "right": false
              },
              {
                "answer": "Manages UI surfaces",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.remainingDistance' indicate?",
            "short_title": "remainingDistance",
            "answers": [
              {
                "answer": "Distance left to the destination",
                "right": true
              },
              {
                "answer": "Total path length",
                "right": false
              },
              {
                "answer": "Rendering distance",
                "right": false
              },
              {
                "answer": "Physics distance",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Behavior Tree' used for in Unity AI?",
            "short_title": "Behavior Tree",
            "answers": [
              {
                "answer": "Structures complex AI decision-making",
                "right": true
              },
              {
                "answer": "Renders AI behavior",
                "right": false
              },
              {
                "answer": "Stops AI decisions",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.speed' control?",
            "short_title": "NavMeshAgent.speed",
            "answers": [
              {
                "answer": "The maximum movement speed of the agent",
                "right": true
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Physics speed",
                "right": false
              },
              {
                "answer": "Animation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NavMeshAgent SamplePathPosition()'?",
            "short_title": "SamplePathPosition",
            "answers": [
              {
                "answer": "Finds a valid position on the NavMesh",
                "right": true
              },
              {
                "answer": "Renders a sample",
                "right": false
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.angularSpeed' affect?",
            "short_title": "angularSpeed",
            "answers": [
              {
                "answer": "The rotation speed of the agent",
                "right": true
              },
              {
                "answer": "Movement speed",
                "right": false
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Physics speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'NavMeshAgent.autoBraking'?",
            "short_title": "autoBraking",
            "answers": [
              {
                "answer": "Slows the agent near the destination",
                "right": true
              },
              {
                "answer": "Stops rendering",
                "right": false
              },
              {
                "answer": "Increases speed",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMesh.BuildSettings' configure?",
            "short_title": "BuildSettings",
            "answers": [
              {
                "answer": "Parameters for baking a NavMesh",
                "right": true
              },
              {
                "answer": "Rendering settings",
                "right": false
              },
              {
                "answer": "Physics settings",
                "right": false
              },
              {
                "answer": "Animation settings",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Finite State Machine (FSM)' in Unity AI?",
            "short_title": "FSM",
            "answers": [
              {
                "answer": "Manages AI states with transitions",
                "right": true
              },
              {
                "answer": "Renders AI states",
                "right": false
              },
              {
                "answer": "Stops AI behavior",
                "right": false
              },
              {
                "answer": "Handles physics states",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.pathPending' indicate?",
            "short_title": "pathPending",
            "answers": [
              {
                "answer": "Whether a path is still being calculated",
                "right": true
              },
              {
                "answer": "Path rendering status",
                "right": false
              },
              {
                "answer": "Physics pending",
                "right": false
              },
              {
                "answer": "Animation pending",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'NavMeshAgent.stoppingDistance'?",
            "short_title": "stoppingDistance",
            "answers": [
              {
                "answer": "Sets how close the agent stops to the target",
                "right": true
              },
              {
                "answer": "Controls rendering distance",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.Warp()' do in Unity?",
            "short_title": "Warp",
            "answers": [
              {
                "answer": "Instantly moves the agent to a new position",
                "right": true
              },
              {
                "answer": "Renders a warp effect",
                "right": false
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'A* Pathfinding' in Unity AI?",
            "short_title": "A* Pathfinding",
            "answers": [
              {
                "answer": "Finds the shortest path with heuristics",
                "right": true
              },
              {
                "answer": "Renders paths",
                "right": false
              },
              {
                "answer": "Stops AI movement",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.obstacleAvoidanceType' control?",
            "short_title": "obstacleAvoidanceType",
            "answers": [
              {
                "answer": "The quality of obstacle avoidance",
                "right": true
              },
              {
                "answer": "Rendering quality",
                "right": false
              },
              {
                "answer": "Physics avoidance",
                "right": false
              },
              {
                "answer": "Animation quality",
                "right": false
              }
            ]
          }
        ],
        "Particle Systems and Visual Effects": [
          {
            "title": "What is the primary purpose of Unity’s Particle System component?",
            "short_title": "Particle System purpose",
            "answers": [
              {
                "answer": "Creates and manages particle-based visual effects",
                "right": true
              },
              {
                "answer": "Handles physics effects",
                "right": false
              },
              {
                "answer": "Renders UI effects",
                "right": false
              },
              {
                "answer": "Manages audio effects",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.Play()' do in Unity?",
            "short_title": "ParticleSystem.Play",
            "answers": [
              {
                "answer": "Starts emitting particles",
                "right": true
              },
              {
                "answer": "Stops particles",
                "right": false
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'ParticleSystem.MainModule' in Unity?",
            "short_title": "MainModule",
            "answers": [
              {
                "answer": "Controls core particle properties like duration and rate",
                "right": true
              },
              {
                "answer": "Manages rendering",
                "right": false
              },
              {
                "answer": "Stops particle effects",
                "right": false
              },
              {
                "answer": "Handles animation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.EmissionModule' configure?",
            "short_title": "EmissionModule",
            "answers": [
              {
                "answer": "The rate and timing of particle emission",
                "right": true
              },
              {
                "answer": "Particle rendering",
                "right": false
              },
              {
                "answer": "Physics behavior",
                "right": false
              },
              {
                "answer": "Animation timing",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ParticleSystem.ShapeModule' in Unity?",
            "short_title": "ShapeModule",
            "answers": [
              {
                "answer": "Defines the emission shape of particles",
                "right": true
              },
              {
                "answer": "Renders particle shapes",
                "right": false
              },
              {
                "answer": "Stops particle emission",
                "right": false
              },
              {
                "answer": "Handles physics shapes",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.SubEmittersModule' add to Unity?",
            "short_title": "SubEmittersModule",
            "answers": [
              {
                "answer": "Spawns additional particle systems on events",
                "right": true
              },
              {
                "answer": "Renders sub-effects",
                "right": false
              },
              {
                "answer": "Manages physics emitters",
                "right": false
              },
              {
                "answer": "Stops main emitters",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'ParticleSystemRenderer' in Unity?",
            "short_title": "ParticleSystemRenderer",
            "answers": [
              {
                "answer": "Customizes how particles are rendered",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.TriggerModule' do?",
            "short_title": "TriggerModule",
            "answers": [
              {
                "answer": "Interacts particles with colliders",
                "right": true
              },
              {
                "answer": "Renders triggers",
                "right": false
              },
              {
                "answer": "Stops particle triggers",
                "right": false
              },
              {
                "answer": "Manages UI triggers",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'VFX Graph' in Unity?",
            "short_title": "VFX Graph",
            "answers": [
              {
                "answer": "Creates complex visual effects with GPU power",
                "right": true
              },
              {
                "answer": "Handles physics effects",
                "right": false
              },
              {
                "answer": "Renders UI visuals",
                "right": false
              },
              {
                "answer": "Manages audio effects",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.ColorOverLifetimeModule' control?",
            "short_title": "ColorOverLifetime",
            "answers": [
              {
                "answer": "Changes particle color over their lifetime",
                "right": true
              },
              {
                "answer": "Renders lifetime color",
                "right": false
              },
              {
                "answer": "Stops color changes",
                "right": false
              },
              {
                "answer": "Handles physics color",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'ParticleSystem.NoiseModule'?",
            "short_title": "NoiseModule",
            "answers": [
              {
                "answer": "Adds noise to particle movement",
                "right": true
              },
              {
                "answer": "Renders noise",
                "right": false
              },
              {
                "answer": "Stops particle noise",
                "right": false
              },
              {
                "answer": "Manages animation noise",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.Simulate()' allow in Unity?",
            "short_title": "ParticleSystem.Simulate",
            "answers": [
              {
                "answer": "Manually advances particle simulation",
                "right": true
              },
              {
                "answer": "Renders particles",
                "right": false
              },
              {
                "answer": "Stops simulation",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'ParticleSystem.Prewarm'?",
            "short_title": "Prewarm",
            "answers": [
              {
                "answer": "Starts particles as if already running",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops prewarming",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VFXPropertySheet' manage in VFX Graph?",
            "short_title": "VFXPropertySheet",
            "answers": [
              {
                "answer": "Exposes parameters for runtime control",
                "right": true
              },
              {
                "answer": "Renders property sheets",
                "right": false
              },
              {
                "answer": "Manages physics properties",
                "right": false
              },
              {
                "answer": "Stops VFX",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ParticleSystemForceField' in Unity?",
            "short_title": "ParticleSystemForceField",
            "answers": [
              {
                "answer": "Applies forces to influence particle motion",
                "right": true
              },
              {
                "answer": "Renders force fields",
                "right": false
              },
              {
                "answer": "Stops particle forces",
                "right": false
              },
              {
                "answer": "Handles UI forces",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.TextureSheetAnimationModule' do?",
            "short_title": "TextureSheetAnimation",
            "answers": [
              {
                "answer": "Animates particles using a texture sheet",
                "right": true
              },
              {
                "answer": "Renders texture sheets",
                "right": false
              },
              {
                "answer": "Stops texture animation",
                "right": false
              },
              {
                "answer": "Manages physics animation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'ParticleSystem.Emit()'?",
            "short_title": "Emit",
            "answers": [
              {
                "answer": "Manually emits a specific number of particles",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders emissions",
                "right": false
              },
              {
                "answer": "Stops emission",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VisualEffect' component do in Unity?",
            "short_title": "VisualEffect",
            "answers": [
              {
                "answer": "Controls VFX Graph effects in the scene",
                "right": true
              },
              {
                "answer": "Renders physics effects",
                "right": false
              },
              {
                "answer": "Manages UI effects",
                "right": false
              },
              {
                "answer": "Handles animation effects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ParticleSystem.LimitVelocityOverLifetimeModule'?",
            "short_title": "LimitVelocityOverLifetime",
            "answers": [
              {
                "answer": "Caps particle speed over their lifetime",
                "right": true
              },
              {
                "answer": "Renders velocity",
                "right": false
              },
              {
                "answer": "Stops particle movement",
                "right": false
              },
              {
                "answer": "Handles physics velocity",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystemRenderer.maxParticleSize' control?",
            "short_title": "maxParticleSize",
            "answers": [
              {
                "answer": "The maximum screen size of particles",
                "right": true
              },
              {
                "answer": "Physics particle size",
                "right": false
              },
              {
                "answer": "Animation size",
                "right": false
              },
              {
                "answer": "Rendering speed",
                "right": false
              }
            ]
          }
        ],
        "Scriptable Objects and Data Management": [
          {
            "title": "What is the primary purpose of a ScriptableObject in Unity?",
            "short_title": "ScriptableObject purpose",
            "answers": [
              {
                "answer": "Stores reusable data as an asset",
                "right": true
              },
              {
                "answer": "Renders data visuals",
                "right": false
              },
              {
                "answer": "Handles physics data",
                "right": false
              },
              {
                "answer": "Manages UI data",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CreateAssetMenu' attribute do for a ScriptableObject?",
            "short_title": "CreateAssetMenu",
            "answers": [
              {
                "answer": "Adds a creation option in the Unity menu",
                "right": true
              },
              {
                "answer": "Stops asset creation",
                "right": false
              },
              {
                "answer": "Renders the asset",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using ScriptableObjects for game configuration?",
            "short_title": "Config benefit",
            "answers": [
              {
                "answer": "Centralized, editable data without code changes",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject.CreateInstance()' do in Unity?",
            "short_title": "CreateInstance",
            "answers": [
              {
                "answer": "Creates a runtime instance of a ScriptableObject",
                "right": true
              },
              {
                "answer": "Renders an instance",
                "right": false
              },
              {
                "answer": "Stops creation",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of serializing fields in a ScriptableObject?",
            "short_title": "Serialization",
            "answers": [
              {
                "answer": "Exposes fields in the Inspector for editing",
                "right": true
              },
              {
                "answer": "Hides fields",
                "right": false
              },
              {
                "answer": "Renders data",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetDatabase.CreateAsset()' do with a ScriptableObject?",
            "short_title": "CreateAsset",
            "answers": [
              {
                "answer": "Saves a ScriptableObject as a project asset",
                "right": true
              },
              {
                "answer": "Deletes an asset",
                "right": false
              },
              {
                "answer": "Renders an asset",
                "right": false
              },
              {
                "answer": "Stops asset creation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of using ScriptableObjects for item databases?",
            "short_title": "Item database",
            "answers": [
              {
                "answer": "Decouples data from code for easy management",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders items",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject.OnEnable()' allow in Unity?",
            "short_title": "OnEnable",
            "answers": [
              {
                "answer": "Runs initialization code when loaded",
                "right": true
              },
              {
                "answer": "Stops the object",
                "right": false
              },
              {
                "answer": "Renders the object",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ScriptableObject.OnDestroy()'?",
            "short_title": "OnDestroy",
            "answers": [
              {
                "answer": "Cleans up when the object is destroyed",
                "right": true
              },
              {
                "answer": "Creates a new object",
                "right": false
              },
              {
                "answer": "Renders destruction",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetDatabase.LoadAssetAtPath()' do with ScriptableObjects?",
            "short_title": "LoadAssetAtPath",
            "answers": [
              {
                "answer": "Loads a ScriptableObject from a file path",
                "right": true
              },
              {
                "answer": "Unloads an asset",
                "right": false
              },
              {
                "answer": "Renders an asset",
                "right": false
              },
              {
                "answer": "Stops loading",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using ScriptableObjects for event systems?",
            "short_title": "Event systems",
            "answers": [
              {
                "answer": "Provides a decoupled event communication system",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics events",
                "right": false
              },
              {
                "answer": "Stops events",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject.OnValidate()' do in Unity?",
            "short_title": "OnValidate",
            "answers": [
              {
                "answer": "Runs when Inspector values change",
                "right": true
              },
              {
                "answer": "Stops validation",
                "right": false
              },
              {
                "answer": "Renders changes",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Addressables' with ScriptableObjects?",
            "short_title": "Addressables",
            "answers": [
              {
                "answer": "Loads ScriptableObjects dynamically with memory efficiency",
                "right": true
              },
              {
                "answer": "Renders addressables",
                "right": false
              },
              {
                "answer": "Stops loading",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorUtility.SetDirty()' do for ScriptableObjects?",
            "short_title": "SetDirty",
            "answers": [
              {
                "answer": "Marks the object as modified for saving",
                "right": true
              },
              {
                "answer": "Cleans the object",
                "right": false
              },
              {
                "answer": "Renders the object",
                "right": false
              },
              {
                "answer": "Stops editing",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of storing game stats in ScriptableObjects?",
            "short_title": "Game stats",
            "answers": [
              {
                "answer": "Allows easy tweaking without recompilation",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders stats",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject.OnDisable()' handle?",
            "short_title": "OnDisable",
            "answers": [
              {
                "answer": "Cleanup when the object is disabled",
                "right": true
              },
              {
                "answer": "Enables the object",
                "right": false
              },
              {
                "answer": "Renders disable state",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AssetDatabase.SaveAssets()' with ScriptableObjects?",
            "short_title": "SaveAssets",
            "answers": [
              {
                "answer": "Saves all modified assets to disk",
                "right": true
              },
              {
                "answer": "Loads assets",
                "right": false
              },
              {
                "answer": "Renders assets",
                "right": false
              },
              {
                "answer": "Stops saving",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject’ as a singleton' pattern achieve?",
            "short_title": "Singleton pattern",
            "answers": [
              {
                "answer": "Ensures a single instance of data globally",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops data access",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'ScriptableObject’ for level data'?",
            "short_title": "Level data",
            "answers": [
              {
                "answer": "Stores level-specific data reusable across scenes",
                "right": true
              },
              {
                "answer": "Renders levels",
                "right": false
              },
              {
                "answer": "Manages physics levels",
                "right": false
              },
              {
                "answer": "Stops level loading",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetDatabase.Refresh()' do after modifying ScriptableObjects?",
            "short_title": "Refresh",
            "answers": [
              {
                "answer": "Updates the project to reflect changes",
                "right": true
              },
              {
                "answer": "Stops refreshing",
                "right": false
              },
              {
                "answer": "Renders updates",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          }
        ],
        "Build Pipeline and Deployment": [
          {
            "title": "What does 'BuildPipeline.BuildPlayer()' do in Unity?",
            "short_title": "BuildPlayer",
            "answers": [
              {
                "answer": "Builds the game for a target platform",
                "right": true
              },
              {
                "answer": "Renders the build",
                "right": false
              },
              {
                "answer": "Stops the build",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'BuildTarget' in Unity’s build system?",
            "short_title": "BuildTarget",
            "answers": [
              {
                "answer": "Specifies the platform for the build",
                "right": true
              },
              {
                "answer": "Sets rendering targets",
                "right": false
              },
              {
                "answer": "Manages physics targets",
                "right": false
              },
              {
                "answer": "Handles animation targets",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerSettings' configure in Unity?",
            "short_title": "PlayerSettings",
            "answers": [
              {
                "answer": "Platform-specific build options",
                "right": true
              },
              {
                "answer": "Renders player visuals",
                "right": false
              },
              {
                "answer": "Stops builds",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'AssetBundle' in Unity deployment?",
            "short_title": "AssetBundle",
            "answers": [
              {
                "answer": "Packages assets for dynamic loading",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders assets",
                "right": false
              },
              {
                "answer": "Stops deployment",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BuildOptions.Development' enable in Unity?",
            "short_title": "Development option",
            "answers": [
              {
                "answer": "Includes debug info in the build",
                "right": true
              },
              {
                "answer": "Optimizes for release",
                "right": false
              },
              {
                "answer": "Renders development visuals",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'EditorUserBuildSettings' in Unity?",
            "short_title": "EditorUserBuildSettings",
            "answers": [
              {
                "answer": "Stores temporary build configuration",
                "right": true
              },
              {
                "answer": "Renders build settings",
                "right": false
              },
              {
                "answer": "Stops build settings",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BuildPipeline.BuildAssetBundles()' do?",
            "short_title": "BuildAssetBundles",
            "answers": [
              {
                "answer": "Creates AssetBundles for deployment",
                "right": true
              },
              {
                "answer": "Loads AssetBundles",
                "right": false
              },
              {
                "answer": "Renders bundles",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'BuildReport' in Unity?",
            "short_title": "BuildReport",
            "answers": [
              {
                "answer": "Provides details about the build process",
                "right": true
              },
              {
                "answer": "Stops the build",
                "right": false
              },
              {
                "answer": "Renders reports",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerSettings.bundleVersion' set?",
            "short_title": "bundleVersion",
            "answers": [
              {
                "answer": "The version string for the build",
                "right": true
              },
              {
                "answer": "Rendering version",
                "right": false
              },
              {
                "answer": "Physics version",
                "right": false
              },
              {
                "answer": "Animation version",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'BuildOptions.CompressWithLz4'?",
            "short_title": "CompressWithLz4",
            "answers": [
              {
                "answer": "Reduces build size with fast decompression",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops compression",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorBuildSettings.scenes' configure?",
            "short_title": "EditorBuildSettings.scenes",
            "answers": [
              {
                "answer": "Scenes included in the build",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Physics scenes",
                "right": false
              },
              {
                "answer": "Animation scenes",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'BuildTargetGroup' in Unity?",
            "short_title": "BuildTargetGroup",
            "answers": [
              {
                "answer": "Groups platforms for build settings",
                "right": true
              },
              {
                "answer": "Renders target groups",
                "right": false
              },
              {
                "answer": "Stops builds",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetBundleManifest' provide in Unity?",
            "short_title": "AssetBundleManifest",
            "answers": [
              {
                "answer": "Metadata about AssetBundle dependencies",
                "right": true
              },
              {
                "answer": "Rendering manifest",
                "right": false
              },
              {
                "answer": "Physics manifest",
                "right": false
              },
              {
                "answer": "Animation manifest",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'BuildOptions.StrictMode'?",
            "short_title": "StrictMode",
            "answers": [
              {
                "answer": "Fails the build on warnings for quality",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders strictly",
                "right": false
              },
              {
                "answer": "Stops builds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerSettings.SetScriptingDefineSymbolsForGroup()' do?",
            "short_title": "SetScriptingDefineSymbols",
            "answers": [
              {
                "answer": "Sets custom defines for conditional compilation",
                "right": true
              },
              {
                "answer": "Renders defines",
                "right": false
              },
              {
                "answer": "Handles physics defines",
                "right": false
              },
              {
                "answer": "Stops defines",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'BuildPipeline.GetCRCForAssetBundle()'?",
            "short_title": "GetCRCForAssetBundle",
            "answers": [
              {
                "answer": "Calculates a checksum for an AssetBundle",
                "right": true
              },
              {
                "answer": "Renders CRC",
                "right": false
              },
              {
                "answer": "Stops builds",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BuildOptions.AutoRunPlayer' do in Unity?",
            "short_title": "AutoRunPlayer",
            "answers": [
              {
                "answer": "Runs the build immediately after completion",
                "right": true
              },
              {
                "answer": "Stops the build",
                "right": false
              },
              {
                "answer": "Renders the player",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Addressables' in deployment?",
            "short_title": "Addressables advantage",
            "answers": [
              {
                "answer": "Dynamic asset loading with version control",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops deployment",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerSettings.SetPropertyInt()' configure?",
            "short_title": "SetPropertyInt",
            "answers": [
              {
                "answer": "Platform-specific integer settings",
                "right": true
              },
              {
                "answer": "Rendering properties",
                "right": false
              },
              {
                "answer": "Physics properties",
                "right": false
              },
              {
                "answer": "Animation properties",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BuildPipeline.IsBuildTargetSupported()' check?",
            "short_title": "IsBuildTargetSupported",
            "answers": [
              {
                "answer": "If a platform supports the build configuration",
                "right": true
              },
              {
                "answer": "Rendering support",
                "right": false
              },
              {
                "answer": "Physics support",
                "right": false
              },
              {
                "answer": "Input support",
                "right": false
              }
            ]
          }
        ],
        "Editor Scripting and Tools": [
          {
            "title": "What is the primary purpose of Unity’s Editor scripting?",
            "short_title": "Editor scripting purpose",
            "answers": [
              {
                "answer": "Automates and extends the Unity Editor",
                "right": true
              },
              {
                "answer": "Renders editor visuals",
                "right": false
              },
              {
                "answer": "Handles runtime physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'EditorWindow' class create in Unity?",
            "short_title": "EditorWindow",
            "answers": [
              {
                "answer": "A custom window in the Unity Editor",
                "right": true
              },
              {
                "answer": "A runtime window",
                "right": false
              },
              {
                "answer": "A physics window",
                "right": false
              },
              {
                "answer": "An animation window",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'MenuItem' attribute in Unity?",
            "short_title": "MenuItem",
            "answers": [
              {
                "answer": "Adds a custom menu option in the Editor",
                "right": true
              },
              {
                "answer": "Stops menu creation",
                "right": false
              },
              {
                "answer": "Renders menu visuals",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorUtility.DisplayDialog()' do in Unity?",
            "short_title": "DisplayDialog",
            "answers": [
              {
                "answer": "Shows a dialog box in the Editor",
                "right": true
              },
              {
                "answer": "Renders a dialog",
                "right": false
              },
              {
                "answer": "Stops dialogs",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'CustomEditor' attribute in Unity?",
            "short_title": "CustomEditor",
            "answers": [
              {
                "answer": "Creates a custom Inspector for a script",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders custom visuals",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorGUILayout' provide in Unity?",
            "short_title": "EditorGUILayout",
            "answers": [
              {
                "answer": "Automatic layout for Editor GUI elements",
                "right": true
              },
              {
                "answer": "Stops GUI rendering",
                "right": false
              },
              {
                "answer": "Manages physics layout",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AssetDatabase.ImportAsset()'?",
            "short_title": "ImportAsset",
            "answers": [
              {
                "answer": "Forces reimport of an asset",
                "right": true
              },
              {
                "answer": "Renders an asset",
                "right": false
              },
              {
                "answer": "Stops importing",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorApplication.ExecuteMenuItem()' do?",
            "short_title": "ExecuteMenuItem",
            "answers": [
              {
                "answer": "Triggers a menu item programmatically",
                "right": true
              },
              {
                "answer": "Stops menu execution",
                "right": false
              },
              {
                "answer": "Renders menus",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'PropertyDrawer' in Unity?",
            "short_title": "PropertyDrawer",
            "answers": [
              {
                "answer": "Customizes how properties appear in the Inspector",
                "right": true
              },
              {
                "answer": "Renders properties",
                "right": false
              },
              {
                "answer": "Stops property display",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorPrefs' store in Unity?",
            "short_title": "EditorPrefs",
            "answers": [
              {
                "answer": "Persistent Editor settings across sessions",
                "right": true
              },
              {
                "answer": "Runtime preferences",
                "right": false
              },
              {
                "answer": "Physics preferences",
                "right": false
              },
              {
                "answer": "Animation preferences",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'OnInspectorGUI()' in a CustomEditor?",
            "short_title": "OnInspectorGUI",
            "answers": [
              {
                "answer": "Defines the Inspector UI for a script",
                "right": true
              },
              {
                "answer": "Stops Inspector rendering",
                "right": false
              },
              {
                "answer": "Renders physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorSceneManager' manage in Unity?",
            "short_title": "EditorSceneManager",
            "answers": [
              {
                "answer": "Editor-specific scene operations",
                "right": true
              },
              {
                "answer": "Runtime scenes",
                "right": false
              },
              {
                "answer": "Physics scenes",
                "right": false
              },
              {
                "answer": "Rendering scenes",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'EditorGUILayout.PropertyField()'?",
            "short_title": "PropertyField",
            "answers": [
              {
                "answer": "Automatically draws a serialized property",
                "right": true
              },
              {
                "answer": "Stops property drawing",
                "right": false
              },
              {
                "answer": "Renders physics",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetPostprocessor' allow in Unity?",
            "short_title": "AssetPostprocessor",
            "answers": [
              {
                "answer": "Customizes asset import pipelines",
                "right": true
              },
              {
                "answer": "Renders assets",
                "right": false
              },
              {
                "answer": "Stops asset imports",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'EditorApplication.update' delegate?",
            "short_title": "update delegate",
            "answers": [
              {
                "answer": "Runs code every Editor frame",
                "right": true
              },
              {
                "answer": "Stops updates",
                "right": false
              },
              {
                "answer": "Renders frames",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GUIUtility.GetControlID()' do in Unity?",
            "short_title": "GetControlID",
            "answers": [
              {
                "answer": "Generates a unique ID for GUI controls",
                "right": true
              },
              {
                "answer": "Renders control IDs",
                "right": false
              },
              {
                "answer": "Stops GUI",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'SerializedObject' in Editor scripting?",
            "short_title": "SerializedObject",
            "answers": [
              {
                "answer": "Safely modifies serialized data",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Stops serialization",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorUtility.IsPersistent()' check?",
            "short_title": "IsPersistent",
            "answers": [
              {
                "answer": "If an object is saved as an asset",
                "right": true
              },
              {
                "answer": "If rendering is persistent",
                "right": false
              },
              {
                "answer": "If physics is persistent",
                "right": false
              },
              {
                "answer": "If animations persist",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'CustomPropertyDrawer' in Unity?",
            "short_title": "CustomPropertyDrawer",
            "answers": [
              {
                "answer": "Customizes property display for specific types",
                "right": true
              },
              {
                "answer": "Renders custom properties",
                "right": false
              },
              {
                "answer": "Stops property rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorApplication.SaveCurrentSceneIfUserWantsTo()' do?",
            "short_title": "SaveCurrentSceneIfUserWantsTo",
            "answers": [
              {
                "answer": "Prompts to save the current scene",
                "right": true
              },
              {
                "answer": "Stops scene saving",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          }
        ]
      }
    },
    {
      "rank": "Senior",
      "subjects": {
        "Advanced Shader Programming and Optimization": [
          {
            "title": "What is the primary purpose of a Compute Shader in Unity?",
            "short_title": "Compute Shader purpose",
            "answers": [
              {
                "answer": "Performs general-purpose GPU computations",
                "right": true
              },
              {
                "answer": "Renders vertex data",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SV_DispatchThreadID' represent in an HLSL Compute Shader?",
            "short_title": "SV_DispatchThreadID",
            "answers": [
              {
                "answer": "The unique ID of a thread in the dispatch",
                "right": true
              },
              {
                "answer": "The vertex position",
                "right": false
              },
              {
                "answer": "The rendering thread",
                "right": false
              },
              {
                "answer": "The physics thread",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'Shader Feature' directives in Unity?",
            "short_title": "Shader Feature",
            "answers": [
              {
                "answer": "Reduces shader variants for build optimization",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Tessellation' achieve in a Unity shader?",
            "short_title": "Tessellation",
            "answers": [
              {
                "answer": "Subdivides geometry for smoother surfaces",
                "right": true
              },
              {
                "answer": "Renders flat geometry",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader.PropertyToID()' in Unity?",
            "short_title": "PropertyToID",
            "answers": [
              {
                "answer": "Converts property names to integer IDs for efficiency",
                "right": true
              },
              {
                "answer": "Stops property access",
                "right": false
              },
              {
                "answer": "Renders properties",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RWStructuredBuffer' enable in a Compute Shader?",
            "short_title": "RWStructuredBuffer",
            "answers": [
              {
                "answer": "Read-write access to structured data",
                "right": true
              },
              {
                "answer": "Read-only vertex data",
                "right": false
              },
              {
                "answer": "Rendering buffers",
                "right": false
              },
              {
                "answer": "Physics buffers",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Shader Warmup' in Unity?",
            "short_title": "Shader Warmup",
            "answers": [
              {
                "answer": "Precompiles shaders to avoid runtime hitches",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SV_POSITION' output in an HLSL vertex shader?",
            "short_title": "SV_POSITION",
            "answers": [
              {
                "answer": "The vertex position in clip space",
                "right": true
              },
              {
                "answer": "The vertex color",
                "right": false
              },
              {
                "answer": "The vertex normal",
                "right": false
              },
              {
                "answer": "The vertex UV",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Graph SubShader Tags'?",
            "short_title": "SubShader Tags",
            "answers": [
              {
                "answer": "Defines rendering behavior like queue or type",
                "right": true
              },
              {
                "answer": "Renders sub-shaders",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'cbuffer' declare in an HLSL shader?",
            "short_title": "cbuffer",
            "answers": [
              {
                "answer": "A constant buffer for uniform data",
                "right": true
              },
              {
                "answer": "A render buffer",
                "right": false
              },
              {
                "answer": "A physics buffer",
                "right": false
              },
              {
                "answer": "An animation buffer",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Branch Flattening' in shader optimization?",
            "short_title": "Branch Flattening",
            "answers": [
              {
                "answer": "Reduces GPU branching overhead",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders branches",
                "right": false
              },
              {
                "answer": "Stops optimization",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Shader.EnableKeyword()' do in Unity?",
            "short_title": "EnableKeyword",
            "answers": [
              {
                "answer": "Activates a shader variant dynamically",
                "right": true
              },
              {
                "answer": "Disables keywords",
                "right": false
              },
              {
                "answer": "Renders keywords",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'Geometry Shader' in Unity?",
            "short_title": "Geometry Shader",
            "answers": [
              {
                "answer": "Modifies or generates geometry between vertex and fragment stages",
                "right": true
              },
              {
                "answer": "Renders vertex data",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops geometry",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UNITY_MATRIX_MVP' represent in an HLSL shader?",
            "short_title": "UNITY_MATRIX_MVP",
            "answers": [
              {
                "answer": "The combined model-view-projection matrix",
                "right": true
              },
              {
                "answer": "The model matrix only",
                "right": false
              },
              {
                "answer": "The physics matrix",
                "right": false
              },
              {
                "answer": "The rendering matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Stripping' in Unity?",
            "short_title": "Shader Stripping",
            "answers": [
              {
                "answer": "Removes unused shader variants for build size",
                "right": true
              },
              {
                "answer": "Stops shaders",
                "right": false
              },
              {
                "answer": "Renders stripped shaders",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'StructuredBuffer' provide in an HLSL shader?",
            "short_title": "StructuredBuffer",
            "answers": [
              {
                "answer": "Read-only structured data access",
                "right": true
              },
              {
                "answer": "Write-only data",
                "right": false
              },
              {
                "answer": "Rendering buffers",
                "right": false
              },
              {
                "answer": "Physics buffers",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Shader LOD' in Unity?",
            "short_title": "Shader LOD",
            "answers": [
              {
                "answer": "Controls shader complexity based on hardware",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops shaders",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SV_Target' specify in an HLSL fragment shader?",
            "short_title": "SV_Target",
            "answers": [
              {
                "answer": "The output color to the render target",
                "right": true
              },
              {
                "answer": "The vertex position",
                "right": false
              },
              {
                "answer": "The physics target",
                "right": false
              },
              {
                "answer": "The animation target",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Pass' in Unity?",
            "short_title": "Shader Pass",
            "answers": [
              {
                "answer": "Defines a single rendering operation",
                "right": true
              },
              {
                "answer": "Stops rendering passes",
                "right": false
              },
              {
                "answer": "Renders physics",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ShaderUtil.ShaderToSM()' estimate in Unity?",
            "short_title": "ShaderToSM",
            "answers": [
              {
                "answer": "The Shader Model level of a shader",
                "right": true
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Physics model",
                "right": false
              },
              {
                "answer": "Animation level",
                "right": false
              }
            ]
          }
        ],
        "Physics Engine Customization and Performance": [
          {
            "title": "What is the primary physics engine used by Unity for 3D simulations?",
            "short_title": "Physics engine",
            "answers": [
              {
                "answer": "PhysX",
                "right": true
              },
              {
                "answer": "Havok",
                "right": false
              },
              {
                "answer": "Bullet",
                "right": false
              },
              {
                "answer": "Box2D",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.autoSyncTransforms' control in Unity?",
            "short_title": "autoSyncTransforms",
            "answers": [
              {
                "answer": "Whether physics syncs transforms automatically",
                "right": true
              },
              {
                "answer": "Rendering sync",
                "right": false
              },
              {
                "answer": "Animation sync",
                "right": false
              },
              {
                "answer": "UI sync",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'PhysX.PxScene' integration in Unity?",
            "short_title": "PxScene",
            "answers": [
              {
                "answer": "Allows direct access to PhysX scenes for customization",
                "right": true
              },
              {
                "answer": "Renders physics scenes",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.defaultMaxAngularSpeed' optimize?",
            "short_title": "defaultMaxAngularSpeed",
            "answers": [
              {
                "answer": "Limits global angular velocity for stability",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Rigidbody.solverVelocityIterations'?",
            "short_title": "solverVelocityIterations",
            "answers": [
              {
                "answer": "Improves velocity constraint accuracy",
                "right": true
              },
              {
                "answer": "Renders velocity",
                "right": false
              },
              {
                "answer": "Stops solver",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysicsScene.Simulate()' allow in Unity?",
            "short_title": "PhysicsScene.Simulate",
            "answers": [
              {
                "answer": "Runs a custom physics simulation in isolation",
                "right": true
              },
              {
                "answer": "Renders physics scenes",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.bounceThreshold'?",
            "short_title": "bounceThreshold",
            "answers": [
              {
                "answer": "Sets minimum speed for collision bounces",
                "right": true
              },
              {
                "answer": "Controls rendering bounces",
                "right": false
              },
              {
                "answer": "Stops bounces",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.simulated' control in Unity?",
            "short_title": "Rigidbody2D.simulated",
            "answers": [
              {
                "answer": "Enables or disables 2D physics simulation",
                "right": true
              },
              {
                "answer": "Renders 2D physics",
                "right": false
              },
              {
                "answer": "Stops 2D rendering",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'PhysicsScene.Raycast()' over global raycasts?",
            "short_title": "PhysicsScene.Raycast",
            "answers": [
              {
                "answer": "Targets a specific physics scene",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops raycasts",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.defaultSolverIterations' affect?",
            "short_title": "defaultSolverIterations",
            "answers": [
              {
                "answer": "Global constraint solving accuracy",
                "right": true
              },
              {
                "answer": "Rendering iterations",
                "right": false
              },
              {
                "answer": "Physics stops",
                "right": false
              },
              {
                "answer": "Animation accuracy",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'PhysX.PxConstraint' in custom physics?",
            "short_title": "PxConstraint",
            "answers": [
              {
                "answer": "Defines custom joint constraints",
                "right": true
              },
              {
                "answer": "Renders constraints",
                "right": false
              },
              {
                "answer": "Stops constraints",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.IgnoreLayerCollision()' optimize?",
            "short_title": "IgnoreLayerCollision",
            "answers": [
              {
                "answer": "Reduces collision checks between layers",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Rigidbody.freezeRotation'?",
            "short_title": "freezeRotation",
            "answers": [
              {
                "answer": "Prevents unwanted physics rotation",
                "right": true
              },
              {
                "answer": "Renders frozen objects",
                "right": false
              },
              {
                "answer": "Stops movement",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysicsSceneExtensions.GetPhysicsScene()' do?",
            "short_title": "GetPhysicsScene",
            "answers": [
              {
                "answer": "Retrieves a scene’s physics context",
                "right": true
              },
              {
                "answer": "Renders physics scenes",
                "right": false
              },
              {
                "answer": "Stops physics scenes",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.defaultPhysicsScene'?",
            "short_title": "defaultPhysicsScene",
            "answers": [
              {
                "answer": "Accesses the global physics simulation",
                "right": true
              },
              {
                "answer": "Renders default scenes",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.gravityScale' customize?",
            "short_title": "gravityScale",
            "answers": [
              {
                "answer": "The strength of gravity on a 2D object",
                "right": true
              },
              {
                "answer": "Rendering scale",
                "right": false
              },
              {
                "answer": "Physics stop scale",
                "right": false
              },
              {
                "answer": "Animation scale",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Physics.OverlapSphereNonAlloc()'?",
            "short_title": "OverlapSphereNonAlloc",
            "answers": [
              {
                "answer": "Avoids allocations for performance",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops overlaps",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysX.PxCooking' enable in Unity?",
            "short_title": "PxCooking",
            "answers": [
              {
                "answer": "Preprocesses collision meshes for efficiency",
                "right": true
              },
              {
                "answer": "Renders collision",
                "right": false
              },
              {
                "answer": "Stops physics cooking",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.reuseCollisionCallbacks'?",
            "short_title": "reuseCollisionCallbacks",
            "answers": [
              {
                "answer": "Reuses collision data to reduce overhead",
                "right": true
              },
              {
                "answer": "Renders callbacks",
                "right": false
              },
              {
                "answer": "Stops collisions",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysicsScene.IsValid()' check?",
            "short_title": "IsValid",
            "answers": [
              {
                "answer": "If a physics scene is properly initialized",
                "right": true
              },
              {
                "answer": "Rendering validity",
                "right": false
              },
              {
                "answer": "Physics stop validity",
                "right": false
              },
              {
                "answer": "Animation validity",
                "right": false
              }
            ]
          }
        ],
        "C# Advanced Techniques and Low-Level Optimization": [
          {
            "title": "What is the primary benefit of using 'unsafe' code in C# within Unity?",
            "short_title": "unsafe code",
            "answers": [
              {
                "answer": "Direct memory access for performance",
                "right": true
              },
              {
                "answer": "Improved rendering",
                "right": false
              },
              {
                "answer": "Physics optimization",
                "right": false
              },
              {
                "answer": "UI management",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'fixed' keyword achieve in an unsafe C# block?",
            "short_title": "fixed keyword",
            "answers": [
              {
                "answer": "Pins memory to prevent GC relocation",
                "right": true
              },
              {
                "answer": "Stops memory access",
                "right": false
              },
              {
                "answer": "Renders fixed data",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Span<T>' in low-level C# optimization?",
            "short_title": "Span<T>",
            "answers": [
              {
                "answer": "Provides a safe, allocation-free memory view",
                "right": true
              },
              {
                "answer": "Increases allocations",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Runtime.InteropServices.Marshal' enable in C#?",
            "short_title": "Marshal",
            "answers": [
              {
                "answer": "Interop with unmanaged code and memory",
                "right": true
              },
              {
                "answer": "Rendering interop",
                "right": false
              },
              {
                "answer": "Physics interop",
                "right": false
              },
              {
                "answer": "Animation interop",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'stackalloc' in C# for Unity?",
            "short_title": "stackalloc",
            "answers": [
              {
                "answer": "Allocates memory on the stack, avoiding GC",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops memory allocation",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Threading.ThreadPool.UnsafeQueueUserWorkItem()' do?",
            "short_title": "UnsafeQueueUserWorkItem",
            "answers": [
              {
                "answer": "Queues work without capturing execution context",
                "right": true
              },
              {
                "answer": "Renders thread work",
                "right": false
              },
              {
                "answer": "Stops threading",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Memory<T>' in advanced C# optimization?",
            "short_title": "Memory<T>",
            "answers": [
              {
                "answer": "Manages memory blocks with ownership semantics",
                "right": true
              },
              {
                "answer": "Handles rendering memory",
                "right": false
              },
              {
                "answer": "Stops memory use",
                "right": false
              },
              {
                "answer": "Manages physics memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NativeMemory.Alloc()' provide in Unity’s unsafe context?",
            "short_title": "NativeMemory.Alloc",
            "answers": [
              {
                "answer": "Allocates unmanaged memory for performance",
                "right": true
              },
              {
                "answer": "Renders native memory",
                "right": false
              },
              {
                "answer": "Stops allocation",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'System.Runtime.CompilerServices.Unsafe' class?",
            "short_title": "Unsafe class",
            "answers": [
              {
                "answer": "Provides safe wrappers for pointer operations",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders unsafe data",
                "right": false
              },
              {
                "answer": "Stops optimization",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ThreadLocal<T>' optimize in multithreaded C#?",
            "short_title": "ThreadLocal<T>",
            "answers": [
              {
                "answer": "Provides per-thread variable instances",
                "right": true
              },
              {
                "answer": "Stops threading",
                "right": false
              },
              {
                "answer": "Renders threads",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'System.Buffers.MemoryPool<T>' in Unity?",
            "short_title": "MemoryPool<T>",
            "answers": [
              {
                "answer": "Manages reusable memory buffers",
                "right": true
              },
              {
                "answer": "Renders memory pools",
                "right": false
              },
              {
                "answer": "Stops memory pooling",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Volatile.Write()' ensure in C# threading?",
            "short_title": "Volatile.Write",
            "answers": [
              {
                "answer": "Immediate visibility of writes across threads",
                "right": true
              },
              {
                "answer": "Stops threading",
                "right": false
              },
              {
                "answer": "Renders writes",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'ref struct' in C# for Unity?",
            "short_title": "ref struct",
            "answers": [
              {
                "answer": "Restricts to stack-only, reducing GC pressure",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops structs",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Runtime.InteropServices.GCHandle.Alloc()' do?",
            "short_title": "GCHandle.Alloc",
            "answers": [
              {
                "answer": "Pins managed objects for unmanaged access",
                "right": true
              },
              {
                "answer": "Renders handles",
                "right": false
              },
              {
                "answer": "Stops GC",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'System.Threading.Tasks.ParallelOptions'?",
            "short_title": "ParallelOptions",
            "answers": [
              {
                "answer": "Configures parallel task execution",
                "right": true
              },
              {
                "answer": "Stops parallel tasks",
                "right": false
              },
              {
                "answer": "Renders tasks",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NativeArray<T>.CopyFrom()' optimize in Unity?",
            "short_title": "NativeArray.CopyFrom",
            "answers": [
              {
                "answer": "Fast data transfer to unmanaged memory",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops copying",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'System.Runtime.CompilerServices.InlineArray'?",
            "short_title": "InlineArray",
            "answers": [
              {
                "answer": "Reduces overhead for small fixed-size arrays",
                "right": true
              },
              {
                "answer": "Renders arrays",
                "right": false
              },
              {
                "answer": "Stops array use",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Threading.Barrier' provide in C#?",
            "short_title": "Barrier",
            "answers": [
              {
                "answer": "Synchronizes threads at a common point",
                "right": true
              },
              {
                "answer": "Stops threading",
                "right": false
              },
              {
                "answer": "Renders barriers",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'System.Buffers.IBufferWriter<T>'?",
            "short_title": "IBufferWriter<T>",
            "answers": [
              {
                "answer": "Writes data efficiently to buffers",
                "right": true
              },
              {
                "answer": "Stops buffer writing",
                "right": false
              },
              {
                "answer": "Renders buffers",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Runtime.GCSettings.LatencyMode' control?",
            "short_title": "LatencyMode",
            "answers": [
              {
                "answer": "GC latency behavior for performance tuning",
                "right": true
              },
              {
                "answer": "Rendering latency",
                "right": false
              },
              {
                "answer": "Physics latency",
                "right": false
              },
              {
                "answer": "Animation latency",
                "right": false
              }
            ]
          }
        ],
        "Low-Level C# and Unsafe Code": [
          {
            "title": "What is the primary advantage of using unsafe code in C#?",
            "short_title": "Unsafe code advantage",
            "answers": [
              {
                "answer": "Direct memory access for performance",
                "right": true
              },
              {
                "answer": "Simplified syntax",
                "right": false
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Error handling",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword enables unsafe code blocks in C#?",
            "short_title": "Unsafe keyword",
            "answers": [
              {
                "answer": "unsafe",
                "right": true
              },
              {
                "answer": "pointer",
                "right": false
              },
              {
                "answer": "fixed",
                "right": false
              },
              {
                "answer": "raw",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'fixed' keyword do in an unsafe block?",
            "short_title": "Fixed keyword",
            "answers": [
              {
                "answer": "Pins memory to prevent GC movement",
                "right": true
              },
              {
                "answer": "Creates a pointer",
                "right": false
              },
              {
                "answer": "Stops execution",
                "right": false
              },
              {
                "answer": "Allocates memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is a pointer in C# unsafe code?",
            "short_title": "Pointer definition",
            "answers": [
              {
                "answer": "A variable holding a memory address",
                "right": true
              },
              {
                "answer": "A class reference",
                "right": false
              },
              {
                "answer": "A method call",
                "right": false
              },
              {
                "answer": "A loop counter",
                "right": false
              }
            ]
          },
          {
            "title": "How do you declare a pointer to an integer in C#?",
            "short_title": "Pointer declaration",
            "answers": [
              {
                "answer": "int*",
                "right": true
              },
              {
                "answer": "int&",
                "right": false
              },
              {
                "answer": "int[]",
                "right": false
              },
              {
                "answer": "int#",
                "right": false
              }
            ]
          },
          {
            "title": "What does the '*' operator do with a pointer?",
            "short_title": "* operator",
            "answers": [
              {
                "answer": "Dereferences to access the value",
                "right": true
              },
              {
                "answer": "Multiplies values",
                "right": false
              },
              {
                "answer": "Creates a pointer",
                "right": false
              },
              {
                "answer": "Stops the pointer",
                "right": false
              }
            ]
          },
          {
            "title": "What does the '&' operator do in unsafe code?",
            "short_title": "& operator",
            "answers": [
              {
                "answer": "Gets the address of a variable",
                "right": true
              },
              {
                "answer": "References an object",
                "right": false
              },
              {
                "answer": "Adds two values",
                "right": false
              },
              {
                "answer": "Dereferences a pointer",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of unsafe code?",
            "short_title": "Unsafe in Unity",
            "answers": [
              {
                "answer": "Interfacing with native plugins",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Marshal.AllocHGlobal()' do?",
            "short_title": "AllocHGlobal",
            "answers": [
              {
                "answer": "Allocates unmanaged memory",
                "right": true
              },
              {
                "answer": "Frees managed memory",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Stops allocation",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace provides 'Marshal' for unsafe operations?",
            "short_title": "Marshal namespace",
            "answers": [
              {
                "answer": "System.Runtime.InteropServices",
                "right": true
              },
              {
                "answer": "System",
                "right": false
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System.Threading",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Marshal.FreeHGlobal()' do?",
            "short_title": "FreeHGlobal",
            "answers": [
              {
                "answer": "Frees unmanaged memory",
                "right": true
              },
              {
                "answer": "Allocates memory",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Pins memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'stackalloc' in C#?",
            "short_title": "Stackalloc",
            "answers": [
              {
                "answer": "Allocates memory on the stack",
                "right": true
              },
              {
                "answer": "Allocates heap memory",
                "right": false
              },
              {
                "answer": "Frees stack memory",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'sizeof()' return in unsafe code?",
            "short_title": "sizeof",
            "answers": [
              {
                "answer": "The size of a type in bytes",
                "right": true
              },
              {
                "answer": "The address of a type",
                "right": false
              },
              {
                "answer": "The value of a type",
                "right": false
              },
              {
                "answer": "The count of elements",
                "right": false
              }
            ]
          },
          {
            "title": "What risk does unsafe code introduce in Unity?",
            "short_title": "Unsafe risk",
            "answers": [
              {
                "answer": "Potential for memory corruption",
                "right": true
              },
              {
                "answer": "Slower rendering",
                "right": false
              },
              {
                "answer": "Stopped physics",
                "right": false
              },
              {
                "answer": "Broken loops",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Marshal.StructureToPtr()' do?",
            "short_title": "StructureToPtr",
            "answers": [
              {
                "answer": "Copies a struct to unmanaged memory",
                "right": true
              },
              {
                "answer": "Frees a struct",
                "right": false
              },
              {
                "answer": "Renders a struct",
                "right": false
              },
              {
                "answer": "Pins a struct",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity-specific use of 'stackalloc'?",
            "short_title": "Stackalloc in Unity",
            "answers": [
              {
                "answer": "Temporary buffers for native calls",
                "right": true
              },
              {
                "answer": "Rendering buffers",
                "right": false
              },
              {
                "answer": "Physics calculations",
                "right": false
              },
              {
                "answer": "UI management",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnsafeUtility.Malloc()' provide in Unity?",
            "short_title": "UnsafeUtility.Malloc",
            "answers": [
              {
                "answer": "Aligned unmanaged memory allocation",
                "right": true
              },
              {
                "answer": "Managed memory allocation",
                "right": false
              },
              {
                "answer": "Rendering memory",
                "right": false
              },
              {
                "answer": "Stopped memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnsafeUtility.Free()' do in Unity?",
            "short_title": "UnsafeUtility.Free",
            "answers": [
              {
                "answer": "Frees unmanaged memory allocated by UnsafeUtility",
                "right": true
              },
              {
                "answer": "Allocates memory",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Pins memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Marshal.PtrToStructure()' do?",
            "short_title": "PtrToStructure",
            "answers": [
              {
                "answer": "Converts unmanaged memory to a struct",
                "right": true
              },
              {
                "answer": "Frees a pointer",
                "right": false
              },
              {
                "answer": "Renders a struct",
                "right": false
              },
              {
                "answer": "Creates a pointer",
                "right": false
              }
            ]
          },
          {
            "title": "Why is unsafe code useful for Unity performance?",
            "short_title": "Unsafe performance",
            "answers": [
              {
                "answer": "It avoids GC overhead with direct memory",
                "right": true
              },
              {
                "answer": "It speeds up rendering",
                "right": false
              },
              {
                "answer": "It stops physics",
                "right": false
              },
              {
                "answer": "It simplifies loops",
                "right": false
              }
            ]
          }
        ],
        "Vector Spaces and Bases": [
          {
            "title": "What is a vector space in the context of game development?",
            "short_title": "Vector space definition",
            "answers": [
              {
                "answer": "A set of vectors closed under addition and scaling",
                "right": true
              },
              {
                "answer": "A single vector",
                "right": false
              },
              {
                "answer": "A rendering grid",
                "right": false
              },
              {
                "answer": "A transformation matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What does a basis define in a vector space?",
            "short_title": "Basis definition",
            "answers": [
              {
                "answer": "A set of vectors spanning the space",
                "right": true
              },
              {
                "answer": "A single direction",
                "right": false
              },
              {
                "answer": "A rendered set",
                "right": false
              },
              {
                "answer": "A scaling factor",
                "right": false
              }
            ]
          },
          {
            "title": "What property must a basis have in Unity’s 3D space?",
            "short_title": "Basis property",
            "answers": [
              {
                "answer": "Linear independence",
                "right": true
              },
              {
                "answer": "Parallel vectors",
                "right": false
              },
              {
                "answer": "Equal magnitudes",
                "right": false
              },
              {
                "answer": "Rendering alignment",
                "right": false
              }
            ]
          },
          {
            "title": "How many vectors form a basis in Unity’s 3D space?",
            "short_title": "Basis size",
            "answers": [
              {
                "answer": "3",
                "right": true
              },
              {
                "answer": "2",
                "right": false
              },
              {
                "answer": "4",
                "right": false
              },
              {
                "answer": "1",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.forward' represent in a basis?",
            "short_title": "Vector3.forward basis",
            "answers": [
              {
                "answer": "A basis vector along the Z-axis",
                "right": true
              },
              {
                "answer": "A random vector",
                "right": false
              },
              {
                "answer": "A rendered vector",
                "right": false
              },
              {
                "answer": "A scaling vector",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for vector spaces?",
            "short_title": "Vector space use",
            "answers": [
              {
                "answer": "Defining local coordinate systems",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does orthogonality mean for basis vectors?",
            "short_title": "Orthogonality",
            "answers": [
              {
                "answer": "Vectors are perpendicular",
                "right": true
              },
              {
                "answer": "Vectors are parallel",
                "right": false
              },
              {
                "answer": "Vectors are equal",
                "right": false
              },
              {
                "answer": "Vectors are rendered",
                "right": false
              }
            ]
          },
          {
            "title": "How can you test orthogonality in Unity?",
            "short_title": "Test orthogonality",
            "answers": [
              {
                "answer": "Using Vector3.Dot() equaling zero",
                "right": true
              },
              {
                "answer": "Using Vector3.Cross()",
                "right": false
              },
              {
                "answer": "Using Vector3.Add()",
                "right": false
              },
              {
                "answer": "Using Vector3.Magnitude()",
                "right": false
              }
            ]
          },
          {
            "title": "What does an orthonormal basis provide?",
            "short_title": "Orthonormal basis",
            "answers": [
              {
                "answer": "Orthogonal vectors with unit length",
                "right": true
              },
              {
                "answer": "Parallel vectors",
                "right": false
              },
              {
                "answer": "Random vectors",
                "right": false
              },
              {
                "answer": "Scaled vectors",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity example of an orthonormal basis?",
            "short_title": "Unity orthonormal basis",
            "answers": [
              {
                "answer": "Vector3.up, Vector3.right, Vector3.forward",
                "right": true
              },
              {
                "answer": "Vector3.zero",
                "right": false
              },
              {
                "answer": "Vector3.one",
                "right": false
              },
              {
                "answer": "Vector3.forward only",
                "right": false
              }
            ]
          },
          {
            "title": "What does spanning a vector space mean?",
            "short_title": "Spanning",
            "answers": [
              {
                "answer": "All vectors can be expressed as linear combinations",
                "right": true
              },
              {
                "answer": "Vectors are parallel",
                "right": false
              },
              {
                "answer": "Vectors are rendered",
                "right": false
              },
              {
                "answer": "Vectors are orthogonal",
                "right": false
              }
            ]
          },
          {
            "title": "How does Unity use bases for transformations?",
            "short_title": "Bases in transformations",
            "answers": [
              {
                "answer": "To define local-to-world coordinate systems",
                "right": true
              },
              {
                "answer": "To render objects",
                "right": false
              },
              {
                "answer": "To stop physics",
                "right": false
              },
              {
                "answer": "To create loops",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.TransformVector()' do with bases?",
            "short_title": "TransformVector",
            "answers": [
              {
                "answer": "Converts a vector between basis systems",
                "right": true
              },
              {
                "answer": "Renders a vector",
                "right": false
              },
              {
                "answer": "Scales a vector",
                "right": false
              },
              {
                "answer": "Stops a vector",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use of orthonormal bases?",
            "short_title": "Orthonormal use",
            "answers": [
              {
                "answer": "Defining camera orientation",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does linear independence ensure in a basis?",
            "short_title": "Linear independence",
            "answers": [
              {
                "answer": "No vector is a combination of others",
                "right": true
              },
              {
                "answer": "Vectors are parallel",
                "right": false
              },
              {
                "answer": "Vectors are equal",
                "right": false
              },
              {
                "answer": "Vectors are rendered",
                "right": false
              }
            ]
          },
          {
            "title": "How can you test linear independence in Unity?",
            "short_title": "Test independence",
            "answers": [
              {
                "answer": "Check if cross products are non-zero",
                "right": true
              },
              {
                "answer": "Use Vector3.Dot()",
                "right": false
              },
              {
                "answer": "Use Vector3.Add()",
                "right": false
              },
              {
                "answer": "Use Vector3.Render()",
                "right": false
              }
            ]
          },
          {
            "title": "What does a change of basis do in Unity?",
            "short_title": "Change of basis",
            "answers": [
              {
                "answer": "Converts coordinates between systems",
                "right": true
              },
              {
                "answer": "Renders coordinates",
                "right": false
              },
              {
                "answer": "Scales coordinates",
                "right": false
              },
              {
                "answer": "Stops coordinates",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity shader use of vector spaces?",
            "short_title": "Shader use",
            "answers": [
              {
                "answer": "Defining tangent space for lighting",
                "right": true
              },
              {
                "answer": "Rendering shaders",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.GetColumn()' relate to bases?",
            "short_title": "GetColumn",
            "answers": [
              {
                "answer": "Extracts basis vectors of a transformation",
                "right": true
              },
              {
                "answer": "Renders columns",
                "right": false
              },
              {
                "answer": "Scales columns",
                "right": false
              },
              {
                "answer": "Stops columns",
                "right": false
              }
            ]
          },
          {
            "title": "What is a physics use of vector spaces in Unity?",
            "short_title": "Physics use",
            "answers": [
              {
                "answer": "Resolving collision directions",
                "right": true
              },
              {
                "answer": "Rendering collisions",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          }
        ],
        "Advanced Asynchronous and Parallel Programming": [
          {
            "title": "What is the primary benefit of advanced asynchronous programming in C#?",
            "short_title": "Async benefit",
            "answers": [
              {
                "answer": "Efficient non-blocking task execution",
                "right": true
              },
              {
                "answer": "Simplified rendering",
                "right": false
              },
              {
                "answer": "Faster loops",
                "right": false
              },
              {
                "answer": "Reduced memory usage",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Task.WhenAll()' do in C#?",
            "short_title": "Task.WhenAll",
            "answers": [
              {
                "answer": "Waits for multiple tasks to complete",
                "right": true
              },
              {
                "answer": "Cancels tasks",
                "right": false
              },
              {
                "answer": "Runs a single task",
                "right": false
              },
              {
                "answer": "Renders tasks",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'TaskCompletionSource' in C#?",
            "short_title": "TaskCompletionSource",
            "answers": [
              {
                "answer": "Creates a Task with manual completion",
                "right": true
              },
              {
                "answer": "Stops a task",
                "right": false
              },
              {
                "answer": "Renders a task",
                "right": false
              },
              {
                "answer": "Schedules a task",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Parallel.For()' provide in C#?",
            "short_title": "Parallel.For",
            "answers": [
              {
                "answer": "Parallel iteration over a range",
                "right": true
              },
              {
                "answer": "Sequential looping",
                "right": false
              },
              {
                "answer": "Rendering loops",
                "right": false
              },
              {
                "answer": "Stopping loops",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace is required for Parallel class operations?",
            "short_title": "Parallel namespace",
            "answers": [
              {
                "answer": "System.Threading.Tasks",
                "right": true
              },
              {
                "answer": "System",
                "right": false
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System.Collections",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'async Task<int>' indicate in a method signature?",
            "short_title": "Async Task<int>",
            "answers": [
              {
                "answer": "An async method returning an integer",
                "right": true
              },
              {
                "answer": "A synchronous method",
                "right": false
              },
              {
                "answer": "A void method",
                "right": false
              },
              {
                "answer": "A rendering task",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of 'Task.Run()'?",
            "short_title": "Task.Run in Unity",
            "answers": [
              {
                "answer": "Running heavy computations off the main thread",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Task.Wait()' do?",
            "short_title": "Task.Wait",
            "answers": [
              {
                "answer": "Blocks until the task completes",
                "right": true
              },
              {
                "answer": "Cancels the task",
                "right": false
              },
              {
                "answer": "Runs the task",
                "right": false
              },
              {
                "answer": "Renders the task",
                "right": false
              }
            ]
          },
          {
            "title": "What is the risk of using 'Task.Wait()' in Unity’s main thread?",
            "short_title": "Task.Wait risk",
            "answers": [
              {
                "answer": "It can freeze the game",
                "right": true
              },
              {
                "answer": "It speeds up rendering",
                "right": false
              },
              {
                "answer": "It stops physics",
                "right": false
              },
              {
                "answer": "It creates garbage",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'IJobParallelFor' optimize in Unity?",
            "short_title": "IJobParallelFor",
            "answers": [
              {
                "answer": "Parallel processing of array data",
                "right": true
              },
              {
                "answer": "Sequential tasks",
                "right": false
              },
              {
                "answer": "Rendering jobs",
                "right": false
              },
              {
                "answer": "Physics jobs",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Task.Factory.StartNew()' provide?",
            "short_title": "Task.Factory.StartNew",
            "answers": [
              {
                "answer": "Custom task creation and execution",
                "right": true
              },
              {
                "answer": "Stops a task",
                "right": false
              },
              {
                "answer": "Renders a task",
                "right": false
              },
              {
                "answer": "Cancels a task",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'CancellationToken' in async tasks?",
            "short_title": "CancellationToken",
            "answers": [
              {
                "answer": "Signals task cancellation",
                "right": true
              },
              {
                "answer": "Starts a task",
                "right": false
              },
              {
                "answer": "Renders cancellation",
                "right": false
              },
              {
                "answer": "Pauses a task",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Task.ContinueWith()' do?",
            "short_title": "Task.ContinueWith",
            "answers": [
              {
                "answer": "Runs a task after another completes",
                "right": true
              },
              {
                "answer": "Cancels a task",
                "right": false
              },
              {
                "answer": "Stops a task",
                "right": false
              },
              {
                "answer": "Renders a task",
                "right": false
              }
            ]
          },
          {
            "title": "What is a practical Unity use of 'Parallel.ForEach()'?",
            "short_title": "Parallel.ForEach in Unity",
            "answers": [
              {
                "answer": "Processing a list of enemies off-thread",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'TaskScheduler' control?",
            "short_title": "TaskScheduler",
            "answers": [
              {
                "answer": "How tasks are scheduled and executed",
                "right": true
              },
              {
                "answer": "Task rendering",
                "right": false
              },
              {
                "answer": "Task cancellation",
                "right": false
              },
              {
                "answer": "Task pausing",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ValueTask<T>' optimize over 'Task<T>'?",
            "short_title": "ValueTask<T>",
            "answers": [
              {
                "answer": "Reduces allocations for synchronous results",
                "right": true
              },
              {
                "answer": "Increases thread usage",
                "right": false
              },
              {
                "answer": "Renders tasks",
                "right": false
              },
              {
                "answer": "Stops tasks",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'JobHandle' do in Unity’s Job System?",
            "short_title": "JobHandle",
            "answers": [
              {
                "answer": "Tracks and manages job completion",
                "right": true
              },
              {
                "answer": "Cancels jobs",
                "right": false
              },
              {
                "answer": "Renders jobs",
                "right": false
              },
              {
                "answer": "Creates threads",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Task.ConfigureAwait(false)' improve?",
            "short_title": "ConfigureAwait",
            "answers": [
              {
                "answer": "Performance by avoiding context switching",
                "right": true
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Task cancellation",
                "right": false
              },
              {
                "answer": "Thread creation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParallelOptions.MaxDegreeOfParallelism' limit?",
            "short_title": "MaxDegreeOfParallelism",
            "answers": [
              {
                "answer": "The number of concurrent tasks",
                "right": true
              },
              {
                "answer": "The task duration",
                "right": false
              },
              {
                "answer": "The rendering threads",
                "right": false
              },
              {
                "answer": "The task memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity-specific challenge with async programming?",
            "short_title": "Async challenge in Unity",
            "answers": [
              {
                "answer": "Ensuring Unity API calls stay on the main thread",
                "right": true
              },
              {
                "answer": "Rendering async tasks",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              }
            ]
          }
        ],
        "Eigenvalues and Eigenvectors": [
          {
            "title": "What is an eigenvalue in the context of linear algebra?",
            "short_title": "Eigenvalue definition",
            "answers": [
              {
                "answer": "A scalar that scales an eigenvector",
                "right": true
              },
              {
                "answer": "A vector’s magnitude",
                "right": false
              },
              {
                "answer": "A rendering factor",
                "right": false
              },
              {
                "answer": "A transformation matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is an eigenvector in relation to a matrix?",
            "short_title": "Eigenvector definition",
            "answers": [
              {
                "answer": "A vector that only scales under transformation",
                "right": true
              },
              {
                "answer": "A random vector",
                "right": false
              },
              {
                "answer": "A rendered vector",
                "right": false
              },
              {
                "answer": "A basis vector",
                "right": false
              }
            ]
          },
          {
            "title": "What does the equation A*v = λ*v represent?",
            "short_title": "Eigen equation",
            "answers": [
              {
                "answer": "The eigenvalue problem",
                "right": true
              },
              {
                "answer": "A vector addition",
                "right": false
              },
              {
                "answer": "A rendering equation",
                "right": false
              },
              {
                "answer": "A scaling factor",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for eigenvalues?",
            "short_title": "Eigenvalue use",
            "answers": [
              {
                "answer": "Analyzing object inertia in physics",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "How many eigenvalues does a 3x3 matrix typically have?",
            "short_title": "Eigenvalue count",
            "answers": [
              {
                "answer": "Up to 3",
                "right": true
              },
              {
                "answer": "Exactly 2",
                "right": false
              },
              {
                "answer": "Exactly 4",
                "right": false
              },
              {
                "answer": "Exactly 1",
                "right": false
              }
            ]
          },
          {
            "title": "What does a real eigenvalue indicate about a transformation?",
            "short_title": "Real eigenvalue",
            "answers": [
              {
                "answer": "Scaling along an eigenvector",
                "right": true
              },
              {
                "answer": "Rotation only",
                "right": false
              },
              {
                "answer": "Translation only",
                "right": false
              },
              {
                "answer": "Rendering only",
                "right": false
              }
            ]
          },
          {
            "title": "What does a complex eigenvalue suggest?",
            "short_title": "Complex eigenvalue",
            "answers": [
              {
                "answer": "Rotation in the transformation",
                "right": true
              },
              {
                "answer": "Scaling only",
                "right": false
              },
              {
                "answer": "Translation only",
                "right": false
              },
              {
                "answer": "Rendering only",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity application of eigenvectors?",
            "short_title": "Eigenvector use",
            "answers": [
              {
                "answer": "Defining principal axes for physics",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the characteristic polynomial determine?",
            "short_title": "Characteristic polynomial",
            "answers": [
              {
                "answer": "The eigenvalues of a matrix",
                "right": true
              },
              {
                "answer": "The eigenvectors",
                "right": false
              },
              {
                "answer": "The rendered matrix",
                "right": false
              },
              {
                "answer": "The matrix inverse",
                "right": false
              }
            ]
          },
          {
            "title": "How is the characteristic polynomial computed?",
            "short_title": "Compute polynomial",
            "answers": [
              {
                "answer": "det(A - λI) = 0",
                "right": true
              },
              {
                "answer": "A + λI",
                "right": false
              },
              {
                "answer": "A * λ",
                "right": false
              },
              {
                "answer": "A / λ",
                "right": false
              }
            ]
          },
          {
            "title": "What does a zero eigenvalue indicate?",
            "short_title": "Zero eigenvalue",
            "answers": [
              {
                "answer": "The matrix is singular",
                "right": true
              },
              {
                "answer": "The matrix is identity",
                "right": false
              },
              {
                "answer": "The matrix is rendered",
                "right": false
              },
              {
                "answer": "The matrix is orthogonal",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity shader use of eigenvalues?",
            "short_title": "Shader eigenvalue use",
            "answers": [
              {
                "answer": "Analyzing deformation stress",
                "right": true
              },
              {
                "answer": "Rendering textures",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the eigenvector’s direction represent?",
            "short_title": "Eigenvector direction",
            "answers": [
              {
                "answer": "The axis of invariant transformation",
                "right": true
              },
              {
                "answer": "A random direction",
                "right": false
              },
              {
                "answer": "A rendered direction",
                "right": false
              },
              {
                "answer": "A scaling direction",
                "right": false
              }
            ]
          },
          {
            "title": "What does diagonalization of a matrix achieve?",
            "short_title": "Diagonalization",
            "answers": [
              {
                "answer": "Expresses it using eigenvalues",
                "right": true
              },
              {
                "answer": "Renders the matrix",
                "right": false
              },
              {
                "answer": "Inverts the matrix",
                "right": false
              },
              {
                "answer": "Stops the matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is required for a matrix to be diagonalizable?",
            "short_title": "Diagonalizable matrix",
            "answers": [
              {
                "answer": "Enough linearly independent eigenvectors",
                "right": true
              },
              {
                "answer": "Zero eigenvalues",
                "right": false
              },
              {
                "answer": "Complex eigenvalues",
                "right": false
              },
              {
                "answer": "Rendered eigenvectors",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.determinant' relate to eigenvalues?",
            "short_title": "Determinant and eigenvalues",
            "answers": [
              {
                "answer": "Product of eigenvalues",
                "right": true
              },
              {
                "answer": "Sum of eigenvalues",
                "right": false
              },
              {
                "answer": "Rendered determinant",
                "right": false
              },
              {
                "answer": "Inverse of eigenvalues",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity physics use of eigenvalues?",
            "short_title": "Physics eigenvalue use",
            "answers": [
              {
                "answer": "Computing moments of inertia",
                "right": true
              },
              {
                "answer": "Rendering physics",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does spectral decomposition involve?",
            "short_title": "Spectral decomposition",
            "answers": [
              {
                "answer": "Breaking a matrix into eigenvalues and eigenvectors",
                "right": true
              },
              {
                "answer": "Rendering a matrix",
                "right": false
              },
              {
                "answer": "Scaling a matrix",
                "right": false
              },
              {
                "answer": "Stopping a matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What does a repeated eigenvalue imply?",
            "short_title": "Repeated eigenvalue",
            "answers": [
              {
                "answer": "Multiple eigenvectors or degeneracy",
                "right": true
              },
              {
                "answer": "No eigenvectors",
                "right": false
              },
              {
                "answer": "Rendered vectors",
                "right": false
              },
              {
                "answer": "Singular matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity optimization use of eigenvalues?",
            "short_title": "Optimization use",
            "answers": [
              {
                "answer": "Simplifying constraint solvers",
                "right": true
              },
              {
                "answer": "Rendering optimizations",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          }
        ],
        "Affine Transformations": [
          {
            "title": "What is an affine transformation in game development?",
            "short_title": "Affine transformation definition",
            "answers": [
              {
                "answer": "A combination of linear transformations and translation",
                "right": true
              },
              {
                "answer": "A single rotation",
                "right": false
              },
              {
                "answer": "A rendering process",
                "right": false
              },
              {
                "answer": "A scaling factor",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity type represents an affine transformation?",
            "short_title": "Unity affine type",
            "answers": [
              {
                "answer": "Matrix4x4",
                "right": true
              },
              {
                "answer": "Vector3",
                "right": false
              },
              {
                "answer": "Quaternion",
                "right": false
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What distinguishes an affine transformation from a linear one?",
            "short_title": "Affine vs Linear",
            "answers": [
              {
                "answer": "It includes translation",
                "right": true
              },
              {
                "answer": "It excludes scaling",
                "right": false
              },
              {
                "answer": "It excludes rotation",
                "right": false
              },
              {
                "answer": "It renders differently",
                "right": false
              }
            ]
          },
          {
            "title": "How is an affine transformation represented in Unity?",
            "short_title": "Affine representation",
            "answers": [
              {
                "answer": "Using a 4x4 matrix with a translation column",
                "right": true
              },
              {
                "answer": "Using a 3x3 matrix",
                "right": false
              },
              {
                "answer": "Using a single vector",
                "right": false
              },
              {
                "answer": "Using a quaternion",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.TRS()' create?",
            "short_title": "Matrix4x4.TRS",
            "answers": [
              {
                "answer": "An affine transformation matrix",
                "right": true
              },
              {
                "answer": "A linear transformation only",
                "right": false
              },
              {
                "answer": "A rendering matrix",
                "right": false
              },
              {
                "answer": "A scaling vector",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for affine transformations?",
            "short_title": "Affine use",
            "answers": [
              {
                "answer": "Positioning and rotating GameObjects",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "How does translation fit into an affine transformation?",
            "short_title": "Translation in affine",
            "answers": [
              {
                "answer": "Via the fourth column of a 4x4 matrix",
                "right": true
              },
              {
                "answer": "Via rotation only",
                "right": false
              },
              {
                "answer": "Via scaling only",
                "right": false
              },
              {
                "answer": "Via rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.TransformPoint()' do?",
            "short_title": "TransformPoint",
            "answers": [
              {
                "answer": "Applies an affine transformation to a point",
                "right": true
              },
              {
                "answer": "Renders a point",
                "right": false
              },
              {
                "answer": "Scales a point",
                "right": false
              },
              {
                "answer": "Stops a point",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.InverseTransformPoint()' achieve?",
            "short_title": "InverseTransformPoint",
            "answers": [
              {
                "answer": "Reverses an affine transformation",
                "right": true
              },
              {
                "answer": "Renders a point",
                "right": false
              },
              {
                "answer": "Rotates a point",
                "right": false
              },
              {
                "answer": "Creates a point",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of homogeneous coordinates in affine transformations?",
            "short_title": "Homogeneous coordinates",
            "answers": [
              {
                "answer": "Enable translation in a 4x4 matrix",
                "right": true
              },
              {
                "answer": "Render coordinates",
                "right": false
              },
              {
                "answer": "Scale coordinates",
                "right": false
              },
              {
                "answer": "Rotate coordinates",
                "right": false
              }
            ]
          },
          {
            "title": "How do you represent a point in homogeneous coordinates?",
            "short_title": "Homogeneous point",
            "answers": [
              {
                "answer": "(x, y, z, 1)",
                "right": true
              },
              {
                "answer": "(x, y, z, 0)",
                "right": false
              },
              {
                "answer": "(x, y, 0, 1)",
                "right": false
              },
              {
                "answer": "(x, y, z)",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.MultiplyPoint()' do?",
            "short_title": "MultiplyPoint",
            "answers": [
              {
                "answer": "Applies an affine transformation to a point",
                "right": true
              },
              {
                "answer": "Renders a point",
                "right": false
              },
              {
                "answer": "Scales a point",
                "right": false
              },
              {
                "answer": "Stops a point",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.MultiplyVector()' exclude compared to MultiplyPoint()?",
            "short_title": "MultiplyVector vs MultiplyPoint",
            "answers": [
              {
                "answer": "Translation component",
                "right": true
              },
              {
                "answer": "Rotation component",
                "right": false
              },
              {
                "answer": "Scaling component",
                "right": false
              },
              {
                "answer": "Rendering component",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use of affine transformations?",
            "short_title": "Affine transformation use",
            "answers": [
              {
                "answer": "Animating hierarchical objects",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Transform.localToWorldMatrix' represent?",
            "short_title": "localToWorldMatrix",
            "answers": [
              {
                "answer": "An affine transformation to world space",
                "right": true
              },
              {
                "answer": "A linear transformation only",
                "right": false
              },
              {
                "answer": "A rendered matrix",
                "right": false
              },
              {
                "answer": "A scaling matrix",
                "right": false
              }
            ]
          },
          {
            "title": "How do you invert an affine transformation in Unity?",
            "short_title": "Invert affine",
            "answers": [
              {
                "answer": "Using Matrix4x4.inverse",
                "right": true
              },
              {
                "answer": "Using Matrix4x4.transpose",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.zero",
                "right": false
              },
              {
                "answer": "Using Matrix4x4.reverse",
                "right": false
              }
            ]
          },
          {
            "title": "What does an inverse affine transformation do?",
            "short_title": "Inverse affine",
            "answers": [
              {
                "answer": "Reverses position, rotation, and scale",
                "right": true
              },
              {
                "answer": "Renders a transformation",
                "right": false
              },
              {
                "answer": "Scales a transformation",
                "right": false
              },
              {
                "answer": "Stops a transformation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Camera.projectionMatrix' involve?",
            "short_title": "projectionMatrix",
            "answers": [
              {
                "answer": "An affine transformation for projection",
                "right": true
              },
              {
                "answer": "A rendering matrix only",
                "right": false
              },
              {
                "answer": "A scaling matrix",
                "right": false
              },
              {
                "answer": "A rotation matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity animation use of affine transformations?",
            "short_title": "Animation use",
            "answers": [
              {
                "answer": "Blending bone positions and rotations",
                "right": true
              },
              {
                "answer": "Rendering animations",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does combining affine transformations achieve?",
            "short_title": "Combine affine",
            "answers": [
              {
                "answer": "Chains multiple movements and rotations",
                "right": true
              },
              {
                "answer": "Renders transformations",
                "right": false
              },
              {
                "answer": "Scales transformations",
                "right": false
              },
              {
                "answer": "Stops transformations",
                "right": false
              }
            ]
          }
        ],
        "Projective Geometry": [
          {
            "title": "What is projective geometry in the context of game development?",
            "short_title": "Projective geometry definition",
            "answers": [
              {
                "answer": "A framework for perspective and projection",
                "right": true
              },
              {
                "answer": "A simple vector operation",
                "right": false
              },
              {
                "answer": "A rendering loop",
                "right": false
              },
              {
                "answer": "A scaling method",
                "right": false
              }
            ]
          },
          {
            "title": "What does Unity use projective geometry for?",
            "short_title": "Unity projective use",
            "answers": [
              {
                "answer": "Camera perspective projections",
                "right": true
              },
              {
                "answer": "Object scaling",
                "right": false
              },
              {
                "answer": "Physics calculations",
                "right": false
              },
              {
                "answer": "Loop creation",
                "right": false
              }
            ]
          },
          {
            "title": "What are homogeneous coordinates in projective geometry?",
            "short_title": "Homogeneous coordinates",
            "answers": [
              {
                "answer": "A 4D representation adding a w component",
                "right": true
              },
              {
                "answer": "A 3D vector",
                "right": false
              },
              {
                "answer": "A rendered coordinate",
                "right": false
              },
              {
                "answer": "A single scalar",
                "right": false
              }
            ]
          },
          {
            "title": "How are 3D points represented in homogeneous coordinates?",
            "short_title": "3D homogeneous",
            "answers": [
              {
                "answer": "(x, y, z, 1)",
                "right": true
              },
              {
                "answer": "(x, y, z, 0)",
                "right": false
              },
              {
                "answer": "(x, y, 0, 1)",
                "right": false
              },
              {
                "answer": "(x, y, z)",
                "right": false
              }
            ]
          },
          {
            "title": "What does the w component enable in projective space?",
            "short_title": "w component",
            "answers": [
              {
                "answer": "Perspective division",
                "right": true
              },
              {
                "answer": "Rotation only",
                "right": false
              },
              {
                "answer": "Scaling only",
                "right": false
              },
              {
                "answer": "Rendering only",
                "right": false
              }
            ]
          },
          {
            "title": "What Unity matrix handles projective transformations?",
            "short_title": "Projective matrix",
            "answers": [
              {
                "answer": "Camera.projectionMatrix",
                "right": true
              },
              {
                "answer": "Transform.localToWorldMatrix",
                "right": false
              },
              {
                "answer": "Matrix4x4.identity",
                "right": false
              },
              {
                "answer": "Vector3.matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What does the projection matrix transform in Unity?",
            "short_title": "Projection transform",
            "answers": [
              {
                "answer": "World space to clip space",
                "right": true
              },
              {
                "answer": "Local space to world space",
                "right": false
              },
              {
                "answer": "Clip space to local space",
                "right": false
              },
              {
                "answer": "Rendered space",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for projective geometry?",
            "short_title": "Projective use",
            "answers": [
              {
                "answer": "Rendering 3D scenes in perspective",
                "right": true
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              },
              {
                "answer": "Scaling objects",
                "right": false
              }
            ]
          },
          {
            "title": "What does the clip space represent in Unity?",
            "short_title": "Clip space",
            "answers": [
              {
                "answer": "A space after projection, before screen",
                "right": true
              },
              {
                "answer": "World space",
                "right": false
              },
              {
                "answer": "Local space",
                "right": false
              },
              {
                "answer": "Rendered space",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GL.GetGPUProjectionMatrix()' adjust?",
            "short_title": "GetGPUProjectionMatrix",
            "answers": [
              {
                "answer": "Converts to GPU-compatible projection",
                "right": true
              },
              {
                "answer": "Renders a matrix",
                "right": false
              },
              {
                "answer": "Scales a matrix",
                "right": false
              },
              {
                "answer": "Stops a matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of perspective division?",
            "short_title": "Perspective division",
            "answers": [
              {
                "answer": "Normalizes w to project onto screen",
                "right": true
              },
              {
                "answer": "Renders division",
                "right": false
              },
              {
                "answer": "Scales coordinates",
                "right": false
              },
              {
                "answer": "Rotates coordinates",
                "right": false
              }
            ]
          },
          {
            "title": "What does a perspective projection matrix do?",
            "short_title": "Perspective projection",
            "answers": [
              {
                "answer": "Creates depth perspective",
                "right": true
              },
              {
                "answer": "Flattens depth",
                "right": false
              },
              {
                "answer": "Renders flat scenes",
                "right": false
              },
              {
                "answer": "Stops depth",
                "right": false
              }
            ]
          },
          {
            "title": "What does an orthographic projection matrix do in Unity?",
            "short_title": "Orthographic projection",
            "answers": [
              {
                "answer": "Projects without perspective",
                "right": true
              },
              {
                "answer": "Adds perspective",
                "right": false
              },
              {
                "answer": "Renders perspective",
                "right": false
              },
              {
                "answer": "Scales perspective",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use of orthographic projection?",
            "short_title": "Orthographic use",
            "answers": [
              {
                "answer": "2D game rendering",
                "right": true
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              },
              {
                "answer": "Rendering 3D scenes",
                "right": false
              }
            ]
          },
          {
            "title": "How does 'Camera.WorldToScreenPoint()' relate to projective geometry?",
            "short_title": "WorldToScreenPoint",
            "answers": [
              {
                "answer": "Projects world space to screen via matrices",
                "right": true
              },
              {
                "answer": "Renders a point",
                "right": false
              },
              {
                "answer": "Scales a point",
                "right": false
              },
              {
                "answer": "Stops a point",
                "right": false
              }
            ]
          },
          {
            "title": "What does the fourth row of a projection matrix control?",
            "short_title": "Fourth row",
            "answers": [
              {
                "answer": "Perspective or orthographic effects",
                "right": true
              },
              {
                "answer": "Rotation only",
                "right": false
              },
              {
                "answer": "Scaling only",
                "right": false
              },
              {
                "answer": "Rendering only",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity shader use of projective geometry?",
            "short_title": "Shader use",
            "answers": [
              {
                "answer": "Mapping textures in clip space",
                "right": true
              },
              {
                "answer": "Rendering shaders",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.Perspective()' create?",
            "short_title": "Matrix4x4.Perspective",
            "answers": [
              {
                "answer": "A perspective projection matrix",
                "right": true
              },
              {
                "answer": "An orthographic matrix",
                "right": false
              },
              {
                "answer": "A rendered matrix",
                "right": false
              },
              {
                "answer": "A scaling matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Matrix4x4.Ortho()' generate?",
            "short_title": "Matrix4x4.Ortho",
            "answers": [
              {
                "answer": "An orthographic projection matrix",
                "right": true
              },
              {
                "answer": "A perspective matrix",
                "right": false
              },
              {
                "answer": "A rendered matrix",
                "right": false
              },
              {
                "answer": "A rotation matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity UI use of projective geometry?",
            "short_title": "UI use",
            "answers": [
              {
                "answer": "Positioning UI in screen space",
                "right": true
              },
              {
                "answer": "Rendering UI loops",
                "right": false
              },
              {
                "answer": "Scaling UI physics",
                "right": false
              },
              {
                "answer": "Stopping UI",
                "right": false
              }
            ]
          }
        ],
        "Numerical Linear Algebra": [
          {
            "title": "What is numerical linear algebra in game development?",
            "short_title": "Numerical linear algebra definition",
            "answers": [
              {
                "answer": "Methods for solving linear systems and optimization",
                "right": true
              },
              {
                "answer": "A rendering technique",
                "right": false
              },
              {
                "answer": "A single vector operation",
                "right": false
              },
              {
                "answer": "A looping structure",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of numerical linear algebra?",
            "short_title": "Unity use",
            "answers": [
              {
                "answer": "Solving physics constraints",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does solving Ax = b represent?",
            "short_title": "Ax = b",
            "answers": [
              {
                "answer": "Finding x for a linear system",
                "right": true
              },
              {
                "answer": "Rendering a matrix",
                "right": false
              },
              {
                "answer": "Scaling a vector",
                "right": false
              },
              {
                "answer": "Rotating a basis",
                "right": false
              }
            ]
          },
          {
            "title": "What is Gaussian elimination used for?",
            "short_title": "Gaussian elimination",
            "answers": [
              {
                "answer": "Solving linear systems directly",
                "right": true
              },
              {
                "answer": "Rendering equations",
                "right": false
              },
              {
                "answer": "Scaling matrices",
                "right": false
              },
              {
                "answer": "Stopping solutions",
                "right": false
              }
            ]
          },
          {
            "title": "What does LU decomposition achieve?",
            "short_title": "LU decomposition",
            "answers": [
              {
                "answer": "Factors a matrix for efficient solving",
                "right": true
              },
              {
                "answer": "Renders a matrix",
                "right": false
              },
              {
                "answer": "Scales a matrix",
                "right": false
              },
              {
                "answer": "Rotates a matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity physics application of numerical methods?",
            "short_title": "Physics application",
            "answers": [
              {
                "answer": "Resolving rigidbody collisions",
                "right": true
              },
              {
                "answer": "Rendering physics",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Jacobi method solve iteratively?",
            "short_title": "Jacobi method",
            "answers": [
              {
                "answer": "Linear systems",
                "right": true
              },
              {
                "answer": "Non-linear equations",
                "right": false
              },
              {
                "answer": "Rendered systems",
                "right": false
              },
              {
                "answer": "Scaled systems",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Gauss-Seidel method improve over Jacobi?",
            "short_title": "Gauss-Seidel",
            "answers": [
              {
                "answer": "Faster convergence",
                "right": true
              },
              {
                "answer": "Slower convergence",
                "right": false
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Stopping speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use of iterative solvers?",
            "short_title": "Iterative solvers use",
            "answers": [
              {
                "answer": "Optimizing cloth simulations",
                "right": true
              },
              {
                "answer": "Rendering cloth",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the conjugate gradient method optimize?",
            "short_title": "Conjugate gradient",
            "answers": [
              {
                "answer": "Symmetric positive definite systems",
                "right": true
              },
              {
                "answer": "Non-symmetric systems",
                "right": false
              },
              {
                "answer": "Rendered systems",
                "right": false
              },
              {
                "answer": "Scaled systems",
                "right": false
              }
            ]
          },
          {
            "title": "What is a preconditioner in numerical methods?",
            "short_title": "Preconditioner",
            "answers": [
              {
                "answer": "Improves convergence of iterative solvers",
                "right": true
              },
              {
                "answer": "Renders solutions",
                "right": false
              },
              {
                "answer": "Stops convergence",
                "right": false
              },
              {
                "answer": "Scales matrices",
                "right": false
              }
            ]
          },
          {
            "title": "What does QR decomposition do?",
            "short_title": "QR decomposition",
            "answers": [
              {
                "answer": "Factors a matrix into orthogonal and triangular",
                "right": true
              },
              {
                "answer": "Renders a matrix",
                "right": false
              },
              {
                "answer": "Scales a matrix",
                "right": false
              },
              {
                "answer": "Rotates a matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity ML use of numerical linear algebra?",
            "short_title": "ML use",
            "answers": [
              {
                "answer": "Training neural networks",
                "right": true
              },
              {
                "answer": "Rendering ML",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping ML",
                "right": false
              }
            ]
          },
          {
            "title": "What does Cholesky decomposition require?",
            "short_title": "Cholesky requirement",
            "answers": [
              {
                "answer": "A symmetric positive definite matrix",
                "right": true
              },
              {
                "answer": "A non-symmetric matrix",
                "right": false
              },
              {
                "answer": "A rendered matrix",
                "right": false
              },
              {
                "answer": "A scaled matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What does the SVD (Singular Value Decomposition) provide?",
            "short_title": "SVD",
            "answers": [
              {
                "answer": "Factors any matrix into UΣV^T",
                "right": true
              },
              {
                "answer": "Renders a matrix",
                "right": false
              },
              {
                "answer": "Scales a matrix",
                "right": false
              },
              {
                "answer": "Stops a matrix",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use of SVD?",
            "short_title": "SVD use",
            "answers": [
              {
                "answer": "Analyzing deformation modes",
                "right": true
              },
              {
                "answer": "Rendering deformations",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the condition number of a matrix indicate?",
            "short_title": "Condition number",
            "answers": [
              {
                "answer": "Sensitivity to numerical errors",
                "right": true
              },
              {
                "answer": "Rendering accuracy",
                "right": false
              },
              {
                "answer": "Scaling factor",
                "right": false
              },
              {
                "answer": "Rotation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What does Krylov subspace methods optimize?",
            "short_title": "Krylov methods",
            "answers": [
              {
                "answer": "Large sparse system solutions",
                "right": true
              },
              {
                "answer": "Small dense systems",
                "right": false
              },
              {
                "answer": "Rendered systems",
                "right": false
              },
              {
                "answer": "Scaled systems",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity optimization use of numerical methods?",
            "short_title": "Optimization use",
            "answers": [
              {
                "answer": "Real-time joint constraints",
                "right": true
              },
              {
                "answer": "Rendering optimization",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does iterative refinement improve?",
            "short_title": "Iterative refinement",
            "answers": [
              {
                "answer": "Accuracy of numerical solutions",
                "right": true
              },
              {
                "answer": "Rendering precision",
                "right": false
              },
              {
                "answer": "Scaling speed",
                "right": false
              },
              {
                "answer": "Stopping accuracy",
                "right": false
              }
            ]
          }
        ],
        "3D Trigonometry and Spherical Coordinates": [
          {
            "title": "What does 3D trigonometry involve in game development?",
            "short_title": "3D trigonometry definition",
            "answers": [
              {
                "answer": "Angles and distances in 3D space",
                "right": true
              },
              {
                "answer": "2D rotations only",
                "right": false
              },
              {
                "answer": "Rendering processes",
                "right": false
              },
              {
                "answer": "Scaling factors",
                "right": false
              }
            ]
          },
          {
            "title": "What are spherical coordinates in 3D?",
            "short_title": "Spherical coordinates",
            "answers": [
              {
                "answer": "(ρ, θ, φ) for radius, azimuth, and inclination",
                "right": true
              },
              {
                "answer": "(x, y, z) for Cartesian",
                "right": false
              },
              {
                "answer": "(r, θ) for polar",
                "right": false
              },
              {
                "answer": "(ρ, φ) only",
                "right": false
              }
            ]
          },
          {
            "title": "How do you convert spherical (ρ, θ, φ) to Cartesian (x, y, z)?",
            "short_title": "Spherical to Cartesian",
            "answers": [
              {
                "answer": "x = ρ*sin(φ)*cos(θ), y = ρ*sin(φ)*sin(θ), z = ρ*cos(φ)",
                "right": true
              },
              {
                "answer": "x = ρ*cos(θ), y = ρ*sin(θ), z = ρ",
                "right": false
              },
              {
                "answer": "x = ρ*sin(θ), y = ρ*cos(θ), z = ρ",
                "right": false
              },
              {
                "answer": "x = ρ, y = θ, z = φ",
                "right": false
              }
            ]
          },
          {
            "title": "What does ρ represent in spherical coordinates?",
            "short_title": "ρ in spherical",
            "answers": [
              {
                "answer": "Radial distance from the origin",
                "right": true
              },
              {
                "answer": "Azimuth angle",
                "right": false
              },
              {
                "answer": "Inclination angle",
                "right": false
              },
              {
                "answer": "Rendered distance",
                "right": false
              }
            ]
          },
          {
            "title": "What does θ represent in spherical coordinates?",
            "short_title": "θ in spherical",
            "answers": [
              {
                "answer": "Azimuth angle in the xy-plane",
                "right": true
              },
              {
                "answer": "Radial distance",
                "right": false
              },
              {
                "answer": "Inclination from z-axis",
                "right": false
              },
              {
                "answer": "Rendered angle",
                "right": false
              }
            ]
          },
          {
            "title": "What does φ represent in spherical coordinates?",
            "short_title": "φ in spherical",
            "answers": [
              {
                "answer": "Inclination angle from the z-axis",
                "right": true
              },
              {
                "answer": "Azimuth angle",
                "right": false
              },
              {
                "answer": "Radial distance",
                "right": false
              },
              {
                "answer": "Scaled angle",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for spherical coordinates?",
            "short_title": "Spherical use",
            "answers": [
              {
                "answer": "Positioning objects on a sphere",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "How do you calculate x in spherical coordinates in Unity?",
            "short_title": "Calculate x",
            "answers": [
              {
                "answer": "ρ * Mathf.Sin(φ) * Mathf.Cos(θ)",
                "right": true
              },
              {
                "answer": "ρ * Mathf.Cos(θ)",
                "right": false
              },
              {
                "answer": "ρ * Mathf.Sin(θ)",
                "right": false
              },
              {
                "answer": "ρ * Mathf.Tan(φ)",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Mathf.Atan2()' help with in 3D trigonometry?",
            "short_title": "Atan2 in 3D",
            "answers": [
              {
                "answer": "Calculating θ from x and y",
                "right": true
              },
              {
                "answer": "Rendering angles",
                "right": false
              },
              {
                "answer": "Scaling angles",
                "right": false
              },
              {
                "answer": "Stopping angles",
                "right": false
              }
            ]
          },
          {
            "title": "How do you convert Cartesian (x, y, z) to spherical ρ?",
            "short_title": "Cartesian to ρ",
            "answers": [
              {
                "answer": "Mathf.Sqrt(x*x + y*y + z*z)",
                "right": true
              },
              {
                "answer": "Mathf.Atan2(x, y)",
                "right": false
              },
              {
                "answer": "Mathf.Cos(z)",
                "right": false
              },
              {
                "answer": "Mathf.Sin(x + y)",
                "right": false
              }
            ]
          },
          {
            "title": "How do you calculate φ from Cartesian (x, y, z)?",
            "short_title": "Calculate φ",
            "answers": [
              {
                "answer": "Mathf.Acos(z / Mathf.Sqrt(x*x + y*y + z*z))",
                "right": true
              },
              {
                "answer": "Mathf.Atan2(x, y)",
                "right": false
              },
              {
                "answer": "Mathf.Sin(z)",
                "right": false
              },
              {
                "answer": "Mathf.Cos(x + y)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity camera use of spherical coordinates?",
            "short_title": "Camera use",
            "answers": [
              {
                "answer": "Orbiting around a target",
                "right": true
              },
              {
                "answer": "Rendering cameras",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.Distance()' relate to ρ?",
            "short_title": "Vector3.Distance",
            "answers": [
              {
                "answer": "Calculates ρ between two points",
                "right": true
              },
              {
                "answer": "Calculates θ",
                "right": false
              },
              {
                "answer": "Calculates φ",
                "right": false
              },
              {
                "answer": "Renders distance",
                "right": false
              }
            ]
          },
          {
            "title": "What does a φ of 0 represent?",
            "short_title": "φ = 0",
            "answers": [
              {
                "answer": "The positive z-axis",
                "right": true
              },
              {
                "answer": "The xy-plane",
                "right": false
              },
              {
                "answer": "The negative z-axis",
                "right": false
              },
              {
                "answer": "The origin",
                "right": false
              }
            ]
          },
          {
            "title": "How do you position an object in 3D using spherical coordinates?",
            "short_title": "Position in 3D",
            "answers": [
              {
                "answer": "new Vector3(ρ*sin(φ)*cos(θ), ρ*sin(φ)*sin(θ), ρ*cos(φ))",
                "right": true
              },
              {
                "answer": "new Vector3(ρ*cos(θ), ρ*sin(θ), ρ)",
                "right": false
              },
              {
                "answer": "new Vector3(ρ, θ, φ)",
                "right": false
              },
              {
                "answer": "new Vector3(ρ*sin(θ), ρ*cos(θ), ρ)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity particle use of spherical coordinates?",
            "short_title": "Particle use",
            "answers": [
              {
                "answer": "Distributing particles on a sphere",
                "right": true
              },
              {
                "answer": "Rendering particles",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does θ = π/2 represent in spherical coordinates?",
            "short_title": "θ = π/2",
            "answers": [
              {
                "answer": "The positive y-axis in the xy-plane",
                "right": true
              },
              {
                "answer": "The positive x-axis",
                "right": false
              },
              {
                "answer": "The positive z-axis",
                "right": false
              },
              {
                "answer": "The negative y-axis",
                "right": false
              }
            ]
          },
          {
            "title": "How does 'Quaternion.Euler()' relate to 3D trigonometry?",
            "short_title": "Quaternion.Euler",
            "answers": [
              {
                "answer": "Converts angles to rotations using trig",
                "right": true
              },
              {
                "answer": "Renders rotations",
                "right": false
              },
              {
                "answer": "Scales rotations",
                "right": false
              },
              {
                "answer": "Stops rotations",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity AI use of spherical coordinates?",
            "short_title": "AI use",
            "answers": [
              {
                "answer": "Spherical patrol paths",
                "right": true
              },
              {
                "answer": "Rendering AI",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does φ = π represent?",
            "short_title": "φ = π",
            "answers": [
              {
                "answer": "The negative z-axis",
                "right": true
              },
              {
                "answer": "The positive z-axis",
                "right": false
              },
              {
                "answer": "The xy-plane",
                "right": false
              },
              {
                "answer": "The origin",
                "right": false
              }
            ]
          }
        ],
        "Inverse Trigonometric Functions": [
          {
            "title": "What does the inverse sine function (arcsin) do?",
            "short_title": "Arcsin definition",
            "answers": [
              {
                "answer": "Finds the angle given a sine value",
                "right": true
              },
              {
                "answer": "Calculates the sine",
                "right": false
              },
              {
                "answer": "Renders an angle",
                "right": false
              },
              {
                "answer": "Scales a value",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Unity function for inverse sine?",
            "short_title": "Unity arcsin",
            "answers": [
              {
                "answer": "Mathf.Asin()",
                "right": true
              },
              {
                "answer": "Mathf.Sin()",
                "right": false
              },
              {
                "answer": "Mathf.Acos()",
                "right": false
              },
              {
                "answer": "Mathf.Atan()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the inverse cosine function (arccos) return?",
            "short_title": "Arccos definition",
            "answers": [
              {
                "answer": "The angle given a cosine value",
                "right": true
              },
              {
                "answer": "The cosine value",
                "right": false
              },
              {
                "answer": "A rendered angle",
                "right": false
              },
              {
                "answer": "A scaled cosine",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Unity function for inverse cosine?",
            "short_title": "Unity arccos",
            "answers": [
              {
                "answer": "Mathf.Acos()",
                "right": true
              },
              {
                "answer": "Mathf.Cos()",
                "right": false
              },
              {
                "answer": "Mathf.Asin()",
                "right": false
              },
              {
                "answer": "Mathf.Atan2()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the inverse tangent function (arctan) calculate?",
            "short_title": "Arctan definition",
            "answers": [
              {
                "answer": "The angle from a tangent ratio",
                "right": true
              },
              {
                "answer": "The tangent value",
                "right": false
              },
              {
                "answer": "A rendered tangent",
                "right": false
              },
              {
                "answer": "A scaled angle",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Unity function for inverse tangent?",
            "short_title": "Unity arctan",
            "answers": [
              {
                "answer": "Mathf.Atan()",
                "right": true
              },
              {
                "answer": "Mathf.Tan()",
                "right": false
              },
              {
                "answer": "Mathf.Asin()",
                "right": false
              },
              {
                "answer": "Mathf.Acos()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Mathf.Atan2(y, x)' improve over Mathf.Atan()?",
            "short_title": "Atan2 vs Atan",
            "answers": [
              {
                "answer": "Handles quadrants correctly",
                "right": true
              },
              {
                "answer": "Renders better",
                "right": false
              },
              {
                "answer": "Scales faster",
                "right": false
              },
              {
                "answer": "Stops calculation",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for inverse sine?",
            "short_title": "Arcsin use",
            "answers": [
              {
                "answer": "Finding the angle of a slope",
                "right": true
              },
              {
                "answer": "Rendering slopes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the range of Mathf.Asin()?",
            "short_title": "Asin range",
            "answers": [
              {
                "answer": "[-π/2, π/2]",
                "right": true
              },
              {
                "answer": "[0, π]",
                "right": false
              },
              {
                "answer": "[-π, π]",
                "right": false
              },
              {
                "answer": "[0, 2π]",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Acos(0) return?",
            "short_title": "Acos(0)",
            "answers": [
              {
                "answer": "π/2 radians (90°)",
                "right": true
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              },
              {
                "answer": "π radians (180°)",
                "right": false
              },
              {
                "answer": "-π/2 radians (-90°)",
                "right": false
              }
            ]
          },
          {
            "title": "What is the range of Mathf.Atan()?",
            "short_title": "Atan range",
            "answers": [
              {
                "answer": "[-π/2, π/2]",
                "right": true
              },
              {
                "answer": "[0, π]",
                "right": false
              },
              {
                "answer": "[-π, π]",
                "right": false
              },
              {
                "answer": "[0, 2π]",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Atan2(1, 1) return?",
            "short_title": "Atan2(1, 1)",
            "answers": [
              {
                "answer": "π/4 radians (45°)",
                "right": true
              },
              {
                "answer": "π/2 radians (90°)",
                "right": false
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              },
              {
                "answer": "π radians (180°)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity animation use of inverse trig?",
            "short_title": "Animation use",
            "answers": [
              {
                "answer": "Calculating joint angles",
                "right": true
              },
              {
                "answer": "Rendering animations",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Asin(1) return?",
            "short_title": "Asin(1)",
            "answers": [
              {
                "answer": "π/2 radians (90°)",
                "right": true
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              },
              {
                "answer": "π radians (180°)",
                "right": false
              },
              {
                "answer": "-π/2 radians (-90°)",
                "right": false
              }
            ]
          },
          {
            "title": "What is the range of Mathf.Acos()?",
            "short_title": "Acos range",
            "answers": [
              {
                "answer": "[0, π]",
                "right": true
              },
              {
                "answer": "[-π/2, π/2]",
                "right": false
              },
              {
                "answer": "[-π, π]",
                "right": false
              },
              {
                "answer": "[0, 2π]",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Acos(-1) return?",
            "short_title": "Acos(-1)",
            "answers": [
              {
                "answer": "π radians (180°)",
                "right": true
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              },
              {
                "answer": "π/2 radians (90°)",
                "right": false
              },
              {
                "answer": "-π/2 radians (-90°)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity AI use of inverse tangent?",
            "short_title": "AI use",
            "answers": [
              {
                "answer": "Determining the angle to a target",
                "right": true
              },
              {
                "answer": "Rendering AI",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Atan2(0, 1) return?",
            "short_title": "Atan2(0, 1)",
            "answers": [
              {
                "answer": "0 radians (0°)",
                "right": true
              },
              {
                "answer": "π/2 radians (90°)",
                "right": false
              },
              {
                "answer": "π radians (180°)",
                "right": false
              },
              {
                "answer": "-π/2 radians (-90°)",
                "right": false
              }
            ]
          },
          {
            "title": "What is the input range for Mathf.Asin()?",
            "short_title": "Asin input",
            "answers": [
              {
                "answer": "[-1, 1]",
                "right": true
              },
              {
                "answer": "[0, 1]",
                "right": false
              },
              {
                "answer": "[-∞, ∞]",
                "right": false
              },
              {
                "answer": "[0, ∞]",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity physics use of inverse trig?",
            "short_title": "Physics use",
            "answers": [
              {
                "answer": "Finding the angle of impact",
                "right": true
              },
              {
                "answer": "Rendering physics",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          }
        ],
        "Advanced Inverse Trigonometric Functions": [
          {
            "title": "What happens if you pass a value outside [-1, 1] to Mathf.Asin()?",
            "short_title": "Asin out of range",
            "answers": [
              {
                "answer": "Returns NaN",
                "right": true
              },
              {
                "answer": "Clamps to [-1, 1]",
                "right": false
              },
              {
                "answer": "Returns 0",
                "right": false
              },
              {
                "answer": "Throws an exception",
                "right": false
              }
            ]
          },
          {
            "title": "How can Mathf.Atan2() be used to rotate an object toward a target in Unity?",
            "short_title": "Atan2 rotation",
            "answers": [
              {
                "answer": "Calculates the angle between two points and applies it to rotation",
                "right": true
              },
              {
                "answer": "Scales the object’s position",
                "right": false
              },
              {
                "answer": "Renders the target",
                "right": false
              },
              {
                "answer": "Stops the rotation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the range of Mathf.Atan2(y, x) compared to Mathf.Atan()?",
            "short_title": "Atan2 range",
            "answers": [
              {
                "answer": "[-π, π]",
                "right": true
              },
              {
                "answer": "[-π/2, π/2]",
                "right": false
              },
              {
                "answer": "[0, π]",
                "right": false
              },
              {
                "answer": "[0, 2π]",
                "right": false
              }
            ]
          },
          {
            "title": "Why might Mathf.Atan2() be preferred for character aiming in a 2D game?",
            "short_title": "Atan2 aiming",
            "answers": [
              {
                "answer": "It accounts for direction and quadrants accurately",
                "right": true
              },
              {
                "answer": "It renders faster",
                "right": false
              },
              {
                "answer": "It scales better",
                "right": false
              },
              {
                "answer": "It avoids physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Atan2(-1, 0) return?",
            "short_title": "Atan2(-1, 0)",
            "answers": [
              {
                "answer": "-π/2 radians (-90°)",
                "right": true
              },
              {
                "answer": "π/2 radians (90°)",
                "right": false
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              },
              {
                "answer": "π radians (180°)",
                "right": false
              }
            ]
          },
          {
            "title": "How can inverse trig optimize raycast angle calculations in Unity?",
            "short_title": "Raycast optimization",
            "answers": [
              {
                "answer": "Converts direction vectors to angles efficiently",
                "right": true
              },
              {
                "answer": "Renders raycasts",
                "right": false
              },
              {
                "answer": "Stops raycasts",
                "right": false
              },
              {
                "answer": "Scales distances",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Acos(0.5) return?",
            "short_title": "Acos(0.5)",
            "answers": [
              {
                "answer": "π/3 radians (60°)",
                "right": true
              },
              {
                "answer": "π/6 radians (30°)",
                "right": false
              },
              {
                "answer": "π/2 radians (90°)",
                "right": false
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Senior-level use case for inverse trig in procedural generation?",
            "short_title": "Procedural use",
            "answers": [
              {
                "answer": "Calculating angles for terrain slopes or object orientation",
                "right": true
              },
              {
                "answer": "Rendering textures",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Stopping generation",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Asin(-0.5) return?",
            "short_title": "Asin(-0.5)",
            "answers": [
              {
                "answer": "-π/6 radians (-30°)",
                "right": true
              },
              {
                "answer": "π/6 radians (30°)",
                "right": false
              },
              {
                "answer": "-π/2 radians (-90°)",
                "right": false
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              }
            ]
          },
          {
            "title": "How can inverse trig help with inverse kinematics (IK) in Unity?",
            "short_title": "IK use",
            "answers": [
              {
                "answer": "Determines joint angles based on target positions",
                "right": true
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Scales bones",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the computational cost of Mathf.Atan2() compared to Mathf.Atan()?",
            "short_title": "Atan2 cost",
            "answers": [
              {
                "answer": "Slightly higher due to quadrant handling",
                "right": true
              },
              {
                "answer": "Lower due to optimization",
                "right": false
              },
              {
                "answer": "Identical cost",
                "right": false
              },
              {
                "answer": "Significantly higher",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Atan2(0, -1) return?",
            "short_title": "Atan2(0, -1)",
            "answers": [
              {
                "answer": "π radians (180°)",
                "right": true
              },
              {
                "answer": "0 radians (0°)",
                "right": false
              },
              {
                "answer": "π/2 radians (90°)",
                "right": false
              },
              {
                "answer": "-π/2 radians (-90°)",
                "right": false
              }
            ]
          },
          {
            "title": "How can you use Mathf.Acos() for collision response in Unity?",
            "short_title": "Collision use",
            "answers": [
              {
                "answer": "Calculates the angle between collision normal and velocity",
                "right": true
              },
              {
                "answer": "Renders collisions",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Scales impact",
                "right": false
              }
            ]
          },
          {
            "title": "What does Mathf.Asin(0) return?",
            "short_title": "Asin(0)",
            "answers": [
              {
                "answer": "0 radians (0°)",
                "right": true
              },
              {
                "answer": "π/2 radians (90°)",
                "right": false
              },
              {
                "answer": "-π/2 radians (-90°)",
                "right": false
              },
              {
                "answer": "π radians (180°)",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Senior-level optimization for using inverse trig in Unity?",
            "short_title": "Trig optimization",
            "answers": [
              {
                "answer": "Cache results for repeated calculations",
                "right": true
              },
              {
                "answer": "Render faster",
                "right": false
              },
              {
                "answer": "Increase precision",
                "right": false
              },
              {
                "answer": "Stop calculations",
                "right": false
              }
            ]
          }
        ],
        "Center of Mass": [
          {
            "title": "What happens if you set the center of mass too high for a vehicle in Unity?",
            "short_title": "CoM for vehicles",
            "answers": [
              {
                "answer": "It becomes unstable and may tip over",
                "right": true
              },
              {
                "answer": "It accelerates faster",
                "right": false
              },
              {
                "answer": "It stops moving",
                "right": false
              },
              {
                "answer": "It reduces friction",
                "right": false
              }
            ]
          },
          {
            "title": "How can you use the center of mass to optimize character balance in Unity?",
            "short_title": "CoM balance",
            "answers": [
              {
                "answer": "Dynamically adjust it to simulate realistic posture shifts",
                "right": true
              },
              {
                "answer": "Increase Rigidbody.mass for balance",
                "right": false
              },
              {
                "answer": "Reduce Rigidbody.drag for balance",
                "right": false
              },
              {
                "answer": "Disable Rigidbody physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the range of Rigidbody.centerOfMass in Unity’s coordinate system?",
            "short_title": "CoM range",
            "answers": [
              {
                "answer": "Any Vector3 value relative to the object’s local space",
                "right": true
              },
              {
                "answer": "Only positive values",
                "right": false
              },
              {
                "answer": "Only values between 0 and 1",
                "right": false
              },
              {
                "answer": "Fixed at the object’s center",
                "right": false
              }
            ]
          },
          {
            "title": "Why might you dynamically adjust the center of mass for a physics-based AI in a 2D game?",
            "short_title": "CoM for AI",
            "answers": [
              {
                "answer": "To maintain balance during complex movements or attacks",
                "right": true
              },
              {
                "answer": "To render AI movements faster",
                "right": false
              },
              {
                "answer": "To scale AI size",
                "right": false
              },
              {
                "answer": "To stop AI physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Rigidbody.centerOfMass = Vector3.up * 2 do in Unity?",
            "short_title": "CoM adjustment",
            "answers": [
              {
                "answer": "Moves the center of mass 2 units upward, increasing instability",
                "right": true
              },
              {
                "answer": "Increases speed by 2 units",
                "right": false
              },
              {
                "answer": "Reduces mass by 2 units",
                "right": false
              },
              {
                "answer": "Stops rotation",
                "right": false
              }
            ]
          },
          {
            "title": "How can center of mass optimize raycast-based physics interactions in Unity?",
            "short_title": "CoM and raycasts",
            "answers": [
              {
                "answer": "Adjusts the pivot for accurate collision detection and rotation",
                "right": true
              },
              {
                "answer": "Renders raycasts faster",
                "right": false
              },
              {
                "answer": "Stops raycast calculations",
                "right": false
              },
              {
                "answer": "Scales raycast distance",
                "right": false
              }
            ]
          },
          {
            "title": "What does setting Rigidbody.centerOfMass to Vector3.zero achieve in Unity?",
            "short_title": "CoM zero",
            "answers": [
              {
                "answer": "Resets the center of mass to the object’s geometric center",
                "right": true
              },
              {
                "answer": "Stops all movement",
                "right": false
              },
              {
                "answer": "Increases stability infinitely",
                "right": false
              },
              {
                "answer": "Reduces mass to zero",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Senior-level use case for center of mass in procedural terrain generation?",
            "short_title": "CoM procedural",
            "answers": [
              {
                "answer": "Calculating balance points for dynamically generated objects",
                "right": true
              },
              {
                "answer": "Rendering terrain faster",
                "right": false
              },
              {
                "answer": "Creating loops in terrain",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Rigidbody.centerOfMass = new Vector3(0, -1, 0) do for a character?",
            "short_title": "CoM character",
            "answers": [
              {
                "answer": "Lowers the center of mass, improving stability",
                "right": true
              },
              {
                "answer": "Increases jump height",
                "right": false
              },
              {
                "answer": "Reduces speed",
                "right": false
              },
              {
                "answer": "Stops movement",
                "right": false
              }
            ]
          },
          {
            "title": "How can center of mass assist with inverse kinematics (IK) in Unity?",
            "short_title": "CoM in IK",
            "answers": [
              {
                "answer": "Determines balance points for joint positioning",
                "right": true
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Scales bones",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the computational cost of dynamically adjusting Rigidbody.centerOfMass in Unity?",
            "short_title": "CoM cost",
            "answers": [
              {
                "answer": "Slightly higher due to physics recalculations",
                "right": true
              },
              {
                "answer": "Lower due to optimization",
                "right": false
              },
              {
                "answer": "Identical to static settings",
                "right": false
              },
              {
                "answer": "Significantly higher",
                "right": false
              }
            ]
          },
          {
            "title": "What does Rigidbody.centerOfMass = Vector3(1, 0, 0) do for a rotating object?",
            "short_title": "CoM rotation",
            "answers": [
              {
                "answer": "Shifts the rotation axis right, altering stability",
                "right": true
              },
              {
                "answer": "Increases rotation speed",
                "right": false
              },
              {
                "answer": "Reduces mass",
                "right": false
              },
              {
                "answer": "Stops rotation",
                "right": false
              }
            ]
          },
          {
            "title": "How can you use center of mass for collision response in Unity?",
            "short_title": "CoM collision",
            "answers": [
              {
                "answer": "Adjusts the pivot to control rotation and stability post-collision",
                "right": true
              },
              {
                "answer": "Renders collisions",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Scales impact",
                "right": false
              }
            ]
          },
          {
            "title": "What does setting Rigidbody.centerOfMass to Vector3.down * 0.5 do for a falling object?",
            "short_title": "CoM fall",
            "answers": [
              {
                "answer": "Lowers the center of mass, improving stability during fall",
                "right": true
              },
              {
                "answer": "Increases fall speed",
                "right": false
              },
              {
                "answer": "Reduces gravity",
                "right": false
              },
              {
                "answer": "Stops falling",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Senior-level optimization for using center of mass in Unity?",
            "short_title": "CoM optimization",
            "answers": [
              {
                "answer": "Cache CoM values for repeated calculations in dynamic systems",
                "right": true
              },
              {
                "answer": "Render faster",
                "right": false
              },
              {
                "answer": "Increase precision",
                "right": false
              },
              {
                "answer": "Stop physics calculations",
                "right": false
              }
            ]
          }
        ],
        "Moment of Inertia": [
          {
            "title": "What happens if you set a very high moment of inertia for a wheel in Unity?",
            "short_title": "MoI for wheels",
            "answers": [
              {
                "answer": "It resists rotation changes more, slowing acceleration",
                "right": true
              },
              {
                "answer": "It increases rotation speed",
                "right": false
              },
              {
                "answer": "It stops rotation",
                "right": false
              },
              {
                "answer": "It reduces friction",
                "right": false
              }
            ]
          },
          {
            "title": "How can you use moment of inertia to optimize character physics in Unity?",
            "short_title": "MoI character",
            "answers": [
              {
                "answer": "Adjust it to control realistic spin and stability during jumps",
                "right": true
              },
              {
                "answer": "Increase Rigidbody.mass for spin",
                "right": false
              },
              {
                "answer": "Reduce Rigidbody.drag for spin",
                "right": false
              },
              {
                "answer": "Disable Rigidbody physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the range of Rigidbody.inertiaTensor values in Unity?",
            "short_title": "MoI range",
            "answers": [
              {
                "answer": "Any positive Vector3 value based on mass distribution",
                "right": true
              },
              {
                "answer": "Only positive values between 0 and 1",
                "right": false
              },
              {
                "answer": "Only negative values",
                "right": false
              },
              {
                "answer": "Fixed at the object’s center",
                "right": false
              }
            ]
          },
          {
            "title": "Why might you dynamically adjust moment of inertia for a physics-based AI in a 3D game?",
            "short_title": "MoI for AI",
            "answers": [
              {
                "answer": "To control rotational stability during complex maneuvers",
                "right": true
              },
              {
                "answer": "To render AI movements faster",
                "right": false
              },
              {
                "answer": "To scale AI size",
                "right": false
              },
              {
                "answer": "To stop AI physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Rigidbody.inertiaTensor = new Vector3(10, 1, 1) do in Unity?",
            "short_title": "MoI adjustment",
            "answers": [
              {
                "answer": "Increases resistance to rotation along the X-axis, stabilizing lateral spin",
                "right": true
              },
              {
                "answer": "Increases rotation speed on all axes",
                "right": false
              },
              {
                "answer": "Reduces mass on all axes",
                "right": false
              },
              {
                "answer": "Stops rotation",
                "right": false
              }
            ]
          },
          {
            "title": "How can moment of inertia optimize raycast-based physics interactions in Unity?",
            "short_title": "MoI and raycasts",
            "answers": [
              {
                "answer": "Adjusts rotational resistance for accurate collision detection",
                "right": true
              },
              {
                "answer": "Renders raycasts faster",
                "right": false
              },
              {
                "answer": "Stops raycast calculations",
                "right": false
              },
              {
                "answer": "Scales raycast distance",
                "right": false
              }
            ]
          },
          {
            "title": "What does setting Rigidbody.inertiaTensor to Vector3.one achieve in Unity?",
            "short_title": "MoI uniform",
            "answers": [
              {
                "answer": "Sets equal resistance to rotation on all axes",
                "right": true
              },
              {
                "answer": "Stops all rotation",
                "right": false
              },
              {
                "answer": "Increases speed on all axes",
                "right": false
              },
              {
                "answer": "Reduces mass to zero",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Senior-level use case for moment of inertia in procedural object generation?",
            "short_title": "MoI procedural",
            "answers": [
              {
                "answer": "Calculating rotational stability for dynamically generated shapes",
                "right": true
              },
              {
                "answer": "Rendering objects faster",
                "right": false
              },
              {
                "answer": "Creating loops in objects",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does Rigidbody.inertiaTensor = new Vector3(0, 100, 0) do for a spinning top?",
            "short_title": "MoI top",
            "answers": [
              {
                "answer": "Increases resistance to vertical rotation, stabilizing the spin",
                "right": true
              },
              {
                "answer": "Increases spin speed",
                "right": false
              },
              {
                "answer": "Reduces mass vertically",
                "right": false
              },
              {
                "answer": "Stops spinning",
                "right": false
              }
            ]
          },
          {
            "title": "How can moment of inertia assist with inverse kinematics (IK) in Unity?",
            "short_title": "MoI in IK",
            "answers": [
              {
                "answer": "Controls rotational resistance for joint positioning",
                "right": true
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Scales bones",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the computational cost of dynamically adjusting Rigidbody.inertiaTensor in Unity?",
            "short_title": "MoI cost",
            "answers": [
              {
                "answer": "Slightly higher due to physics recalculations",
                "right": true
              },
              {
                "answer": "Lower due to optimization",
                "right": false
              },
              {
                "answer": "Identical to static settings",
                "right": false
              },
              {
                "answer": "Significantly higher",
                "right": false
              }
            ]
          },
          {
            "title": "What does Rigidbody.inertiaTensor = new Vector3(1, 0, 1) do for a rotating object?",
            "short_title": "MoI rotation",
            "answers": [
              {
                "answer": "Reduces resistance to Y-axis rotation, allowing easier flips",
                "right": true
              },
              {
                "answer": "Increases rotation speed on all axes",
                "right": false
              },
              {
                "answer": "Reduces mass on Y-axis",
                "right": false
              },
              {
                "answer": "Stops rotation",
                "right": false
              }
            ]
          },
          {
            "title": "How can you use moment of inertia for collision response in Unity?",
            "short_title": "MoI collision",
            "answers": [
              {
                "answer": "Adjusts rotational resistance to control post-collision spin",
                "right": true
              },
              {
                "answer": "Renders collisions",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Scales impact",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Senior-level optimization for using moment of inertia in Unity?",
            "short_title": "MoI optimization",
            "answers": [
              {
                "answer": "Cache inertiaTensor values for repeated calculations in dynamic systems",
                "right": true
              },
              {
                "answer": "Render faster",
                "right": false
              },
              {
                "answer": "Increase precision",
                "right": false
              },
              {
                "answer": "Stop physics calculations",
                "right": false
              }
            ]
          },
          {
            "title": "How can moment of inertia improve navigation mesh pathfinding in Unity?",
            "short_title": "MoI navigation",
            "answers": [
              {
                "answer": "Controls rotational stability for smoother agent turns",
                "right": true
              },
              {
                "answer": "Renders NavMesh faster",
                "right": false
              },
              {
                "answer": "Scales agent speed",
                "right": false
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              }
            ]
          }
        ],
        "Restitution": [
          {
            "title": "What does restitution represent in game physics?",
            "short_title": "Restitution definition",
            "answers": [
              {
                "answer": "The bounciness of a collision",
                "right": true
              },
              {
                "answer": "The friction between two surfaces",
                "right": false
              },
              {
                "answer": "The mass of an object",
                "right": false
              },
              {
                "answer": "The velocity of an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the restitution coefficient of a perfectly elastic collision?",
            "short_title": "Perfect elasticity",
            "answers": [
              {
                "answer": "1",
                "right": true
              },
              {
                "answer": "0",
                "right": false
              },
              {
                "answer": "-1",
                "right": false
              },
              {
                "answer": "0.5",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when the restitution coefficient is 0?",
            "short_title": "Restitution zero",
            "answers": [
              {
                "answer": "Objects do not bounce after collision",
                "right": true
              },
              {
                "answer": "Objects bounce infinitely",
                "right": false
              },
              {
                "answer": "Objects speed up after collision",
                "right": false
              },
              {
                "answer": "Objects reverse direction",
                "right": false
              }
            ]
          },
          {
            "title": "In Unity, where can you set the restitution of a physics object?",
            "short_title": "Restitution in Unity",
            "answers": [
              {
                "answer": "Physics Material",
                "right": true
              },
              {
                "answer": "Rigidbody component",
                "right": false
              },
              {
                "answer": "Transform component",
                "right": false
              },
              {
                "answer": "Animator component",
                "right": false
              }
            ]
          },
          {
            "title": "How is restitution related to kinetic energy in a collision?",
            "short_title": "Restitution & energy",
            "answers": [
              {
                "answer": "Higher restitution preserves more kinetic energy after collision",
                "right": true
              },
              {
                "answer": "Restitution does not affect kinetic energy",
                "right": false
              },
              {
                "answer": "Lower restitution increases kinetic energy",
                "right": false
              },
              {
                "answer": "Restitution is only related to mass, not energy",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these materials would likely have the highest restitution?",
            "short_title": "High restitution materials",
            "answers": [
              {
                "answer": "Rubber",
                "right": true
              },
              {
                "answer": "Wood",
                "right": false
              },
              {
                "answer": "Metal",
                "right": false
              },
              {
                "answer": "Clay",
                "right": false
              }
            ]
          },
          {
            "title": "How does restitution affect a bouncing ball simulation?",
            "short_title": "Bouncing ball",
            "answers": [
              {
                "answer": "Higher restitution makes the ball bounce higher",
                "right": true
              },
              {
                "answer": "Restitution has no effect on bouncing",
                "right": false
              },
              {
                "answer": "Lower restitution increases bounce height",
                "right": false
              },
              {
                "answer": "Restitution only affects rotation",
                "right": false
              }
            ]
          },
          {
            "title": "How does combining two objects’ restitution coefficients affect collision?",
            "short_title": "Restitution combination",
            "answers": [
              {
                "answer": "The resulting bounce is determined by the lowest restitution value",
                "right": false
              },
              {
                "answer": "The resulting bounce is determined by the highest restitution value",
                "right": false
              },
              {
                "answer": "The resulting bounce is based on an average or physics engine-defined rule",
                "right": true
              },
              {
                "answer": "Restitution does not combine",
                "right": false
              }
            ]
          },
          {
            "title": "What effect does restitution have in a pinball game?",
            "short_title": "Pinball & restitution",
            "answers": [
              {
                "answer": "Increases how much the ball bounces off bumpers",
                "right": true
              },
              {
                "answer": "Determines the ball’s weight",
                "right": false
              },
              {
                "answer": "Slows down the ball after impact",
                "right": false
              },
              {
                "answer": "Only affects the paddles",
                "right": false
              }
            ]
          },
          {
            "title": "Why might a developer limit restitution in a physics-based game?",
            "short_title": "Limiting restitution",
            "answers": [
              {
                "answer": "To prevent unrealistic bouncing",
                "right": true
              },
              {
                "answer": "To increase collision forces",
                "right": false
              },
              {
                "answer": "To make all objects move slower",
                "right": false
              },
              {
                "answer": "To decrease mass of objects",
                "right": false
              }
            ]
          }
        ],
        "Linear Velocity": [
          {
            "title": "What is the primary difference between linear velocity and angular velocity?",
            "short_title": "Linear vs Angular velocity",
            "answers": [
              {
                "answer": "Linear velocity describes motion in a straight line, while angular velocity describes rotational motion",
                "right": true
              },
              {
                "answer": "They are the same concept",
                "right": false
              },
              {
                "answer": "Linear velocity is measured in radians per second",
                "right": false
              },
              {
                "answer": "Angular velocity only applies to objects with mass",
                "right": false
              }
            ]
          },
          {
            "title": "How can you convert angular velocity to linear velocity?",
            "short_title": "Convert angular to linear velocity",
            "answers": [
              {
                "answer": "Multiply angular velocity by the radius of rotation (v = ωr)",
                "right": true
              },
              {
                "answer": "Divide angular velocity by the object's mass",
                "right": false
              },
              {
                "answer": "Add angular velocity to gravitational acceleration",
                "right": false
              },
              {
                "answer": "Angular velocity cannot be converted to linear velocity",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity method is used to directly modify an object's linear velocity?",
            "short_title": "Modify velocity in Unity",
            "answers": [
              {
                "answer": "Rigidbody.velocity",
                "right": true
              },
              {
                "answer": "Rigidbody.AddForce",
                "right": false
              },
              {
                "answer": "Rigidbody.angularVelocity",
                "right": false
              },
              {
                "answer": "Rigidbody.drag",
                "right": false
              }
            ]
          },
          {
            "title": "How does air resistance (drag) affect linear velocity in Unity?",
            "short_title": "Air resistance and velocity",
            "answers": [
              {
                "answer": "It gradually reduces velocity over time",
                "right": true
              },
              {
                "answer": "It increases the object’s speed",
                "right": false
              },
              {
                "answer": "It has no effect on velocity",
                "right": false
              },
              {
                "answer": "It changes the object’s mass",
                "right": false
              }
            ]
          },
          {
            "title": "What is the relationship between linear velocity and momentum?",
            "short_title": "Velocity and momentum",
            "answers": [
              {
                "answer": "Momentum is the product of mass and velocity (p = mv)",
                "right": true
              },
              {
                "answer": "Momentum is the sum of velocity and acceleration",
                "right": false
              },
              {
                "answer": "Velocity determines an object’s mass",
                "right": false
              },
              {
                "answer": "Momentum and velocity are independent of each other",
                "right": false
              }
            ]
          },
          {
            "title": "Which factor does NOT directly influence an object's linear velocity?",
            "short_title": "Factors affecting velocity",
            "answers": [
              {
                "answer": "The object’s rotation",
                "right": true
              },
              {
                "answer": "The object’s initial speed",
                "right": false
              },
              {
                "answer": "External forces acting on the object",
                "right": false
              },
              {
                "answer": "Air resistance",
                "right": false
              }
            ]
          },
          {
            "title": "How can you ensure constant linear velocity in Unity?",
            "short_title": "Maintaining velocity",
            "answers": [
              {
                "answer": "Disable gravity and set drag to zero",
                "right": true
              },
              {
                "answer": "Apply continuous force in the direction of motion",
                "right": false
              },
              {
                "answer": "Reduce mass to zero",
                "right": false
              },
              {
                "answer": "Increase angular velocity",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when two objects with different linear velocities collide elastically?",
            "short_title": "Elastic collision velocity",
            "answers": [
              {
                "answer": "They exchange velocity based on mass and momentum conservation",
                "right": true
              },
              {
                "answer": "They both stop moving",
                "right": false
              },
              {
                "answer": "Their velocities remain unchanged",
                "right": false
              },
              {
                "answer": "They merge into one object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the SI unit of linear velocity?",
            "short_title": "Velocity unit",
            "answers": [
              {
                "answer": "Meters per second (m/s)",
                "right": true
              },
              {
                "answer": "Newtons (N)",
                "right": false
              },
              {
                "answer": "Joules (J)",
                "right": false
              },
              {
                "answer": "Radians per second (rad/s)",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity setting can help limit excessive linear velocity?",
            "short_title": "Limiting velocity in Unity",
            "answers": [
              {
                "answer": "Rigidbody.maxLinearVelocity",
                "right": false
              },
              {
                "answer": "Rigidbody.velocityCap",
                "right": false
              },
              {
                "answer": "There is no built-in velocity limit, but you can clamp Rigidbody.velocity manually",
                "right": true
              },
              {
                "answer": "Physics.LinearDamping",
                "right": false
              }
            ]
          }
        ],
        "Angular Velocity": [
          {
            "title": "What does angular velocity represent in game physics?",
            "short_title": "Angular velocity meaning",
            "answers": [
              {
                "answer": "The rate of rotation of an object",
                "right": true
              },
              {
                "answer": "The linear speed of an object",
                "right": false
              },
              {
                "answer": "The force applied to an object",
                "right": false
              },
              {
                "answer": "The gravitational pull on an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the unit of angular velocity in Unity physics?",
            "short_title": "Angular velocity unit",
            "answers": [
              {
                "answer": "Radians per second (rad/s)",
                "right": true
              },
              {
                "answer": "Meters per second (m/s)",
                "right": false
              },
              {
                "answer": "Kilograms per meter (kg/m)",
                "right": false
              },
              {
                "answer": "Degrees per meter (°/m)",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity property is used to set or get an object's angular velocity?",
            "short_title": "Unity angular velocity property",
            "answers": [
              {
                "answer": "Rigidbody.angularVelocity",
                "right": true
              },
              {
                "answer": "Rigidbody.velocity",
                "right": false
              },
              {
                "answer": "Rigidbody.rotation",
                "right": false
              },
              {
                "answer": "Rigidbody.torque",
                "right": false
              }
            ]
          },
          {
            "title": "How does torque influence angular velocity?",
            "short_title": "Torque and angular velocity",
            "answers": [
              {
                "answer": "Torque causes a change in angular velocity",
                "right": true
              },
              {
                "answer": "Torque has no effect on rotation",
                "right": false
              },
              {
                "answer": "Torque reduces angular velocity",
                "right": false
              },
              {
                "answer": "Torque only applies to linear motion",
                "right": false
              }
            ]
          },
          {
            "title": "Which equation relates torque and angular velocity in physics?",
            "short_title": "Torque equation",
            "answers": [
              {
                "answer": "Torque = Moment of Inertia × Angular Acceleration (τ = Iα)",
                "right": true
              },
              {
                "answer": "Force = Mass × Acceleration (F = ma)",
                "right": false
              },
              {
                "answer": "Velocity = Displacement / Time",
                "right": false
              },
              {
                "answer": "Momentum = Mass × Velocity",
                "right": false
              }
            ]
          },
          {
            "title": "What effect does increasing the moment of inertia have on angular velocity?",
            "short_title": "Moment of inertia effect",
            "answers": [
              {
                "answer": "It decreases angular velocity for the same torque",
                "right": true
              },
              {
                "answer": "It increases angular velocity",
                "right": false
              },
              {
                "answer": "It has no effect on angular velocity",
                "right": false
              },
              {
                "answer": "It reduces torque",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when an object's angular velocity reaches zero?",
            "short_title": "Zero angular velocity",
            "answers": [
              {
                "answer": "The object stops rotating",
                "right": true
              },
              {
                "answer": "The object continues rotating at the same speed",
                "right": false
              },
              {
                "answer": "The object starts moving forward",
                "right": false
              },
              {
                "answer": "The object’s mass increases",
                "right": false
              }
            ]
          },
          {
            "title": "How can you apply an instantaneous change in angular velocity in Unity?",
            "short_title": "Instantaneous angular velocity change",
            "answers": [
              {
                "answer": "By setting Rigidbody.angularVelocity directly",
                "right": true
              },
              {
                "answer": "By modifying Rigidbody.velocity",
                "right": false
              },
              {
                "answer": "By increasing Rigidbody.mass",
                "right": false
              },
              {
                "answer": "By disabling gravity",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity function applies rotational force to an object?",
            "short_title": "Apply rotational force",
            "answers": [
              {
                "answer": "Rigidbody.AddTorque()",
                "right": true
              },
              {
                "answer": "Rigidbody.AddForce()",
                "right": false
              },
              {
                "answer": "Rigidbody.MoveRotation()",
                "right": false
              },
              {
                "answer": "Rigidbody.AddImpulse()",
                "right": false
              }
            ]
          },
          {
            "title": "What effect does friction have on angular velocity?",
            "short_title": "Friction and angular velocity",
            "answers": [
              {
                "answer": "It slows down rotation over time",
                "right": true
              },
              {
                "answer": "It increases rotation speed",
                "right": false
              },
              {
                "answer": "It has no effect on rotation",
                "right": false
              },
              {
                "answer": "It only affects linear velocity",
                "right": false
              }
            ]
          }
        ],
        "Buoyancy": [
          {
            "title": "What is buoyancy in game physics?",
            "short_title": "Buoyancy definition",
            "answers": [
              {
                "answer": "The upward force exerted by a fluid on a submerged object",
                "right": true
              },
              {
                "answer": "The force pulling an object downward due to gravity",
                "right": false
              },
              {
                "answer": "The friction between an object and a surface",
                "right": false
              },
              {
                "answer": "The resistance to an object's motion in air",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle explains buoyancy?",
            "short_title": "Buoyancy principle",
            "answers": [
              {
                "answer": "Archimedes' Principle",
                "right": true
              },
              {
                "answer": "Newton’s Third Law",
                "right": false
              },
              {
                "answer": "Pascal’s Principle",
                "right": false
              },
              {
                "answer": "Bernoulli’s Principle",
                "right": false
              }
            ]
          },
          {
            "title": "How does Unity simulate buoyancy?",
            "short_title": "Buoyancy in Unity",
            "answers": [
              {
                "answer": "By applying an upward force based on displaced fluid volume",
                "right": true
              },
              {
                "answer": "By increasing an object's gravity",
                "right": false
              },
              {
                "answer": "By reducing an object's mass",
                "right": false
              },
              {
                "answer": "By modifying Rigidbody.angularVelocity",
                "right": false
              }
            ]
          },
          {
            "title": "What determines whether an object floats or sinks?",
            "short_title": "Float or sink",
            "answers": [
              {
                "answer": "If the buoyant force is greater than or equal to the object's weight, it floats",
                "right": true
              },
              {
                "answer": "If the object's velocity is high enough, it will always float",
                "right": false
              },
              {
                "answer": "Only objects with low mass can float",
                "right": false
              },
              {
                "answer": "Objects with a Rigidbody component will always sink",
                "right": false
              }
            ]
          },
          {
            "title": "Which factor does NOT affect an object's buoyancy?",
            "short_title": "Buoyancy factor",
            "answers": [
              {
                "answer": "The color of the object",
                "right": true
              },
              {
                "answer": "The object's density relative to the fluid",
                "right": false
              },
              {
                "answer": "The volume of fluid displaced by the object",
                "right": false
              },
              {
                "answer": "The gravitational force acting on the object",
                "right": false
              }
            ]
          },
          {
            "title": "How can you simulate water resistance in Unity?",
            "short_title": "Water resistance simulation",
            "answers": [
              {
                "answer": "By applying drag and damping forces to the Rigidbody",
                "right": true
              },
              {
                "answer": "By increasing gravity",
                "right": false
              },
              {
                "answer": "By setting Rigidbody.useGravity to false",
                "right": false
              },
              {
                "answer": "By disabling the Rigidbody component",
                "right": false
              }
            ]
          },
          {
            "title": "What happens to the buoyant force if you increase an object’s volume but keep the mass the same?",
            "short_title": "Buoyant force and volume",
            "answers": [
              {
                "answer": "The object becomes more buoyant",
                "right": true
              },
              {
                "answer": "The object sinks faster",
                "right": false
              },
              {
                "answer": "The buoyant force remains unchanged",
                "right": false
              },
              {
                "answer": "The object’s weight increases",
                "right": false
              }
            ]
          },
          {
            "title": "What Unity property can be adjusted to simulate different fluid densities?",
            "short_title": "Fluid density simulation",
            "answers": [
              {
                "answer": "Custom buoyancy scripts using Rigidbody.AddForce()",
                "right": true
              },
              {
                "answer": "Rigidbody.mass",
                "right": false
              },
              {
                "answer": "Rigidbody.velocity",
                "right": false
              },
              {
                "answer": "Rigidbody.drag",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following would make an object more likely to sink?",
            "short_title": "Object sinking factors",
            "answers": [
              {
                "answer": "Increasing its density relative to the fluid",
                "right": true
              },
              {
                "answer": "Increasing its volume",
                "right": false
              },
              {
                "answer": "Reducing its weight",
                "right": false
              },
              {
                "answer": "Adding more drag",
                "right": false
              }
            ]
          },
          {
            "title": "How does gravity interact with buoyancy?",
            "short_title": "Gravity and buoyancy",
            "answers": [
              {
                "answer": "Gravity pulls the object down, while buoyancy pushes it up",
                "right": true
              },
              {
                "answer": "Gravity cancels out buoyancy completely",
                "right": false
              },
              {
                "answer": "Buoyancy only works in zero gravity",
                "right": false
              },
              {
                "answer": "Buoyancy causes gravity to weaken",
                "right": false
              }
            ]
          }
        ],
        "Dynamics": [
          {
            "title": "What is the primary focus of dynamics in game physics?",
            "short_title": "Dynamics focus",
            "answers": [
              {
                "answer": "The study of forces and motion in a physics system",
                "right": true
              },
              {
                "answer": "The rendering of 3D objects",
                "right": false
              },
              {
                "answer": "The animation of characters",
                "right": false
              },
              {
                "answer": "The structure of game levels",
                "right": false
              }
            ]
          },
          {
            "title": "How does Newton’s Second Law relate to game physics dynamics?",
            "short_title": "Newton's Second Law",
            "answers": [
              {
                "answer": "Force equals mass times acceleration (F = ma)",
                "right": true
              },
              {
                "answer": "Objects remain at rest unless acted on",
                "right": false
              },
              {
                "answer": "For every action, there is an equal and opposite reaction",
                "right": false
              },
              {
                "answer": "Gravity is always constant in a physics simulation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main difference between kinematics and dynamics in game physics?",
            "short_title": "Kinematics vs Dynamics",
            "answers": [
              {
                "answer": "Kinematics describes motion without forces, while dynamics includes forces",
                "right": true
              },
              {
                "answer": "Kinematics includes forces, but dynamics does not",
                "right": false
              },
              {
                "answer": "Dynamics only applies to rigid bodies",
                "right": false
              },
              {
                "answer": "Kinematics is used for rendering, while dynamics is used for AI",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when an object’s center of mass is outside its base of support in Unity?",
            "short_title": "Center of mass instability",
            "answers": [
              {
                "answer": "The object is more likely to topple over",
                "right": true
              },
              {
                "answer": "The object remains stable",
                "right": false
              },
              {
                "answer": "The object’s mass is reduced",
                "right": false
              },
              {
                "answer": "The object stops moving",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity component is essential for simulating realistic physics-based dynamics?",
            "short_title": "Essential Unity component",
            "answers": [
              {
                "answer": "Rigidbody",
                "right": true
              },
              {
                "answer": "MeshRenderer",
                "right": false
              },
              {
                "answer": "Animator",
                "right": false
              },
              {
                "answer": "NavMeshAgent",
                "right": false
              }
            ]
          },
          {
            "title": "What force counteracts motion and affects an object’s dynamics in Unity?",
            "short_title": "Counteracting force",
            "answers": [
              {
                "answer": "Friction",
                "right": true
              },
              {
                "answer": "Gravity",
                "right": false
              },
              {
                "answer": "Momentum",
                "right": false
              },
              {
                "answer": "Lift",
                "right": false
              }
            ]
          },
          {
            "title": "What is the relationship between impulse and force in dynamics?",
            "short_title": "Impulse vs Force",
            "answers": [
              {
                "answer": "Impulse is force applied over time (J = FΔt)",
                "right": true
              },
              {
                "answer": "Force and impulse are the same",
                "right": false
              },
              {
                "answer": "Impulse is independent of time",
                "right": false
              },
              {
                "answer": "Force does not affect impulse",
                "right": false
              }
            ]
          },
          {
            "title": "How can you increase the stability of a physics-based character in Unity?",
            "short_title": "Increasing stability",
            "answers": [
              {
                "answer": "Lower the center of mass and widen the base",
                "right": true
              },
              {
                "answer": "Increase the character’s height",
                "right": false
              },
              {
                "answer": "Reduce mass to zero",
                "right": false
              },
              {
                "answer": "Disable gravity",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when multiple forces act on an object in Unity?",
            "short_title": "Multiple forces",
            "answers": [
              {
                "answer": "The object’s motion is affected by the sum of all applied forces",
                "right": true
              },
              {
                "answer": "Only the strongest force affects the object",
                "right": false
              },
              {
                "answer": "The object stops moving",
                "right": false
              },
              {
                "answer": "Forces cancel each other out completely",
                "right": false
              }
            ]
          },
          {
            "title": "How can damping be used to control object movement in Unity physics?",
            "short_title": "Damping effect",
            "answers": [
              {
                "answer": "Damping gradually reduces velocity over time",
                "right": true
              },
              {
                "answer": "Damping increases velocity",
                "right": false
              },
              {
                "answer": "Damping has no effect on motion",
                "right": false
              },
              {
                "answer": "Damping makes objects rotate faster",
                "right": false
              }
            ]
          }
        ],
        "Collision Detection": [
          {
            "title": "What are the trade-offs between Spatial Partitioning methods (like Quadtrees) and Sweep and Prune in Broad Phase collision detection?",
            "short_title": "Spatial Partitioning vs Sweep & Prune",
            "answers": [
              {
                "answer": "Sweep and Prune is faster for dynamic objects, while Spatial Partitioning works well for static or semi-static environments",
                "right": true
              },
              {
                "answer": "Spatial Partitioning always outperforms Sweep and Prune in all scenarios",
                "right": false
              },
              {
                "answer": "Sweep and Prune is only useful in 2D collision detection",
                "right": false
              },
              {
                "answer": "Both methods are equally efficient in all cases",
                "right": false
              }
            ]
          },
          {
            "title": "How does the Minkowski Sum help in collision detection?",
            "short_title": "Minkowski Sum usage",
            "answers": [
              {
                "answer": "It transforms collision detection into an origin-inclusion test",
                "right": true
              },
              {
                "answer": "It reduces the number of collision pairs in Broad Phase",
                "right": false
              },
              {
                "answer": "It directly calculates the response force between objects",
                "right": false
              },
              {
                "answer": "It only applies to 2D games",
                "right": false
              }
            ]
          },
          {
            "title": "What is the primary benefit of using Continuous Collision Detection (CCD) over Discrete Collision Detection (DCD)?",
            "short_title": "CCD vs DCD",
            "answers": [
              {
                "answer": "CCD prevents fast-moving objects from tunneling through others",
                "right": true
              },
              {
                "answer": "CCD increases physics performance in all cases",
                "right": false
              },
              {
                "answer": "CCD completely removes the need for Broad Phase collision detection",
                "right": false
              },
              {
                "answer": "CCD reduces the need for collision resolution calculations",
                "right": false
              }
            ]
          },
          {
            "title": "What optimization technique can be used to improve performance when implementing Continuous Collision Detection?",
            "short_title": "Optimizing CCD",
            "answers": [
              {
                "answer": "Using speculative contacts to preemptively resolve collisions",
                "right": true
              },
              {
                "answer": "Disabling Narrow Phase checks",
                "right": false
              },
              {
                "answer": "Removing Broad Phase collision detection",
                "right": false
              },
              {
                "answer": "Decreasing physics time step resolution",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the GJK (Gilbert-Johnson-Keerthi) algorithm in collision detection?",
            "short_title": "GJK purpose",
            "answers": [
              {
                "answer": "To determine if two convex shapes are colliding",
                "right": true
              },
              {
                "answer": "To calculate penetration depth between objects",
                "right": false
              },
              {
                "answer": "To generate bounding volumes for Broad Phase",
                "right": false
              },
              {
                "answer": "To optimize physics engine threading",
                "right": false
              }
            ]
          },
          {
            "title": "How does the EPA (Expanding Polytope Algorithm) extend GJK in collision detection?",
            "short_title": "EPA in GJK",
            "answers": [
              {
                "answer": "It calculates the exact penetration depth after GJK detects a collision",
                "right": true
              },
              {
                "answer": "It replaces GJK for collision detection",
                "right": false
              },
              {
                "answer": "It optimizes Broad Phase collision filtering",
                "right": false
              },
              {
                "answer": "It is only used for 2D physics simulations",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of bounding volume is most efficient for rotational objects in 3D collision detection?",
            "short_title": "Bounding Volume choice",
            "answers": [
              {
                "answer": "OBB (Oriented Bounding Box)",
                "right": true
              },
              {
                "answer": "AABB (Axis-Aligned Bounding Box)",
                "right": false
              },
              {
                "answer": "Sphere Bounding Volume",
                "right": false
              },
              {
                "answer": "Convex Hull",
                "right": false
              }
            ]
          },
          {
            "title": "How does Time of Impact (TOI) calculation improve physics simulations?",
            "short_title": "TOI in simulations",
            "answers": [
              {
                "answer": "It allows physics engines to resolve collisions before they happen",
                "right": true
              },
              {
                "answer": "It simplifies collision resolution by ignoring small collisions",
                "right": false
              },
              {
                "answer": "It prevents all penetration between objects",
                "right": false
              },
              {
                "answer": "It reduces the need for Broad Phase optimizations",
                "right": false
              }
            ]
          },
          {
            "title": "Which method can be used to detect collisions between concave objects efficiently?",
            "short_title": "Concave collision detection",
            "answers": [
              {
                "answer": "Decomposing concave shapes into multiple convex shapes",
                "right": true
              },
              {
                "answer": "Using AABB for concave shapes",
                "right": false
              },
              {
                "answer": "Applying ray tracing techniques",
                "right": false
              },
              {
                "answer": "Ignoring collisions between concave objects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main advantage of using Multi-resolution Collision Detection techniques?",
            "short_title": "Multi-resolution advantage",
            "answers": [
              {
                "answer": "It allows for adaptive collision accuracy based on object importance",
                "right": true
              },
              {
                "answer": "It removes the need for Broad Phase optimizations",
                "right": false
              },
              {
                "answer": "It always reduces the number of collisions in a scene",
                "right": false
              },
              {
                "answer": "It completely eliminates collision detection overhead",
                "right": false
              }
            ]
          }
        ],
        "Bounding Volume": [
          {
            "title": "Why is the Surface Area Heuristic (SAH) commonly used in bounding volume hierarchies (BVH)?",
            "short_title": "SAH in BVH",
            "answers": [
              {
                "answer": "It minimizes the expected cost of traversing the BVH",
                "right": true
              },
              {
                "answer": "It guarantees the best possible partitioning",
                "right": false
              },
              {
                "answer": "It eliminates the need for refitting the hierarchy",
                "right": false
              },
              {
                "answer": "It reduces memory usage significantly",
                "right": false
              }
            ]
          },
          {
            "title": "What is the primary disadvantage of using Oriented Bounding Boxes (OBB) in real-time physics simulations?",
            "short_title": "OBB disadvantage",
            "answers": [
              {
                "answer": "They require more computational effort to update",
                "right": true
              },
              {
                "answer": "They do not rotate with the object",
                "right": false
              },
              {
                "answer": "They are always larger than the object's exact geometry",
                "right": false
              },
              {
                "answer": "They cannot be used for broad-phase collision detection",
                "right": false
              }
            ]
          },
          {
            "title": "How can AABB structures be efficiently updated for dynamic objects in a physics simulation?",
            "short_title": "Updating AABB for dynamic objects",
            "answers": [
              {
                "answer": "By expanding the AABB to account for motion (swept AABB)",
                "right": true
              },
              {
                "answer": "By recalculating AABB from scratch every frame",
                "right": false
              },
              {
                "answer": "By ignoring small movements and updating periodically",
                "right": false
              },
              {
                "answer": "By converting AABB into OBB dynamically",
                "right": false
              }
            ]
          },
          {
            "title": "What is the biggest drawback of using bounding spheres as a broad-phase collision detection technique?",
            "short_title": "Bounding sphere drawback",
            "answers": [
              {
                "answer": "They do not fit elongated objects well",
                "right": true
              },
              {
                "answer": "Their intersection tests are computationally expensive",
                "right": false
              },
              {
                "answer": "They require more memory than AABBs",
                "right": false
              },
              {
                "answer": "They can only be used for convex shapes",
                "right": false
              }
            ]
          },
          {
            "title": "In a BVH, what is an optimal strategy for refitting bounding volumes after an object moves?",
            "short_title": "BVH refitting strategy",
            "answers": [
              {
                "answer": "Update only the affected nodes and propagate changes upward",
                "right": true
              },
              {
                "answer": "Rebuild the entire BVH from scratch",
                "right": false
              },
              {
                "answer": "Expand all bounding volumes to avoid refitting",
                "right": false
              },
              {
                "answer": "Use only fixed-size bounding volumes to prevent refitting",
                "right": false
              }
            ]
          }
        ],
        "DBVT (Dynamic Bounding Volume Tree)": [
          {
            "title": "How does DBVT differ from a standard BVH?",
            "short_title": "DBVT vs BVH",
            "answers": [
              {
                "answer": "DBVT is optimized for dynamic objects and can be updated efficiently",
                "right": true
              },
              {
                "answer": "DBVT does not use bounding volumes",
                "right": false
              },
              {
                "answer": "DBVT requires full tree reconstruction on object movement",
                "right": false
              },
              {
                "answer": "DBVT is slower than BVH in static environments",
                "right": false
              }
            ]
          },
          {
            "title": "What is the key advantage of DBVT over BVH?",
            "short_title": "DBVT advantage",
            "answers": [
              {
                "answer": "It supports incremental updates with minimal cost",
                "right": true
              },
              {
                "answer": "It does not require hierarchy",
                "right": false
              },
              {
                "answer": "It is only useful for static geometry",
                "right": false
              },
              {
                "answer": "It eliminates the need for collision detection",
                "right": false
              }
            ]
          },
          {
            "title": "How does DBVT handle object insertion efficiently?",
            "short_title": "DBVT insertion",
            "answers": [
              {
                "answer": "By inserting objects into the tree without requiring full reconstruction",
                "right": true
              },
              {
                "answer": "By rebuilding the entire tree each frame",
                "right": false
              },
              {
                "answer": "By using brute-force collision checks",
                "right": false
              },
              {
                "answer": "By sorting objects before insertion",
                "right": false
              }
            ]
          },
          {
            "title": "Which algorithm is commonly used for balancing a DBVT?",
            "short_title": "DBVT balancing",
            "answers": [
              {
                "answer": "Top-down insertion with branch rotations",
                "right": true
              },
              {
                "answer": "Randomized tree balancing",
                "right": false
              },
              {
                "answer": "Full tree rebuilding every frame",
                "right": false
              },
              {
                "answer": "Graph-based sorting",
                "right": false
              }
            ]
          },
          {
            "title": "Which physics engine is known for using DBVT?",
            "short_title": "DBVT physics engine",
            "answers": [
              {
                "answer": "Bullet Physics",
                "right": true
              },
              {
                "answer": "Havok",
                "right": false
              },
              {
                "answer": "PhysX",
                "right": false
              },
              {
                "answer": "Unity's built-in physics engine",
                "right": false
              }
            ]
          },
          {
            "title": "What is the primary advantage of using a Dynamic Bounding Volume Tree (DBVT) over a static BVH?",
            "short_title": "DBVT vs BVH",
            "answers": [
              {
                "answer": "DBVT updates efficiently when objects move",
                "right": true
              },
              {
                "answer": "DBVT completely eliminates the need for collision detection",
                "right": false
              },
              {
                "answer": "DBVT requires less memory than BVH",
                "right": false
              },
              {
                "answer": "DBVT works only for 2D physics simulations",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of bounding volume is typically used in a DBVT structure?",
            "short_title": "DBVT bounding volume",
            "answers": [
              {
                "answer": "Axis-Aligned Bounding Boxes (AABB)",
                "right": true
              },
              {
                "answer": "Oriented Bounding Boxes (OBB)",
                "right": false
              },
              {
                "answer": "Spheres",
                "right": false
              },
              {
                "answer": "Capsules",
                "right": false
              }
            ]
          },
          {
            "title": "How does a DBVT handle objects that frequently move within the scene?",
            "short_title": "Handling moving objects",
            "answers": [
              {
                "answer": "By restructuring the tree dynamically",
                "right": true
              },
              {
                "answer": "By completely rebuilding the tree every frame",
                "right": false
              },
              {
                "answer": "By storing objects separately from the tree",
                "right": false
              },
              {
                "answer": "By using spatial hashing instead of a tree structure",
                "right": false
              }
            ]
          },
          {
            "title": "What is a key characteristic of DBVT insertion operations?",
            "short_title": "DBVT insertion",
            "answers": [
              {
                "answer": "It is designed to be efficient and minimize tree imbalance",
                "right": true
              },
              {
                "answer": "It requires re-sorting all tree nodes",
                "right": false
              },
              {
                "answer": "It ignores objects that are moving",
                "right": false
              },
              {
                "answer": "It does not support real-time updates",
                "right": false
              }
            ]
          },
          {
            "title": "Why is DBVT preferred in real-time physics engines?",
            "short_title": "DBVT in real-time physics",
            "answers": [
              {
                "answer": "Because it allows efficient updates and queries",
                "right": true
              },
              {
                "answer": "Because it completely eliminates narrow-phase collision checks",
                "right": false
              },
              {
                "answer": "Because it precomputes all potential collisions at the start",
                "right": false
              },
              {
                "answer": "Because it uses neural networks for collision detection",
                "right": false
              }
            ]
          }
        ],
        "BVH (Bounding Volume Hierarchy) ": [
          {
            "title": "What is the primary advantage of using a Bounding Volume Hierarchy (BVH) in collision detection?",
            "short_title": "BVH advantage",
            "answers": [
              {
                "answer": "It reduces the number of collision checks needed",
                "right": true
              },
              {
                "answer": "It eliminates the need for narrow-phase collision detection",
                "right": false
              },
              {
                "answer": "It does not require updates when objects move",
                "right": false
              },
              {
                "answer": "It is faster than broad-phase methods in all cases",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following is a key characteristic of BVH structures?",
            "short_title": "BVH characteristics",
            "answers": [
              {
                "answer": "BVH organizes objects into a tree structure based on spatial hierarchy",
                "right": true
              },
              {
                "answer": "BVH requires objects to be stationary",
                "right": false
              },
              {
                "answer": "BVH does not require any updates after initial construction",
                "right": false
              },
              {
                "answer": "BVH is mainly used for rendering and not for physics simulations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main challenge of using BVH in dynamic scenes?",
            "short_title": "BVH challenge",
            "answers": [
              {
                "answer": "Frequent updates are needed to maintain tree efficiency",
                "right": true
              },
              {
                "answer": "BVH cannot be used for moving objects",
                "right": false
              },
              {
                "answer": "BVH always needs to be fully reconstructed each frame",
                "right": false
              },
              {
                "answer": "BVH does not support real-time applications",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of bounding volume is most commonly used in BVH for collision detection?",
            "short_title": "BVH bounding volume",
            "answers": [
              {
                "answer": "Axis-Aligned Bounding Boxes (AABB)",
                "right": true
              },
              {
                "answer": "Oriented Bounding Boxes (OBB)",
                "right": false
              },
              {
                "answer": "Convex Hulls",
                "right": false
              },
              {
                "answer": "Spheres",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these is a common method for updating a BVH in dynamic environments?",
            "short_title": "BVH updating method",
            "answers": [
              {
                "answer": "Refitting the tree without full reconstruction",
                "right": true
              },
              {
                "answer": "Rebuilding the entire BVH from scratch",
                "right": false
              },
              {
                "answer": "Ignoring moving objects",
                "right": false
              },
              {
                "answer": "Sorting all objects again and restructuring",
                "right": false
              }
            ]
          },
          {
            "title": "What is the computational complexity of BVH traversal in the best-case scenario?",
            "short_title": "BVH complexity",
            "answers": [
              {
                "answer": "O(log n)",
                "right": true
              },
              {
                "answer": "O(n)",
                "right": false
              },
              {
                "answer": "O(n log n)",
                "right": false
              },
              {
                "answer": "O(1)",
                "right": false
              }
            ]
          },
          {
            "title": "Which tree traversal method is commonly used for BVH in collision detection?",
            "short_title": "BVH traversal",
            "answers": [
              {
                "answer": "Depth-First Search (DFS)",
                "right": true
              },
              {
                "answer": "Breadth-First Search (BFS)",
                "right": false
              },
              {
                "answer": "Dijkstra's Algorithm",
                "right": false
              },
              {
                "answer": "A* Search",
                "right": false
              }
            ]
          },
          {
            "title": "How does BVH improve ray tracing performance?",
            "short_title": "BVH and Ray Tracing",
            "answers": [
              {
                "answer": "By reducing the number of ray-object intersection tests",
                "right": true
              },
              {
                "answer": "By eliminating the need for shaders",
                "right": false
              },
              {
                "answer": "By using brute-force intersection calculations",
                "right": false
              },
              {
                "answer": "By simplifying object geometry",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of BVH node structure is most efficient for modern CPUs and GPUs?",
            "short_title": "BVH node structure",
            "answers": [
              {
                "answer": "BVH with 4-ary or 8-ary nodes",
                "right": true
              },
              {
                "answer": "BVH with binary (2-ary) nodes only",
                "right": false
              },
              {
                "answer": "BVH with unstructured leaf nodes",
                "right": false
              },
              {
                "answer": "BVH without hierarchical structuring",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if a BVH is not updated properly in a dynamic scene?",
            "short_title": "BVH update issue",
            "answers": [
              {
                "answer": "Collisions may be missed or incorrectly detected",
                "right": true
              },
              {
                "answer": "The simulation speed increases",
                "right": false
              },
              {
                "answer": "The objects become static",
                "right": false
              },
              {
                "answer": "BVH does not require updates in dynamic scenes",
                "right": false
              }
            ]
          },
          {
            "title": "What is the primary advantage of using a Bounding Volume Hierarchy (BVH) in collision detection?",
            "short_title": "BVH advantage",
            "answers": [
              {
                "answer": "It reduces the number of collision checks needed",
                "right": true
              },
              {
                "answer": "It eliminates the need for narrow-phase collision detection",
                "right": false
              },
              {
                "answer": "It does not require updates when objects move",
                "right": false
              },
              {
                "answer": "It is faster than broad-phase methods in all cases",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following is a key characteristic of BVH structures?",
            "short_title": "BVH characteristics",
            "answers": [
              {
                "answer": "BVH organizes objects into a tree structure based on spatial hierarchy",
                "right": true
              },
              {
                "answer": "BVH requires objects to be stationary",
                "right": false
              },
              {
                "answer": "BVH does not require any updates after initial construction",
                "right": false
              },
              {
                "answer": "BVH is mainly used for rendering and not for physics simulations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main challenge of using BVH in dynamic scenes?",
            "short_title": "BVH challenge",
            "answers": [
              {
                "answer": "Frequent updates are needed to maintain tree efficiency",
                "right": true
              },
              {
                "answer": "BVH cannot be used for moving objects",
                "right": false
              },
              {
                "answer": "BVH always needs to be fully reconstructed each frame",
                "right": false
              },
              {
                "answer": "BVH does not support real-time applications",
                "right": false
              }
            ]
          },
          {
            "title": "Which type of bounding volume is most commonly used in BVH for collision detection?",
            "short_title": "BVH bounding volume",
            "answers": [
              {
                "answer": "Axis-Aligned Bounding Boxes (AABB)",
                "right": true
              },
              {
                "answer": "Oriented Bounding Boxes (OBB)",
                "right": false
              },
              {
                "answer": "Convex Hulls",
                "right": false
              },
              {
                "answer": "Spheres",
                "right": false
              }
            ]
          },
          {
            "title": "Which of these is a common method for updating a BVH in dynamic environments?",
            "short_title": "BVH updating method",
            "answers": [
              {
                "answer": "Refitting the tree without full reconstruction",
                "right": true
              },
              {
                "answer": "Rebuilding the entire BVH from scratch",
                "right": false
              },
              {
                "answer": "Ignoring moving objects",
                "right": false
              },
              {
                "answer": "Sorting all objects again and restructuring",
                "right": false
              }
            ]
          }
        ],
        "SAT": [
          {
            "title": "What is the primary principle of the Separating Axis Theorem (SAT)?",
            "short_title": "SAT principle",
            "answers": [
              {
                "answer": "Two convex shapes do not intersect if a separating axis exists",
                "right": true
              },
              {
                "answer": "Two objects are always intersecting unless proven otherwise",
                "right": false
              },
              {
                "answer": "SAT applies only to concave shapes",
                "right": false
              },
              {
                "answer": "SAT determines object velocity during collisions",
                "right": false
              }
            ]
          },
          {
            "title": "Which geometric property is essential for SAT to work effectively?",
            "short_title": "SAT geometry",
            "answers": [
              {
                "answer": "Convexity",
                "right": true
              },
              {
                "answer": "Concavity",
                "right": false
              },
              {
                "answer": "Curvature",
                "right": false
              },
              {
                "answer": "Symmetry",
                "right": false
              }
            ]
          },
          {
            "title": "How does SAT determine if two shapes are colliding?",
            "short_title": "SAT method",
            "answers": [
              {
                "answer": "By projecting both shapes onto potential separating axes and checking for overlap",
                "right": true
              },
              {
                "answer": "By checking each vertex for intersections",
                "right": false
              },
              {
                "answer": "By using a brute-force comparison of all points",
                "right": false
              },
              {
                "answer": "By solving linear equations for each object",
                "right": false
              }
            ]
          },
          {
            "title": "Which types of shapes can be efficiently handled by SAT?",
            "short_title": "SAT shapes",
            "answers": [
              {
                "answer": "Convex polygons and polyhedra",
                "right": true
              },
              {
                "answer": "Arbitrary concave shapes",
                "right": false
              },
              {
                "answer": "Only circles and ellipses",
                "right": false
              },
              {
                "answer": "Non-Euclidean surfaces",
                "right": false
              }
            ]
          }
        ],
        "Intersection": [
          {
            "title": "What does intersection testing determine in game physics?",
            "short_title": "Intersection purpose",
            "answers": [
              {
                "answer": "Whether two objects overlap in space",
                "right": true
              },
              {
                "answer": "The friction coefficient between surfaces",
                "right": false
              },
              {
                "answer": "The gravitational pull between objects",
                "right": false
              },
              {
                "answer": "The velocity of an object after collision",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following is NOT a common intersection test?",
            "short_title": "Intersection test types",
            "answers": [
              {
                "answer": "Ray vs Triangle",
                "right": false
              },
              {
                "answer": "Sphere vs AABB",
                "right": false
              },
              {
                "answer": "BVH vs DBVT",
                "right": true
              },
              {
                "answer": "Polygon vs Circle",
                "right": false
              }
            ]
          }
        ],
        "Custom Memory Management and Allocators": [
          {
            "title": "What is the primary goal of custom memory management in C#?",
            "short_title": "Memory management goal",
            "answers": [
              {
                "answer": "Optimize performance by controlling allocations",
                "right": true
              },
              {
                "answer": "Simplify rendering",
                "right": false
              },
              {
                "answer": "Increase thread usage",
                "right": false
              },
              {
                "answer": "Reduce code size",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Span<T>' provide for memory management?",
            "short_title": "Span<T>",
            "answers": [
              {
                "answer": "A view over contiguous memory without allocations",
                "right": true
              },
              {
                "answer": "A heap-allocated array",
                "right": false
              },
              {
                "answer": "A rendering buffer",
                "right": false
              },
              {
                "answer": "A threading tool",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace includes 'Span<T>' in C#?",
            "short_title": "Span namespace",
            "answers": [
              {
                "answer": "System",
                "right": true
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System.Threading",
                "right": false
              },
              {
                "answer": "System.Collections",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Memory<T>' represent in C#?",
            "short_title": "Memory<T>",
            "answers": [
              {
                "answer": "A managed memory block with ownership",
                "right": true
              },
              {
                "answer": "A stack-allocated buffer",
                "right": false
              },
              {
                "answer": "A rendering memory",
                "right": false
              },
              {
                "answer": "A thread pool",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'stackalloc' in Unity?",
            "short_title": "Stackalloc benefit",
            "answers": [
              {
                "answer": "Avoids GC by allocating on the stack",
                "right": true
              },
              {
                "answer": "Increases heap usage",
                "right": false
              },
              {
                "answer": "Speeds up rendering",
                "right": false
              },
              {
                "answer": "Stops memory allocation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NativeArray<T>' provide in Unity?",
            "short_title": "NativeArray<T>",
            "answers": [
              {
                "answer": "Unmanaged, contiguous memory for Jobs",
                "right": true
              },
              {
                "answer": "Managed heap memory",
                "right": false
              },
              {
                "answer": "Rendering arrays",
                "right": false
              },
              {
                "answer": "Threaded arrays",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace includes 'NativeArray<T>' in Unity?",
            "short_title": "NativeArray namespace",
            "answers": [
              {
                "answer": "Unity.Collections",
                "right": true
              },
              {
                "answer": "System",
                "right": false
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System.Threading",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnsafeUtility.Malloc()' do in Unity?",
            "short_title": "UnsafeUtility.Malloc",
            "answers": [
              {
                "answer": "Allocates aligned unmanaged memory",
                "right": true
              },
              {
                "answer": "Frees managed memory",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Pins memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is a custom allocator in C#?",
            "short_title": "Custom allocator",
            "answers": [
              {
                "answer": "A mechanism to control memory allocation",
                "right": true
              },
              {
                "answer": "A rendering tool",
                "right": false
              },
              {
                "answer": "A threading system",
                "right": false
              },
              {
                "answer": "A garbage collector",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NativeSlice<T>' optimize in Unity?",
            "short_title": "NativeSlice<T>",
            "answers": [
              {
                "answer": "Access to a subset of NativeArray without copying",
                "right": true
              },
              {
                "answer": "Heap allocations",
                "right": false
              },
              {
                "answer": "Rendering slices",
                "right": false
              },
              {
                "answer": "Thread management",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Allocator.Temp' do in Unity?",
            "short_title": "Allocator.Temp",
            "answers": [
              {
                "answer": "Allocates short-lived unmanaged memory",
                "right": true
              },
              {
                "answer": "Frees permanent memory",
                "right": false
              },
              {
                "answer": "Renders temporary data",
                "right": false
              },
              {
                "answer": "Stops allocation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'MemoryPool<T>' in C#?",
            "short_title": "MemoryPool<T>",
            "answers": [
              {
                "answer": "Manages reusable memory buffers",
                "right": true
              },
              {
                "answer": "Allocates permanent memory",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Stops pooling",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ArrayPool<T>.Shared' provide?",
            "short_title": "ArrayPool.Shared",
            "answers": [
              {
                "answer": "A global pool for reusing arrays",
                "right": true
              },
              {
                "answer": "A new array each time",
                "right": false
              },
              {
                "answer": "A rendering pool",
                "right": false
              },
              {
                "answer": "A threading pool",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity-specific use of 'NativeArray<T>'?",
            "short_title": "NativeArray in Unity",
            "answers": [
              {
                "answer": "Storing data for Job System tasks",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnsafeUtility.Free()' do in Unity?",
            "short_title": "UnsafeUtility.Free",
            "answers": [
              {
                "answer": "Frees unmanaged memory safely",
                "right": true
              },
              {
                "answer": "Allocates memory",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Pins memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ref' keyword optimize in memory management?",
            "short_title": "ref keyword",
            "answers": [
              {
                "answer": "Passes structs by reference, avoiding copies",
                "right": true
              },
              {
                "answer": "Creates new objects",
                "right": false
              },
              {
                "answer": "Stops references",
                "right": false
              },
              {
                "answer": "Renders structs",
                "right": false
              }
            ]
          },
          {
            "title": "What is the risk of custom allocators in Unity?",
            "short_title": "Allocator risk",
            "answers": [
              {
                "answer": "Memory leaks if not freed properly",
                "right": true
              },
              {
                "answer": "Slower rendering",
                "right": false
              },
              {
                "answer": "Stopped physics",
                "right": false
              },
              {
                "answer": "Increased GC usage",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NativeList<T>' provide over 'List<T>' in Unity?",
            "short_title": "NativeList vs List",
            "answers": [
              {
                "answer": "Unmanaged memory with dynamic resizing",
                "right": true
              },
              {
                "answer": "Managed memory",
                "right": false
              },
              {
                "answer": "Rendering lists",
                "right": false
              },
              {
                "answer": "Threaded lists",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Allocator.Persistent' do in Unity?",
            "short_title": "Allocator.Persistent",
            "answers": [
              {
                "answer": "Allocates long-term unmanaged memory",
                "right": true
              },
              {
                "answer": "Frees temporary memory",
                "right": false
              },
              {
                "answer": "Renders persistent data",
                "right": false
              },
              {
                "answer": "Stops allocation",
                "right": false
              }
            ]
          },
          {
            "title": "What is a practical Unity use of 'Span<T>'?",
            "short_title": "Span in Unity",
            "answers": [
              {
                "answer": "Efficiently processing NativeArray data",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating threads",
                "right": false
              },
              {
                "answer": "Managing UI",
                "right": false
              }
            ]
          }
        ],
        "Animation Rigging and Procedural Animation": [
          {
            "title": "What is the primary purpose of Unity’s Animation Rigging package?",
            "short_title": "Animation Rigging purpose",
            "answers": [
              {
                "answer": "Runtime rigging for procedural animation",
                "right": true
              },
              {
                "answer": "Rendering animations",
                "right": false
              },
              {
                "answer": "Physics rigging",
                "right": false
              },
              {
                "answer": "UI animation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RigBuilder' do in Unity’s Animation Rigging?",
            "short_title": "RigBuilder",
            "answers": [
              {
                "answer": "Manages and evaluates rigging constraints",
                "right": true
              },
              {
                "answer": "Stops rigging",
                "right": false
              },
              {
                "answer": "Renders rigs",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'TwoBoneIKConstraint' in Animation Rigging?",
            "short_title": "TwoBoneIKConstraint",
            "answers": [
              {
                "answer": "Solves IK for a two-bone chain",
                "right": true
              },
              {
                "answer": "Renders IK",
                "right": false
              },
              {
                "answer": "Stops IK",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'MultiAimConstraint' achieve in Unity?",
            "short_title": "MultiAimConstraint",
            "answers": [
              {
                "answer": "Orients a bone toward multiple targets",
                "right": true
              },
              {
                "answer": "Stops aiming",
                "right": false
              },
              {
                "answer": "Renders aim visuals",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'RigConstraint' base class?",
            "short_title": "RigConstraint",
            "answers": [
              {
                "answer": "Enables custom rigging constraints",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops constraints",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AnimatorJobExtensions.AddJobDependency()' do?",
            "short_title": "AddJobDependency",
            "answers": [
              {
                "answer": "Links animator jobs to custom jobs",
                "right": true
              },
              {
                "answer": "Renders jobs",
                "right": false
              },
              {
                "answer": "Stops animator jobs",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Procedural Animation' in Unity?",
            "short_title": "Procedural Animation",
            "answers": [
              {
                "answer": "Generates animation dynamically at runtime",
                "right": true
              },
              {
                "answer": "Stops animation",
                "right": false
              },
              {
                "answer": "Renders static animations",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'TwistChainConstraint' control in Animation Rigging?",
            "short_title": "TwistChainConstraint",
            "answers": [
              {
                "answer": "Distributes twist along a bone chain",
                "right": true
              },
              {
                "answer": "Renders twists",
                "right": false
              },
              {
                "answer": "Stops twisting",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'AnimationScriptPlayable' in Unity?",
            "short_title": "AnimationScriptPlayable",
            "answers": [
              {
                "answer": "Runs custom animation logic in a PlayableGraph",
                "right": true
              },
              {
                "answer": "Stops playables",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RigTransform' attribute optimize?",
            "short_title": "RigTransform",
            "answers": [
              {
                "answer": "Marks transforms for rigging efficiency",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops transforms",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'PlayableGraph.Evaluate()'?",
            "short_title": "Evaluate",
            "answers": [
              {
                "answer": "Manually updates animation playables",
                "right": true
              },
              {
                "answer": "Renders playables",
                "right": false
              },
              {
                "answer": "Stops evaluation",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ChainIKConstraint' solve in Unity?",
            "short_title": "ChainIKConstraint",
            "answers": [
              {
                "answer": "IK for a multi-bone chain",
                "right": true
              },
              {
                "answer": "Stops IK",
                "right": false
              },
              {
                "answer": "Renders chains",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AnimationUtility.SetAnimationEvents()'?",
            "short_title": "SetAnimationEvents",
            "answers": [
              {
                "answer": "Adds events to an AnimationClip at runtime",
                "right": true
              },
              {
                "answer": "Stops events",
                "right": false
              },
              {
                "answer": "Renders events",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RigLayer' manage in Animation Rigging?",
            "short_title": "RigLayer",
            "answers": [
              {
                "answer": "Groups constraints for enabling/disabling",
                "right": true
              },
              {
                "answer": "Renders layers",
                "right": false
              },
              {
                "answer": "Stops rigging",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Animator.Rebind()' in Unity?",
            "short_title": "Rebind",
            "answers": [
              {
                "answer": "Resets bindings for runtime changes",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops animator",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayableDirector.Evaluate()' do?",
            "short_title": "PlayableDirector.Evaluate",
            "answers": [
              {
                "answer": "Manually updates the playable timeline",
                "right": true
              },
              {
                "answer": "Renders timelines",
                "right": false
              },
              {
                "answer": "Stops evaluation",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AnimationRiggingConstraint' interface?",
            "short_title": "AnimationRiggingConstraint",
            "answers": [
              {
                "answer": "Defines custom constraint behavior",
                "right": true
              },
              {
                "answer": "Stops constraints",
                "right": false
              },
              {
                "answer": "Renders constraints",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetBoneLocalRotation()' achieve?",
            "short_title": "SetBoneLocalRotation",
            "answers": [
              {
                "answer": "Sets a bone’s local rotation at runtime",
                "right": true
              },
              {
                "answer": "Renders bone rotation",
                "right": false
              },
              {
                "answer": "Stops rotation",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'AnimationPlayableOutput'?",
            "short_title": "AnimationPlayableOutput",
            "answers": [
              {
                "answer": "Routes animation data to custom outputs",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders outputs",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RigEffectorData' define in Animation Rigging?",
            "short_title": "RigEffectorData",
            "answers": [
              {
                "answer": "Visual representation of constraint targets",
                "right": true
              },
              {
                "answer": "Renders effectors",
                "right": false
              },
              {
                "answer": "Stops effectors",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          }
        ],
        "Input System Architecture and Custom Devices": [
          {
            "title": "What is the core advantage of Unity’s new Input System architecture?",
            "short_title": "Input System advantage",
            "answers": [
              {
                "answer": "Decoupled, extensible input processing",
                "right": true
              },
              {
                "answer": "Rendering inputs",
                "right": false
              },
              {
                "answer": "Physics input",
                "right": false
              },
              {
                "answer": "UI rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.RegisterLayout()' do in Unity?",
            "short_title": "RegisterLayout",
            "answers": [
              {
                "answer": "Registers a custom input device layout",
                "right": true
              },
              {
                "answer": "Stops layouts",
                "right": false
              },
              {
                "answer": "Renders layouts",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'IInputDevice' interface in the Input System?",
            "short_title": "IInputDevice",
            "answers": [
              {
                "answer": "Defines the contract for custom input devices",
                "right": true
              },
              {
                "answer": "Renders device visuals",
                "right": false
              },
              {
                "answer": "Stops devices",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputControlLayout' define in Unity?",
            "short_title": "InputControlLayout",
            "answers": [
              {
                "answer": "The structure and controls of an input device",
                "right": true
              },
              {
                "answer": "Rendering control",
                "right": false
              },
              {
                "answer": "Physics layout",
                "right": false
              },
              {
                "answer": "Animation layout",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'InputSystem.QueueDeltaStateEvent()'?",
            "short_title": "QueueDeltaStateEvent",
            "answers": [
              {
                "answer": "Updates device state with minimal latency",
                "right": true
              },
              {
                "answer": "Stops state updates",
                "right": false
              },
              {
                "answer": "Renders state",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputDeviceBuilder' facilitate in Unity?",
            "short_title": "InputDeviceBuilder",
            "answers": [
              {
                "answer": "Constructs custom input devices at runtime",
                "right": true
              },
              {
                "answer": "Renders devices",
                "right": false
              },
              {
                "answer": "Stops device building",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputSystem.onDeviceChange' at a low level?",
            "short_title": "onDeviceChange",
            "answers": [
              {
                "answer": "Detects hardware device connections/disconnections",
                "right": true
              },
              {
                "answer": "Renders device changes",
                "right": false
              },
              {
                "answer": "Stops device changes",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputControlPath.ToHumanReadableString()' provide?",
            "short_title": "ToHumanReadableString",
            "answers": [
              {
                "answer": "Converts control paths to readable names",
                "right": true
              },
              {
                "answer": "Stops path reading",
                "right": false
              },
              {
                "answer": "Renders paths",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'InputDeviceDescription' in Unity?",
            "short_title": "InputDeviceDescription",
            "answers": [
              {
                "answer": "Describes device properties for layout matching",
                "right": true
              },
              {
                "answer": "Renders device descriptions",
                "right": false
              },
              {
                "answer": "Stops device matching",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.AddDevice()' achieve?",
            "short_title": "AddDevice",
            "answers": [
              {
                "answer": "Adds a custom device to the system",
                "right": true
              },
              {
                "answer": "Removes a device",
                "right": false
              },
              {
                "answer": "Renders devices",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'InputActionMap.FromJson()'?",
            "short_title": "FromJson",
            "answers": [
              {
                "answer": "Loads action maps dynamically from JSON",
                "right": true
              },
              {
                "answer": "Stops JSON loading",
                "right": false
              },
              {
                "answer": "Renders JSON",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.settings.updateMode' control?",
            "short_title": "updateMode",
            "answers": [
              {
                "answer": "How often input is processed (e.g., FixedUpdate)",
                "right": true
              },
              {
                "answer": "Rendering updates",
                "right": false
              },
              {
                "answer": "Physics updates",
                "right": false
              },
              {
                "answer": "Animation updates",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputProcessor' in Unity’s Input System?",
            "short_title": "InputProcessor",
            "answers": [
              {
                "answer": "Customizes raw input data processing",
                "right": true
              },
              {
                "answer": "Stops input processing",
                "right": false
              },
              {
                "answer": "Renders input",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.RegisterInteraction()' enable?",
            "short_title": "RegisterInteraction",
            "answers": [
              {
                "answer": "Adds custom input interaction behaviors",
                "right": true
              },
              {
                "answer": "Renders interactions",
                "right": false
              },
              {
                "answer": "Stops interactions",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'InputDevice.TryGetFeatureValue()'?",
            "short_title": "TryGetFeatureValue",
            "answers": [
              {
                "answer": "Safely queries device-specific features",
                "right": true
              },
              {
                "answer": "Stops feature queries",
                "right": false
              },
              {
                "answer": "Renders features",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.QueueEvent()' allow in Unity?",
            "short_title": "QueueEvent",
            "answers": [
              {
                "answer": "Injects custom input events",
                "right": true
              },
              {
                "answer": "Renders events",
                "right": false
              },
              {
                "answer": "Stops events",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'InputControlAttribute' in custom layouts?",
            "short_title": "InputControlAttribute",
            "answers": [
              {
                "answer": "Configures control properties in layouts",
                "right": true
              },
              {
                "answer": "Stops control attributes",
                "right": false
              },
              {
                "answer": "Renders controls",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.SaveAndReset()' do?",
            "short_title": "SaveAndReset",
            "answers": [
              {
                "answer": "Saves state and resets the system",
                "right": true
              },
              {
                "answer": "Renders resets",
                "right": false
              },
              {
                "answer": "Stops resets",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'InputActionManager' in Unity?",
            "short_title": "InputActionManager",
            "answers": [
              {
                "answer": "Centralizes action enabling/disabling",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops actions",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.onAnyButtonPress' monitor?",
            "short_title": "onAnyButtonPress",
            "answers": [
              {
                "answer": "Any button press across devices",
                "right": true
              },
              {
                "answer": "Renders button presses",
                "right": false
              },
              {
                "answer": "Stops button presses",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          }
        ],
        "Advanced Design Patterns and Architecture": [
          {
            "title": "What is the primary goal of advanced design patterns in C#?",
            "short_title": "Design patterns goal",
            "answers": [
              {
                "answer": "Create scalable, maintainable code",
                "right": true
              },
              {
                "answer": "Simplify rendering",
                "right": false
              },
              {
                "answer": "Increase memory usage",
                "right": false
              },
              {
                "answer": "Reduce threading",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Dependency Injection (DI) pattern achieve?",
            "short_title": "Dependency Injection",
            "answers": [
              {
                "answer": "Decouples dependencies via injection",
                "right": true
              },
              {
                "answer": "Increases coupling",
                "right": false
              },
              {
                "answer": "Renders dependencies",
                "right": false
              },
              {
                "answer": "Stops dependencies",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common DI framework used in Unity?",
            "short_title": "DI in Unity",
            "answers": [
              {
                "answer": "Zenject",
                "right": true
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "Mono",
                "right": false
              },
              {
                "answer": "System",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Command pattern encapsulate?",
            "short_title": "Command pattern",
            "answers": [
              {
                "answer": "An action as an object",
                "right": true
              },
              {
                "answer": "A rendering task",
                "right": false
              },
              {
                "answer": "A threading operation",
                "right": false
              },
              {
                "answer": "A memory allocator",
                "right": false
              }
            ]
          },
          {
            "title": "What is a practical Unity use of the Command pattern?",
            "short_title": "Command in Unity",
            "answers": [
              {
                "answer": "Implementing undo/redo functionality",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Observer pattern facilitate?",
            "short_title": "Observer pattern",
            "answers": [
              {
                "answer": "Notifies subscribers of state changes",
                "right": true
              },
              {
                "answer": "Creates objects",
                "right": false
              },
              {
                "answer": "Renders updates",
                "right": false
              },
              {
                "answer": "Stops notifications",
                "right": false
              }
            ]
          },
          {
            "title": "How is the Observer pattern often implemented in Unity?",
            "short_title": "Observer in Unity",
            "answers": [
              {
                "answer": "Using C# events or UnityEvent",
                "right": true
              },
              {
                "answer": "Using loops",
                "right": false
              },
              {
                "answer": "Using rendering",
                "right": false
              },
              {
                "answer": "Using threads",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Strategy pattern enable?",
            "short_title": "Strategy pattern",
            "answers": [
              {
                "answer": "Swappable algorithms at runtime",
                "right": true
              },
              {
                "answer": "Fixed algorithms",
                "right": false
              },
              {
                "answer": "Rendering strategies",
                "right": false
              },
              {
                "answer": "Memory allocation",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity-specific use of the Strategy pattern?",
            "short_title": "Strategy in Unity",
            "answers": [
              {
                "answer": "Switching AI behaviors",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating threads",
                "right": false
              },
              {
                "answer": "Managing UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Decorator pattern add to objects?",
            "short_title": "Decorator pattern",
            "answers": [
              {
                "answer": "Dynamic behavior without subclassing",
                "right": true
              },
              {
                "answer": "Static properties",
                "right": false
              },
              {
                "answer": "Rendering features",
                "right": false
              },
              {
                "answer": "Threading capabilities",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Adapter pattern achieve?",
            "short_title": "Adapter pattern",
            "answers": [
              {
                "answer": "Converts incompatible interfaces",
                "right": true
              },
              {
                "answer": "Creates new objects",
                "right": false
              },
              {
                "answer": "Renders interfaces",
                "right": false
              },
              {
                "answer": "Stops compatibility",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use case for the Adapter pattern?",
            "short_title": "Adapter in Unity",
            "answers": [
              {
                "answer": "Integrating third-party APIs",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Facade pattern simplify?",
            "short_title": "Facade pattern",
            "answers": [
              {
                "answer": "Complex subsystem interactions",
                "right": true
              },
              {
                "answer": "Rendering tasks",
                "right": false
              },
              {
                "answer": "Threading operations",
                "right": false
              },
              {
                "answer": "Memory management",
                "right": false
              }
            ]
          },
          {
            "title": "What does the State pattern manage?",
            "short_title": "State pattern",
            "answers": [
              {
                "answer": "Object behavior based on its state",
                "right": true
              },
              {
                "answer": "Static object properties",
                "right": false
              },
              {
                "answer": "Rendering states",
                "right": false
              },
              {
                "answer": "Thread states",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity application of the State pattern?",
            "short_title": "State in Unity",
            "answers": [
              {
                "answer": "Managing player states (e.g., idle, running)",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating threads",
                "right": false
              },
              {
                "answer": "Stopping UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Mediator pattern coordinate?",
            "short_title": "Mediator pattern",
            "answers": [
              {
                "answer": "Communication between objects",
                "right": true
              },
              {
                "answer": "Rendering between objects",
                "right": false
              },
              {
                "answer": "Threading between objects",
                "right": false
              },
              {
                "answer": "Memory between objects",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Builder pattern separate?",
            "short_title": "Builder pattern",
            "answers": [
              {
                "answer": "Object construction from its representation",
                "right": true
              },
              {
                "answer": "Rendering from construction",
                "right": false
              },
              {
                "answer": "Threading from construction",
                "right": false
              },
              {
                "answer": "Memory from construction",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity use of the Builder pattern?",
            "short_title": "Builder in Unity",
            "answers": [
              {
                "answer": "Constructing complex GameObjects",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Prototype pattern enable?",
            "short_title": "Prototype pattern",
            "answers": [
              {
                "answer": "Cloning objects efficiently",
                "right": true
              },
              {
                "answer": "Rendering prototypes",
                "right": false
              },
              {
                "answer": "Threading prototypes",
                "right": false
              },
              {
                "answer": "Stopping clones",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity-specific architecture pattern?",
            "short_title": "Unity architecture",
            "answers": [
              {
                "answer": "Entity-Component-System (ECS)",
                "right": true
              },
              {
                "answer": "Rendering-System",
                "right": false
              },
              {
                "answer": "Threading-System",
                "right": false
              },
              {
                "answer": "Memory-System",
                "right": false
              }
            ]
          }
        ],
        "Reflection and Code Generation": [
          {
            "title": "What is the primary purpose of reflection in C#?",
            "short_title": "Reflection purpose",
            "answers": [
              {
                "answer": "Inspect and manipulate types at runtime",
                "right": true
              },
              {
                "answer": "Render objects",
                "right": false
              },
              {
                "answer": "Manage threads",
                "right": false
              },
              {
                "answer": "Optimize memory",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace provides reflection functionality in C#?",
            "short_title": "Reflection namespace",
            "answers": [
              {
                "answer": "System.Reflection",
                "right": true
              },
              {
                "answer": "UnityEngine",
                "right": false
              },
              {
                "answer": "System",
                "right": false
              },
              {
                "answer": "System.Threading",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Type.GetType()' do?",
            "short_title": "Type.GetType",
            "answers": [
              {
                "answer": "Gets a Type object by its name",
                "right": true
              },
              {
                "answer": "Creates a new type",
                "right": false
              },
              {
                "answer": "Renders a type",
                "right": false
              },
              {
                "answer": "Stops a type",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Activator.CreateInstance()' do?",
            "short_title": "Activator.CreateInstance",
            "answers": [
              {
                "answer": "Creates an instance of a type at runtime",
                "right": true
              },
              {
                "answer": "Deletes an instance",
                "right": false
              },
              {
                "answer": "Renders an instance",
                "right": false
              },
              {
                "answer": "Stops creation",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common Unity use of reflection?",
            "short_title": "Reflection in Unity",
            "answers": [
              {
                "answer": "Accessing private fields for debugging",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Creating loops",
                "right": false
              },
              {
                "answer": "Managing physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'MethodInfo.Invoke()' do?",
            "short_title": "MethodInfo.Invoke",
            "answers": [
              {
                "answer": "Calls a method dynamically",
                "right": true
              },
              {
                "answer": "Creates a method",
                "right": false
              },
              {
                "answer": "Renders a method",
                "right": false
              },
              {
                "answer": "Stops a method",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'FieldInfo.GetValue()' retrieve?",
            "short_title": "FieldInfo.GetValue",
            "answers": [
              {
                "answer": "The value of a field at runtime",
                "right": true
              },
              {
                "answer": "A method’s return value",
                "right": false
              },
              {
                "answer": "A rendered field",
                "right": false
              },
              {
                "answer": "A type’s name",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Assembly.GetExecutingAssembly()'?",
            "short_title": "GetExecutingAssembly",
            "answers": [
              {
                "answer": "Gets the current assembly",
                "right": true
              },
              {
                "answer": "Stops the assembly",
                "right": false
              },
              {
                "answer": "Renders the assembly",
                "right": false
              },
              {
                "answer": "Creates an assembly",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Attribute.GetCustomAttribute()' do?",
            "short_title": "GetCustomAttribute",
            "answers": [
              {
                "answer": "Retrieves a custom attribute from a member",
                "right": true
              },
              {
                "answer": "Creates an attribute",
                "right": false
              },
              {
                "answer": "Renders an attribute",
                "right": false
              },
              {
                "answer": "Stops attributes",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity-specific use of custom attributes?",
            "short_title": "Custom attributes in Unity",
            "answers": [
              {
                "answer": "Creating Inspector-drawn properties",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Managing threads",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Emit' in code generation refer to?",
            "short_title": "Emit",
            "answers": [
              {
                "answer": "Generating IL instructions",
                "right": true
              },
              {
                "answer": "Rendering code",
                "right": false
              },
              {
                "answer": "Stopping code",
                "right": false
              },
              {
                "answer": "Creating threads",
                "right": false
              }
            ]
          },
          {
            "title": "Which class is used to emit IL code in C#?",
            "short_title": "IL emitter",
            "answers": [
              {
                "answer": "ILGenerator",
                "right": true
              },
              {
                "answer": "CodeEmitter",
                "right": false
              },
              {
                "answer": "ILRenderer",
                "right": false
              },
              {
                "answer": "EmitClass",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'DynamicMethod' enable?",
            "short_title": "DynamicMethod",
            "answers": [
              {
                "answer": "Runtime method generation",
                "right": true
              },
              {
                "answer": "Static method calls",
                "right": false
              },
              {
                "answer": "Rendered methods",
                "right": false
              },
              {
                "answer": "Stopped methods",
                "right": false
              }
            ]
          },
          {
            "title": "What is a practical Unity use of code generation?",
            "short_title": "Code generation in Unity",
            "answers": [
              {
                "answer": "Creating custom serializers",
                "right": true
              },
              {
                "answer": "Rendering objects",
                "right": false
              },
              {
                "answer": "Managing loops",
                "right": false
              },
              {
                "answer": "Stopping physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssemblyBuilder' do?",
            "short_title": "AssemblyBuilder",
            "answers": [
              {
                "answer": "Creates a dynamic assembly",
                "right": true
              },
              {
                "answer": "Loads an assembly",
                "right": false
              },
              {
                "answer": "Renders an assembly",
                "right": false
              },
              {
                "answer": "Stops an assembly",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PropertyInfo.SetValue()' do?",
            "short_title": "PropertyInfo.SetValue",
            "answers": [
              {
                "answer": "Sets a property value at runtime",
                "right": true
              },
              {
                "answer": "Gets a property value",
                "right": false
              },
              {
                "answer": "Renders a property",
                "right": false
              },
              {
                "answer": "Creates a property",
                "right": false
              }
            ]
          },
          {
            "title": "What is the performance cost of reflection?",
            "short_title": "Reflection cost",
            "answers": [
              {
                "answer": "Slower execution due to runtime lookup",
                "right": true
              },
              {
                "answer": "Faster rendering",
                "right": false
              },
              {
                "answer": "Reduced memory usage",
                "right": false
              },
              {
                "answer": "Increased threading",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'TypeBuilder' enable in code generation?",
            "short_title": "TypeBuilder",
            "answers": [
              {
                "answer": "Defines a dynamic type",
                "right": true
              },
              {
                "answer": "Renders a type",
                "right": false
              },
              {
                "answer": "Stops a type",
                "right": false
              },
              {
                "answer": "Loads a type",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Assembly.GetTypes()' return?",
            "short_title": "Assembly.GetTypes",
            "answers": [
              {
                "answer": "All types defined in the assembly",
                "right": true
              },
              {
                "answer": "A single type",
                "right": false
              },
              {
                "answer": "Rendered types",
                "right": false
              },
              {
                "answer": "Stopped types",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Unity-specific challenge with reflection?",
            "short_title": "Reflection challenge",
            "answers": [
              {
                "answer": "Performance overhead in frequent use",
                "right": true
              },
              {
                "answer": "Rendering limitations",
                "right": false
              },
              {
                "answer": "Threading issues",
                "right": false
              },
              {
                "answer": "Physics constraints",
                "right": false
              }
            ]
          }
        ],
        "Memory Management at Scale": [
          {
            "title": "What is the primary challenge of memory management at scale in Unity?",
            "short_title": "Memory challenge",
            "answers": [
              {
                "answer": "Preventing fragmentation and leaks",
                "right": true
              },
              {
                "answer": "Rendering memory",
                "right": false
              },
              {
                "answer": "Physics memory",
                "right": false
              },
              {
                "answer": "UI memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NativeMemory.AllocZeroed()' optimize in Unity?",
            "short_title": "AllocZeroed",
            "answers": [
              {
                "answer": "Allocates zero-initialized unmanaged memory",
                "right": true
              },
              {
                "answer": "Stops allocation",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'System.Buffers.ArrayPool<T>.Shared'?",
            "short_title": "ArrayPool.Shared",
            "answers": [
              {
                "answer": "Provides a global pool for array reuse",
                "right": true
              },
              {
                "answer": "Renders arrays",
                "right": false
              },
              {
                "answer": "Stops pooling",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GC.GetGeneration()' indicate in C#?",
            "short_title": "GetGeneration",
            "answers": [
              {
                "answer": "The generation of an object in the GC heap",
                "right": true
              },
              {
                "answer": "Rendering generation",
                "right": false
              },
              {
                "answer": "Physics generation",
                "right": false
              },
              {
                "answer": "Animation generation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Addressables.LoadResourceLocationsAsync()'?",
            "short_title": "LoadResourceLocationsAsync",
            "answers": [
              {
                "answer": "Preloads asset metadata without allocation",
                "right": true
              },
              {
                "answer": "Stops loading",
                "right": false
              },
              {
                "answer": "Renders locations",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Runtime.GCSettings.LargeObjectHeapThreshold' control?",
            "short_title": "LargeObjectHeapThreshold",
            "answers": [
              {
                "answer": "Size threshold for LOH allocations",
                "right": true
              },
              {
                "answer": "Rendering threshold",
                "right": false
              },
              {
                "answer": "Physics threshold",
                "right": false
              },
              {
                "answer": "Animation threshold",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Unity.Collections.LowLevel.Unsafe.UnsafeUtility.Malloc()'?",
            "short_title": "UnsafeUtility.Malloc",
            "answers": [
              {
                "answer": "Allocates unmanaged memory with alignment",
                "right": true
              },
              {
                "answer": "Stops memory allocation",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'MemoryProfiler.TakeSnapshot()' achieve in Unity?",
            "short_title": "TakeSnapshot",
            "answers": [
              {
                "answer": "Captures a detailed heap memory state",
                "right": true
              },
              {
                "answer": "Renders snapshots",
                "right": false
              },
              {
                "answer": "Stops profiling",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'NativeList<T>' over 'List<T>' in Unity?",
            "short_title": "NativeList<T>",
            "answers": [
              {
                "answer": "Unmanaged, contiguous memory for performance",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops list use",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.GC.TryStartNoGCRegion()' optimize at scale?",
            "short_title": "TryStartNoGCRegion",
            "answers": [
              {
                "answer": "Prevents GC during large operations",
                "right": true
              },
              {
                "answer": "Stops GC entirely",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Addressables.InstantiateAsync()' at scale?",
            "short_title": "InstantiateAsync",
            "answers": [
              {
                "answer": "Loads and instantiates assets with memory tracking",
                "right": true
              },
              {
                "answer": "Stops instantiation",
                "right": false
              },
              {
                "answer": "Renders instances",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Runtime.InteropServices.Marshal.SizeOf()' provide?",
            "short_title": "SizeOf",
            "answers": [
              {
                "answer": "Size of a struct in bytes for memory planning",
                "right": true
              },
              {
                "answer": "Rendering size",
                "right": false
              },
              {
                "answer": "Physics size",
                "right": false
              },
              {
                "answer": "Animation size",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'NativeHashMap<TKey, TValue>' in Unity?",
            "short_title": "NativeHashMap",
            "answers": [
              {
                "answer": "Fast, unmanaged key-value storage",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops hash maps",
                "right": false
              },
              {
                "answer": "Handles rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Buffers.MemoryHandle' manage?",
            "short_title": "MemoryHandle",
            "answers": [
              {
                "answer": "Pinned memory access for external use",
                "right": true
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Stops memory handling",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UnityEngine.Profiling.Memory.Experimental'?",
            "short_title": "Memory.Experimental",
            "answers": [
              {
                "answer": "Advanced memory profiling tools",
                "right": true
              },
              {
                "answer": "Stops profiling",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetBundle.UnloadAllAssetBundles()' optimize?",
            "short_title": "UnloadAllAssetBundles",
            "answers": [
              {
                "answer": "Frees memory from all loaded bundles",
                "right": true
              },
              {
                "answer": "Loads bundles",
                "right": false
              },
              {
                "answer": "Renders bundles",
                "right": false
              },
              {
                "answer": "Stops unloading",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'System.Runtime.CompilerServices.Unsafe.AsRef()'?",
            "short_title": "Unsafe.AsRef",
            "answers": [
              {
                "answer": "Directly references memory without copying",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops references",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NativeSlice<T>' provide in Unity?",
            "short_title": "NativeSlice<T>",
            "answers": [
              {
                "answer": "A view into a subset of unmanaged memory",
                "right": true
              },
              {
                "answer": "Renders slices",
                "right": false
              },
              {
                "answer": "Stops slicing",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'System.GC.TryGetAllocatedBytesForCurrentThread()'?",
            "short_title": "TryGetAllocatedBytes",
            "answers": [
              {
                "answer": "Estimates thread-specific memory usage",
                "right": true
              },
              {
                "answer": "Stops byte tracking",
                "right": false
              },
              {
                "answer": "Renders bytes",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.CleanBundleCache()' optimize?",
            "short_title": "CleanBundleCache",
            "answers": [
              {
                "answer": "Frees disk space from cached bundles",
                "right": true
              },
              {
                "answer": "Loads cache",
                "right": false
              },
              {
                "answer": "Renders cache",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          }
        ],
        "Scene Streaming and Level of Detail (LOD)": [
          {
            "title": "What is the primary goal of scene streaming in Unity?",
            "short_title": "Scene streaming goal",
            "answers": [
              {
                "answer": "Dynamically load/unload scenes for memory efficiency",
                "right": true
              },
              {
                "answer": "Render scenes faster",
                "right": false
              },
              {
                "answer": "Handle physics streaming",
                "right": false
              },
              {
                "answer": "Manage UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.LoadSceneAsync()' with 'LoadSceneMode.Additive' enable?",
            "short_title": "LoadSceneAsync Additive",
            "answers": [
              {
                "answer": "Loads scenes incrementally without unloading others",
                "right": true
              },
              {
                "answer": "Stops scene loading",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'LODGroup' in Unity?",
            "short_title": "LODGroup",
            "answers": [
              {
                "answer": "Manages multiple LOD levels for an object",
                "right": true
              },
              {
                "answer": "Renders LODs",
                "right": false
              },
              {
                "answer": "Stops LOD",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.LoadSceneAsync()' optimize over traditional scene loading?",
            "short_title": "Addressables.LoadSceneAsync",
            "answers": [
              {
                "answer": "Memory usage with asset dependency tracking",
                "right": true
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Stops loading",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'SceneManager.UnloadSceneAsync()' in streaming?",
            "short_title": "UnloadSceneAsync",
            "answers": [
              {
                "answer": "Frees memory for unused scenes dynamically",
                "right": true
              },
              {
                "answer": "Loads scenes",
                "right": false
              },
              {
                "answer": "Renders unloading",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'LODGroup.fadeTransitionWidth' control?",
            "short_title": "fadeTransitionWidth",
            "answers": [
              {
                "answer": "The distance over which LOD levels fade",
                "right": true
              },
              {
                "answer": "Rendering fade",
                "right": false
              },
              {
                "answer": "Stops fading",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Occlusion Culling' in scene optimization?",
            "short_title": "Occlusion Culling",
            "answers": [
              {
                "answer": "Excludes non-visible objects from rendering",
                "right": true
              },
              {
                "answer": "Renders all objects",
                "right": false
              },
              {
                "answer": "Stops culling",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.MoveGameObjectToScene()' enable in streaming?",
            "short_title": "MoveGameObjectToScene",
            "answers": [
              {
                "answer": "Transfers objects between streamed scenes",
                "right": true
              },
              {
                "answer": "Renders objects",
                "right": false
              },
              {
                "answer": "Stops movement",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'AsyncOperation.priority' in scene loading?",
            "short_title": "AsyncOperation.priority",
            "answers": [
              {
                "answer": "Controls loading order for multiple operations",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops priority",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'LODGroup.RecalculateBounds()' do?",
            "short_title": "RecalculateBounds",
            "answers": [
              {
                "answer": "Updates LOD bounds for runtime changes",
                "right": true
              },
              {
                "answer": "Renders bounds",
                "right": false
              },
              {
                "answer": "Stops recalculation",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'OcclusionArea' in Unity?",
            "short_title": "OcclusionArea",
            "answers": [
              {
                "answer": "Defines regions for occlusion culling",
                "right": true
              },
              {
                "answer": "Stops occlusion",
                "right": false
              },
              {
                "answer": "Renders areas",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.CreateScene()' allow in streaming?",
            "short_title": "CreateScene",
            "answers": [
              {
                "answer": "Creates temporary scenes for dynamic content",
                "right": true
              },
              {
                "answer": "Loads permanent scenes",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Stops streaming",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Addressables.GetDownloadSizeAsync()'?",
            "short_title": "GetDownloadSizeAsync",
            "answers": [
              {
                "answer": "Estimates memory needs for streaming assets",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops downloads",
                "right": false
              },
              {
                "answer": "Renders sizes",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'LODGroup.localReferencePoint' define?",
            "short_title": "localReferencePoint",
            "answers": [
              {
                "answer": "The center for LOD distance calculations",
                "right": true
              },
              {
                "answer": "Rendering point",
                "right": false
              },
              {
                "answer": "Physics point",
                "right": false
              },
              {
                "answer": "Animation point",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'OcclusionPortal' in Unity?",
            "short_title": "OcclusionPortal",
            "answers": [
              {
                "answer": "Controls visibility through doorways or openings",
                "right": true
              },
              {
                "answer": "Renders portals",
                "right": false
              },
              {
                "answer": "Stops occlusion",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.sceneLoaded' delegate optimize?",
            "short_title": "sceneLoaded",
            "answers": [
              {
                "answer": "Triggers logic post-streaming completion",
                "right": true
              },
              {
                "answer": "Stops loading",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'LODGroup.ForceLOD()'?",
            "short_title": "ForceLOD",
            "answers": [
              {
                "answer": "Manually sets an LOD level for testing",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops LOD",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.UnloadSceneAsync()' optimize?",
            "short_title": "UnloadSceneAsync",
            "answers": [
              {
                "answer": "Frees memory with dependency cleanup",
                "right": true
              },
              {
                "answer": "Loads scenes",
                "right": false
              },
              {
                "answer": "Renders unloading",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Camera.CalculateFrustumCorners()' in LOD?",
            "short_title": "CalculateFrustumCorners",
            "answers": [
              {
                "answer": "Determines visible area for LOD culling",
                "right": true
              },
              {
                "answer": "Renders corners",
                "right": false
              },
              {
                "answer": "Stops frustum",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.GetSceneByBuildIndex()' enable?",
            "short_title": "GetSceneByBuildIndex",
            "answers": [
              {
                "answer": "Accesses scenes for streaming management",
                "right": true
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Stops scene access",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          }
        ],
        "UI Framework Design and Performance": [
          {
            "title": "What is the core advantage of Unity’s UIElements over traditional Canvas UI?",
            "short_title": "UIElements advantage",
            "answers": [
              {
                "answer": "Retained-mode, performant UI rendering",
                "right": true
              },
              {
                "answer": "Physics-based UI",
                "right": false
              },
              {
                "answer": "Faster rendering only",
                "right": false
              },
              {
                "answer": "Animation focus",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VisualElement' serve as in UIElements?",
            "short_title": "VisualElement",
            "answers": [
              {
                "answer": "Base class for all UI components",
                "right": true
              },
              {
                "answer": "Rendering element",
                "right": false
              },
              {
                "answer": "Physics element",
                "right": false
              },
              {
                "answer": "Animation element",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of ' USS (UIElements Style Sheets)' in Unity?",
            "short_title": "USS",
            "answers": [
              {
                "answer": "Defines reusable styles akin to CSS",
                "right": true
              },
              {
                "answer": "Stops styling",
                "right": false
              },
              {
                "answer": "Renders styles",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UXML' enable in UIElements framework design?",
            "short_title": "UXML",
            "answers": [
              {
                "answer": "Declarative UI layout with XML",
                "right": true
              },
              {
                "answer": "Physics layout",
                "right": false
              },
              {
                "answer": "Rendering XML",
                "right": false
              },
              {
                "answer": "Animation XML",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Canvas.UpdateBatches()' in traditional UI?",
            "short_title": "UpdateBatches",
            "answers": [
              {
                "answer": "Optimizes rendering by reducing draw calls",
                "right": true
              },
              {
                "answer": "Stops batching",
                "right": false
              },
              {
                "answer": "Renders batches",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'StyleSheet' class manage in UIElements?",
            "short_title": "StyleSheet",
            "answers": [
              {
                "answer": "Loads and applies USS styles",
                "right": true
              },
              {
                "answer": "Renders styles",
                "right": false
              },
              {
                "answer": "Stops styling",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'VisualElement.schedule' in UIElements?",
            "short_title": "schedule",
            "answers": [
              {
                "answer": "Schedules tasks for UI updates",
                "right": true
              },
              {
                "answer": "Stops scheduling",
                "right": false
              },
              {
                "answer": "Renders schedules",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CanvasRenderer.SetMesh()' optimize in Canvas UI?",
            "short_title": "SetMesh",
            "answers": [
              {
                "answer": "Customizes UI geometry for performance",
                "right": true
              },
              {
                "answer": "Stops mesh rendering",
                "right": false
              },
              {
                "answer": "Renders physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'VisualElement.RegisterCallback()'?",
            "short_title": "RegisterCallback",
            "answers": [
              {
                "answer": "Handles events with type safety",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops callbacks",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.sortingLayerID' control in Unity?",
            "short_title": "sortingLayerID",
            "answers": [
              {
                "answer": "Render order of UI layers",
                "right": true
              },
              {
                "answer": "Physics layering",
                "right": false
              },
              {
                "answer": "Animation layering",
                "right": false
              },
              {
                "answer": "Stops sorting",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UIElements.RuntimePanel'?",
            "short_title": "RuntimePanel",
            "answers": [
              {
                "answer": "Manages UIElements at runtime",
                "right": true
              },
              {
                "answer": "Renders runtime UI",
                "right": false
              },
              {
                "answer": "Stops panels",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.additionalShaderChannels' enable?",
            "short_title": "additionalShaderChannels",
            "answers": [
              {
                "answer": "Adds custom data to UI shaders",
                "right": true
              },
              {
                "answer": "Stops shaders",
                "right": false
              },
              {
                "answer": "Renders channels",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'VisualElement.styleSheets.Add()'?",
            "short_title": "styleSheets.Add",
            "answers": [
              {
                "answer": "Dynamically applies styles at runtime",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops styling",
                "right": false
              },
              {
                "answer": "Renders styles",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.worldCamera' optimize in World Space UI?",
            "short_title": "worldCamera",
            "answers": [
              {
                "answer": "Ties UI rendering to a specific camera",
                "right": true
              },
              {
                "answer": "Stops camera rendering",
                "right": false
              },
              {
                "answer": "Renders world physics",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UIElements.EventDispatcher'?",
            "short_title": "EventDispatcher",
            "answers": [
              {
                "answer": "Manages event propagation in UIElements",
                "right": true
              },
              {
                "answer": "Renders events",
                "right": false
              },
              {
                "answer": "Stops dispatching",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CanvasRenderer.cullTransparentMesh' optimize?",
            "short_title": "cullTransparentMesh",
            "answers": [
              {
                "answer": "Skips rendering fully transparent UI",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders transparency",
                "right": false
              },
              {
                "answer": "Stops culling",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'VisualElement.worldBound'?",
            "short_title": "worldBound",
            "answers": [
              {
                "answer": "Provides global position for optimization",
                "right": true
              },
              {
                "answer": "Stops bounds",
                "right": false
              },
              {
                "answer": "Renders bounds",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UIElements.IMGUIContainer' bridge?",
            "short_title": "IMGUIContainer",
            "answers": [
              {
                "answer": "Integrates legacy IMGUI with UIElements",
                "right": true
              },
              {
                "answer": "Renders IMGUI",
                "right": false
              },
              {
                "answer": "Stops bridging",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'CanvasUpdateRegistry'?",
            "short_title": "CanvasUpdateRegistry",
            "answers": [
              {
                "answer": "Manages UI update lifecycle",
                "right": true
              },
              {
                "answer": "Stops updates",
                "right": false
              },
              {
                "answer": "Renders updates",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VisualElement.experimental.animation' enable?",
            "short_title": "experimental.animation",
            "answers": [
              {
                "answer": "Advanced animation control in UIElements",
                "right": true
              },
              {
                "answer": "Stops animations",
                "right": false
              },
              {
                "answer": "Renders experimental UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          }
        ],
        "Audio Engine Design and Integration": [
          {
            "title": "What is the core advantage of designing a custom audio engine in Unity?",
            "short_title": "Custom audio engine",
            "answers": [
              {
                "answer": "Tailored performance and feature control",
                "right": true
              },
              {
                "answer": "Rendering audio visuals",
                "right": false
              },
              {
                "answer": "Physics audio",
                "right": false
              },
              {
                "answer": "UI audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.GetCustomCurve()' enable in Unity?",
            "short_title": "GetCustomCurve",
            "answers": [
              {
                "answer": "Retrieves custom animation curves for audio",
                "right": true
              },
              {
                "answer": "Stops curves",
                "right": false
              },
              {
                "answer": "Renders curves",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioMixer.FindMatchingGroups()'?",
            "short_title": "FindMatchingGroups",
            "answers": [
              {
                "answer": "Locates mixer groups by name",
                "right": true
              },
              {
                "answer": "Renders groups",
                "right": false
              },
              {
                "answer": "Stops group finding",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSettings.GetConfiguration()' provide?",
            "short_title": "GetConfiguration",
            "answers": [
              {
                "answer": "Current audio system settings",
                "right": true
              },
              {
                "answer": "Rendering config",
                "right": false
              },
              {
                "answer": "Physics config",
                "right": false
              },
              {
                "answer": "Animation config",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of integrating FMOD with Unity?",
            "short_title": "FMOD integration",
            "answers": [
              {
                "answer": "Advanced audio features and optimization",
                "right": true
              },
              {
                "answer": "Stops audio",
                "right": false
              },
              {
                "answer": "Renders FMOD",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.outputAudioMixerGroup' control?",
            "short_title": "outputAudioMixerGroup",
            "answers": [
              {
                "answer": "Routes audio to a specific mixer group",
                "right": true
              },
              {
                "answer": "Stops output",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSettings.dspTime' at a low level?",
            "short_title": "dspTime",
            "answers": [
              {
                "answer": "Precise timing for audio scheduling",
                "right": true
              },
              {
                "answer": "Rendering time",
                "right": false
              },
              {
                "answer": "Physics time",
                "right": false
              },
              {
                "answer": "Animation time",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioClip.GetData()' enable in Unity?",
            "short_title": "GetData",
            "answers": [
              {
                "answer": "Accesses raw audio samples",
                "right": true
              },
              {
                "answer": "Stops data access",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Wwise' integration in Unity?",
            "short_title": "Wwise integration",
            "answers": [
              {
                "answer": "Complex audio processing and spatialization",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops audio",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioMixer.SetFloat()' with attenuation achieve?",
            "short_title": "SetFloat attenuation",
            "answers": [
              {
                "answer": "Controls volume dynamically",
                "right": true
              },
              {
                "answer": "Renders float values",
                "right": false
              },
              {
                "answer": "Stops attenuation",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSource.spatializePostEffects'?",
            "short_title": "spatializePostEffects",
            "answers": [
              {
                "answer": "Applies 3D effects after processing",
                "right": true
              },
              {
                "answer": "Stops spatialization",
                "right": false
              },
              {
                "answer": "Renders effects",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSettings.SetDSPBufferSize()' optimize?",
            "short_title": "SetDSPBufferSize",
            "answers": [
              {
                "answer": "Audio latency and performance",
                "right": true
              },
              {
                "answer": "Rendering buffer",
                "right": false
              },
              {
                "answer": "Physics buffer",
                "right": false
              },
              {
                "answer": "Animation buffer",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'AudioMixerSnapshot.TransitionTo()'?",
            "short_title": "TransitionTo",
            "answers": [
              {
                "answer": "Smoothly shifts between mixer states",
                "right": true
              },
              {
                "answer": "Stops transitions",
                "right": false
              },
              {
                "answer": "Renders snapshots",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.GetSpectrumData()' enable?",
            "short_title": "GetSpectrumData",
            "answers": [
              {
                "answer": "Real-time audio frequency analysis",
                "right": true
              },
              {
                "answer": "Stops spectrum",
                "right": false
              },
              {
                "answer": "Renders spectrum",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioLowPassFilter.cutoffFrequency'?",
            "short_title": "cutoffFrequency",
            "answers": [
              {
                "answer": "Sets the frequency threshold for filtering",
                "right": true
              },
              {
                "answer": "Renders frequencies",
                "right": false
              },
              {
                "answer": "Stops filtering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSettings.OnAudioConfigurationChanged()' handle?",
            "short_title": "OnAudioConfigurationChanged",
            "answers": [
              {
                "answer": "Reacts to audio system changes",
                "right": true
              },
              {
                "answer": "Stops configuration",
                "right": false
              },
              {
                "answer": "Renders changes",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'AudioSource.PlayScheduled()' at scale?",
            "short_title": "PlayScheduled",
            "answers": [
              {
                "answer": "Precise timing for synchronized audio",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops scheduling",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioClip.Create()' with streaming enable?",
            "short_title": "Create with streaming",
            "answers": [
              {
                "answer": "Streams audio data for memory efficiency",
                "right": true
              },
              {
                "answer": "Stops streaming",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioMixer.GetFloat()' in custom engines?",
            "short_title": "GetFloat",
            "answers": [
              {
                "answer": "Reads runtime mixer parameters",
                "right": true
              },
              {
                "answer": "Renders floats",
                "right": false
              },
              {
                "answer": "Stops parameter reading",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSettings.Reset()' optimize?",
            "short_title": "Reset",
            "answers": [
              {
                "answer": "Restores default audio configuration",
                "right": true
              },
              {
                "answer": "Stops resets",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          }
        ],
        "Advanced AI and Machine Learning Integration": [
          {
            "title": "What is the primary goal of integrating machine learning into Unity AI?",
            "short_title": "ML integration goal",
            "answers": [
              {
                "answer": "Enable adaptive, data-driven behaviors",
                "right": true
              },
              {
                "answer": "Render AI visuals",
                "right": false
              },
              {
                "answer": "Handle physics AI",
                "right": false
              },
              {
                "answer": "Manage UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ML-Agents' provide in Unity?",
            "short_title": "ML-Agents",
            "answers": [
              {
                "answer": "Tools for training and deploying ML models",
                "right": true
              },
              {
                "answer": "Stops AI",
                "right": false
              },
              {
                "answer": "Renders ML",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Agent' class in ML-Agents?",
            "short_title": "Agent class",
            "answers": [
              {
                "answer": "Defines an entity for ML training",
                "right": true
              },
              {
                "answer": "Renders agents",
                "right": false
              },
              {
                "answer": "Stops agents",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BehaviorTree' optimize in advanced AI?",
            "short_title": "BehaviorTree",
            "answers": [
              {
                "answer": "Structured decision-making for complex AI",
                "right": true
              },
              {
                "answer": "Rendering decisions",
                "right": false
              },
              {
                "answer": "Stops behaviors",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Reinforcement Learning' in Unity ML-Agents?",
            "short_title": "Reinforcement Learning",
            "answers": [
              {
                "answer": "Trains agents via rewards and penalties",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders learning",
                "right": false
              },
              {
                "answer": "Stops training",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.SetPath()' enable?",
            "short_title": "SetPath",
            "answers": [
              {
                "answer": "Assigns a custom path to an agent",
                "right": true
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Renders paths",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Observation' in ML-Agents?",
            "short_title": "Observation",
            "answers": [
              {
                "answer": "Provides sensory data to the ML model",
                "right": true
              },
              {
                "answer": "Renders observations",
                "right": false
              },
              {
                "answer": "Stops observations",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'A* Pathfinding' optimize over NavMesh?",
            "short_title": "A* optimization",
            "answers": [
              {
                "answer": "Custom grid-based pathfinding",
                "right": true
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Renders A*",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'DecisionRequester' in ML-Agents?",
            "short_title": "DecisionRequester",
            "answers": [
              {
                "answer": "Controls decision frequency for agents",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops decisions",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BehaviorParameters' configure in ML-Agents?",
            "short_title": "BehaviorParameters",
            "answers": [
              {
                "answer": "Model and behavior settings for agents",
                "right": true
              },
              {
                "answer": "Renders parameters",
                "right": false
              },
              {
                "answer": "Stops behaviors",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NavMeshSurface.BuildNavMesh()'?",
            "short_title": "BuildNavMesh",
            "answers": [
              {
                "answer": "Generates a NavMesh at runtime",
                "right": true
              },
              {
                "answer": "Stops NavMesh",
                "right": false
              },
              {
                "answer": "Renders NavMesh",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RewardFunction' define in ML-Agents?",
            "short_title": "RewardFunction",
            "answers": [
              {
                "answer": "Custom logic for agent rewards",
                "right": true
              },
              {
                "answer": "Renders rewards",
                "right": false
              },
              {
                "answer": "Stops rewards",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Finite State Machine (FSM)' in AI design?",
            "short_title": "FSM advantage",
            "answers": [
              {
                "answer": "Predictable state transitions",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops states",
                "right": false
              },
              {
                "answer": "Renders states",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Academy' manage in ML-Agents?",
            "short_title": "Academy",
            "answers": [
              {
                "answer": "Training environment and agent coordination",
                "right": true
              },
              {
                "answer": "Renders training",
                "right": false
              },
              {
                "answer": "Stops academy",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NavMeshAgent.Warp()' in dynamic AI?",
            "short_title": "Warp",
            "answers": [
              {
                "answer": "Instantly repositions agents",
                "right": true
              },
              {
                "answer": "Stops warping",
                "right": false
              },
              {
                "answer": "Renders warp",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SensorComponent' enable in ML-Agents?",
            "short_title": "SensorComponent",
            "answers": [
              {
                "answer": "Custom observation inputs for agents",
                "right": true
              },
              {
                "answer": "Renders sensors",
                "right": false
              },
              {
                "answer": "Stops sensors",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'GOAP (Goal-Oriented Action Planning)'?",
            "short_title": "GOAP benefit",
            "answers": [
              {
                "answer": "Dynamic planning for goal-driven AI",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops planning",
                "right": false
              },
              {
                "answer": "Renders goals",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.destination' control?",
            "short_title": "destination",
            "answers": [
              {
                "answer": "Target position for pathfinding",
                "right": true
              },
              {
                "answer": "Rendering destination",
                "right": false
              },
              {
                "answer": "Stops movement",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InferenceDevice' in ML-Agents?",
            "short_title": "InferenceDevice",
            "answers": [
              {
                "answer": "Selects CPU or GPU for model inference",
                "right": true
              },
              {
                "answer": "Renders inference",
                "right": false
              },
              {
                "answer": "Stops inference",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BehaviorTreeSelector' optimize in AI?",
            "short_title": "BehaviorTreeSelector",
            "answers": [
              {
                "answer": "Chooses between multiple behaviors",
                "right": true
              },
              {
                "answer": "Stops selectors",
                "right": false
              },
              {
                "answer": "Renders trees",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          }
        ],
        "VFX Graph and Custom Visual Effects": [
          {
            "title": "What is the primary advantage of Unity’s VFX Graph over traditional Particle Systems?",
            "short_title": "VFX Graph advantage",
            "answers": [
              {
                "answer": "GPU-driven, scalable visual effects",
                "right": true
              },
              {
                "answer": "Rendering simplicity",
                "right": false
              },
              {
                "answer": "Physics effects",
                "right": false
              },
              {
                "answer": "UI effects",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VisualEffect' component control in Unity?",
            "short_title": "VisualEffect",
            "answers": [
              {
                "answer": "Runtime execution of VFX Graph effects",
                "right": true
              },
              {
                "answer": "Stops VFX",
                "right": false
              },
              {
                "answer": "Renders physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Expose' nodes in VFX Graph?",
            "short_title": "Expose nodes",
            "answers": [
              {
                "answer": "Allows runtime parameter control",
                "right": true
              },
              {
                "answer": "Renders exposures",
                "right": false
              },
              {
                "answer": "Stops parameters",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Output Particle Quad' node define in VFX Graph?",
            "short_title": "Output Particle Quad",
            "answers": [
              {
                "answer": "Renders particles as textured quads",
                "right": true
              },
              {
                "answer": "Stops particle output",
                "right": false
              },
              {
                "answer": "Renders physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Compute Shader' in custom VFX?",
            "short_title": "Compute Shader",
            "answers": [
              {
                "answer": "Parallel processing for complex effects",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops shaders",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VFXPropertyBinder' enable in Unity?",
            "short_title": "VFXPropertyBinder",
            "answers": [
              {
                "answer": "Binds scene data to VFX parameters",
                "right": true
              },
              {
                "answer": "Renders binders",
                "right": false
              },
              {
                "answer": "Stops binding",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Spawn Context' in VFX Graph?",
            "short_title": "Spawn Context",
            "answers": [
              {
                "answer": "Controls particle emission timing",
                "right": true
              },
              {
                "answer": "Stops spawning",
                "right": false
              },
              {
                "answer": "Renders spawns",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Position Shape' node do in VFX Graph?",
            "short_title": "Position Shape",
            "answers": [
              {
                "answer": "Sets particle spawn positions within a shape",
                "right": true
              },
              {
                "answer": "Renders shapes",
                "right": false
              },
              {
                "answer": "Stops positioning",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'VFXEventAttribute' in Unity?",
            "short_title": "VFXEventAttribute",
            "answers": [
              {
                "answer": "Passes dynamic data to VFX events",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops events",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VisualEffect.SetVector3()' control?",
            "short_title": "SetVector3",
            "answers": [
              {
                "answer": "Sets a Vector3 parameter at runtime",
                "right": true
              },
              {
                "answer": "Renders vectors",
                "right": false
              },
              {
                "answer": "Stops parameters",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Update Context' in VFX Graph?",
            "short_title": "Update Context",
            "answers": [
              {
                "answer": "Updates particle properties per frame",
                "right": true
              },
              {
                "answer": "Stops updates",
                "right": false
              },
              {
                "answer": "Renders updates",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VFXExpressionValues' optimize?",
            "short_title": "VFXExpressionValues",
            "answers": [
              {
                "answer": "Efficient runtime value updates",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops expressions",
                "right": false
              },
              {
                "answer": "Renders values",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Custom VFX Shader' integration?",
            "short_title": "Custom VFX Shader",
            "answers": [
              {
                "answer": "Tailored rendering for unique effects",
                "right": true
              },
              {
                "answer": "Stops shaders",
                "right": false
              },
              {
                "answer": "Renders physics",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VisualEffect.Play()' trigger?",
            "short_title": "Play",
            "answers": [
              {
                "answer": "Starts the VFX Graph effect",
                "right": true
              },
              {
                "answer": "Renders play",
                "right": false
              },
              {
                "answer": "Stops VFX",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Set Lifetime' in VFX Graph?",
            "short_title": "Set Lifetime",
            "answers": [
              {
                "answer": "Controls how long particles persist",
                "right": true
              },
              {
                "answer": "Stops lifetime",
                "right": false
              },
              {
                "answer": "Renders lifetimes",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VFXManager' manage in Unity?",
            "short_title": "VFXManager",
            "answers": [
              {
                "answer": "Global VFX Graph settings and updates",
                "right": true
              },
              {
                "answer": "Renders VFX",
                "right": false
              },
              {
                "answer": "Stops VFX",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'VFX Graph Blackboard'?",
            "short_title": "Blackboard",
            "answers": [
              {
                "answer": "Centralizes parameter management",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops blackboard",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VisualEffect.Reinit()' optimize?",
            "short_title": "Reinit",
            "answers": [
              {
                "answer": "Resets VFX state for reuse",
                "right": true
              },
              {
                "answer": "Renders reinitialization",
                "right": false
              },
              {
                "answer": "Stops VFX",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'VFX Graph Operator Nodes'?",
            "short_title": "Operator Nodes",
            "answers": [
              {
                "answer": "Performs mathematical operations on data",
                "right": true
              },
              {
                "answer": "Stops operations",
                "right": false
              },
              {
                "answer": "Renders operators",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VisualEffect.HasFloat()' check?",
            "short_title": "HasFloat",
            "answers": [
              {
                "answer": "If a float parameter exists in VFX",
                "right": true
              },
              {
                "answer": "Renders floats",
                "right": false
              },
              {
                "answer": "Stops float checks",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          }
        ],
        "Data-Driven Design and Serialization": [
          {
            "title": "What is the core principle of data-driven design in Unity?",
            "short_title": "Data-driven principle",
            "answers": [
              {
                "answer": "Decouple logic from data for flexibility",
                "right": true
              },
              {
                "answer": "Render data",
                "right": false
              },
              {
                "answer": "Handle physics data",
                "right": false
              },
              {
                "answer": "Manage UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject' enable in data-driven design?",
            "short_title": "ScriptableObject",
            "answers": [
              {
                "answer": "Persistent, reusable data assets",
                "right": true
              },
              {
                "answer": "Stops data",
                "right": false
              },
              {
                "answer": "Renders objects",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ISerializationCallbackReceiver' in Unity?",
            "short_title": "ISerializationCallbackReceiver",
            "answers": [
              {
                "answer": "Customizes serialization callbacks",
                "right": true
              },
              {
                "answer": "Stops serialization",
                "right": false
              },
              {
                "answer": "Renders callbacks",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SerializeReference' attribute optimize?",
            "short_title": "SerializeReference",
            "answers": [
              {
                "answer": "Polymorphic field serialization",
                "right": true
              },
              {
                "answer": "Rendering references",
                "right": false
              },
              {
                "answer": "Stops references",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Addressables' in data management?",
            "short_title": "Addressables",
            "answers": [
              {
                "answer": "Dynamic, memory-efficient asset loading",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops loading",
                "right": false
              },
              {
                "answer": "Renders assets",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'JsonUtility.ToJson()' provide?",
            "short_title": "ToJson",
            "answers": [
              {
                "answer": "Serializes objects to JSON strings",
                "right": true
              },
              {
                "answer": "Stops JSON",
                "right": false
              },
              {
                "answer": "Renders JSON",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SerializedObject.Update()'?",
            "short_title": "SerializedObject.Update",
            "answers": [
              {
                "answer": "Syncs serialized data with object state",
                "right": true
              },
              {
                "answer": "Stops updates",
                "right": false
              },
              {
                "answer": "Renders objects",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'OdinSerializer' enhance over Unity’s serialization?",
            "short_title": "OdinSerializer",
            "answers": [
              {
                "answer": "Robust, custom serialization support",
                "right": true
              },
              {
                "answer": "Stops serialization",
                "right": false
              },
              {
                "answer": "Renders serialized data",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'ScriptableObject’ as a data hub'?",
            "short_title": "Data hub",
            "answers": [
              {
                "answer": "Centralizes data for system-wide access",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops data hubs",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetDatabase.ExportPackage()' enable?",
            "short_title": "ExportPackage",
            "answers": [
              {
                "answer": "Packages data-driven assets for sharing",
                "right": true
              },
              {
                "answer": "Stops exporting",
                "right": false
              },
              {
                "answer": "Renders packages",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'BinaryFormatter' in custom serialization?",
            "short_title": "BinaryFormatter",
            "answers": [
              {
                "answer": "Serializes objects to binary format",
                "right": true
              },
              {
                "answer": "Renders binary",
                "right": false
              },
              {
                "answer": "Stops binary",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SerializedProperty.Copy()' achieve?",
            "short_title": "SerializedProperty.Copy",
            "answers": [
              {
                "answer": "Duplicates serialized data for iteration",
                "right": true
              },
              {
                "answer": "Stops copying",
                "right": false
              },
              {
                "answer": "Renders properties",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'protobuf-net' in Unity?",
            "short_title": "protobuf-net",
            "answers": [
              {
                "answer": "Efficient, cross-platform serialization",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops serialization",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorPrefs.SetString()' store?",
            "short_title": "SetString",
            "answers": [
              {
                "answer": "Persistent data-driven settings",
                "right": true
              },
              {
                "answer": "Renders strings",
                "right": false
              },
              {
                "answer": "Stops storage",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AssetDatabase.TryGetGUIDAndLocalFileIdentifier()'?",
            "short_title": "TryGetGUIDAndLocalFileIdentifier",
            "answers": [
              {
                "answer": "Tracks asset identity for serialization",
                "right": true
              },
              {
                "answer": "Stops GUID tracking",
                "right": false
              },
              {
                "answer": "Renders GUIDs",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject’ with events' enable?",
            "short_title": "Events",
            "answers": [
              {
                "answer": "Data-driven event communication",
                "right": true
              },
              {
                "answer": "Stops events",
                "right": false
              },
              {
                "answer": "Renders events",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Json.NET' over JsonUtility?",
            "short_title": "Json.NET",
            "answers": [
              {
                "answer": "Advanced serialization features",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops JSON",
                "right": false
              },
              {
                "answer": "Renders JSON",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SerializedObject.ApplyModifiedProperties()' do?",
            "short_title": "ApplyModifiedProperties",
            "answers": [
              {
                "answer": "Commits serialized changes to the object",
                "right": true
              },
              {
                "answer": "Stops modifications",
                "right": false
              },
              {
                "answer": "Renders properties",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Versioned Data' in data-driven design?",
            "short_title": "Versioned Data",
            "answers": [
              {
                "answer": "Ensures compatibility across updates",
                "right": true
              },
              {
                "answer": "Renders versions",
                "right": false
              },
              {
                "answer": "Stops versioning",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetDatabase.SaveAssetIfDirty()' optimize?",
            "short_title": "SaveAssetIfDirty",
            "answers": [
              {
                "answer": "Saves only modified data-driven assets",
                "right": true
              },
              {
                "answer": "Stops saving",
                "right": false
              },
              {
                "answer": "Renders assets",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          }
        ],
        "Build Automation and CI/CD Integration": [
          {
            "title": "What is the primary goal of build automation in Unity?",
            "short_title": "Build automation goal",
            "answers": [
              {
                "answer": "Streamline repetitive build tasks",
                "right": true
              },
              {
                "answer": "Render builds",
                "right": false
              },
              {
                "answer": "Handle physics builds",
                "right": false
              },
              {
                "answer": "Manage UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BuildPipeline.BuildPlayer()' enable in automation?",
            "short_title": "BuildPlayer",
            "answers": [
              {
                "answer": "Programmatic player builds",
                "right": true
              },
              {
                "answer": "Stops builds",
                "right": false
              },
              {
                "answer": "Renders players",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Unity Cloud Build' in CI/CD?",
            "short_title": "Unity Cloud Build",
            "answers": [
              {
                "answer": "Automated builds in the cloud",
                "right": true
              },
              {
                "answer": "Stops cloud builds",
                "right": false
              },
              {
                "answer": "Renders builds",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorBuildSettings.scenes' configure in automation?",
            "short_title": "scenes",
            "answers": [
              {
                "answer": "Scenes included in automated builds",
                "right": true
              },
              {
                "answer": "Rendering scenes",
                "right": false
              },
              {
                "answer": "Stops scenes",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'CommandLine.BuildPlayer()' in CI/CD?",
            "short_title": "CommandLine.BuildPlayer",
            "answers": [
              {
                "answer": "Scripted builds via command line",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops command line",
                "right": false
              },
              {
                "answer": "Renders builds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BuildOptions.AcceptExternalModificationsToPlayer' do?",
            "short_title": "AcceptExternalModifications",
            "answers": [
              {
                "answer": "Preserves external build changes",
                "right": true
              },
              {
                "answer": "Stops modifications",
                "right": false
              },
              {
                "answer": "Renders modifications",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Jenkins' in Unity CI/CD?",
            "short_title": "Jenkins",
            "answers": [
              {
                "answer": "Orchestrates automated build pipelines",
                "right": true
              },
              {
                "answer": "Stops CI/CD",
                "right": false
              },
              {
                "answer": "Renders Jenkins",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerSettings.SetScriptingDefineSymbolsForGroup()' enable?",
            "short_title": "SetScriptingDefineSymbols",
            "answers": [
              {
                "answer": "Dynamic defines for build variants",
                "right": true
              },
              {
                "answer": "Stops defines",
                "right": false
              },
              {
                "answer": "Renders symbols",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'GitHub Actions' with Unity?",
            "short_title": "GitHub Actions",
            "answers": [
              {
                "answer": "Integrated CI/CD with version control",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops actions",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BuildPipeline.BuildAssetBundles()' automate?",
            "short_title": "BuildAssetBundles",
            "answers": [
              {
                "answer": "Asset bundle creation for deployment",
                "right": true
              },
              {
                "answer": "Stops bundles",
                "right": false
              },
              {
                "answer": "Renders bundles",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'BuildReport' in automated builds?",
            "short_title": "BuildReport",
            "answers": [
              {
                "answer": "Provides build success/failure details",
                "right": true
              },
              {
                "answer": "Stops reports",
                "right": false
              },
              {
                "answer": "Renders reports",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorUserBuildSettings.SwitchActiveBuildTarget()' do?",
            "short_title": "SwitchActiveBuildTarget",
            "answers": [
              {
                "answer": "Changes the build platform programmatically",
                "right": true
              },
              {
                "answer": "Renders targets",
                "right": false
              },
              {
                "answer": "Stops switching",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'BuildOptions.ShowBuiltPlayer'?",
            "short_title": "ShowBuiltPlayer",
            "answers": [
              {
                "answer": "Displays the build output location",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops showing",
                "right": false
              },
              {
                "answer": "Renders builds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.BuildContent()' enable in CI/CD?",
            "short_title": "BuildContent",
            "answers": [
              {
                "answer": "Automates Addressable asset builds",
                "right": true
              },
              {
                "answer": "Stops content",
                "right": false
              },
              {
                "answer": "Renders content",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'BuildTargetDiscovery' in Unity?",
            "short_title": "BuildTargetDiscovery",
            "answers": [
              {
                "answer": "Detects supported build platforms",
                "right": true
              },
              {
                "answer": "Renders targets",
                "right": false
              },
              {
                "answer": "Stops discovery",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BuildPipeline.IsBuildingPlayer()' check?",
            "short_title": "IsBuildingPlayer",
            "answers": [
              {
                "answer": "If a build is currently in progress",
                "right": true
              },
              {
                "answer": "Stops building",
                "right": false
              },
              {
                "answer": "Renders build status",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Unity Test Framework' in CI/CD?",
            "short_title": "Unity Test Framework",
            "answers": [
              {
                "answer": "Automated testing within builds",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops tests",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerSettings.SetAdditionalIl2CppArgs()' do?",
            "short_title": "SetAdditionalIl2CppArgs",
            "answers": [
              {
                "answer": "Customizes IL2CPP build arguments",
                "right": true
              },
              {
                "answer": "Stops IL2CPP",
                "right": false
              },
              {
                "answer": "Renders IL2CPP",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'BuildOptions.CleanBuildCache'?",
            "short_title": "CleanBuildCache",
            "answers": [
              {
                "answer": "Clears build cache for fresh builds",
                "right": true
              },
              {
                "answer": "Renders cache",
                "right": false
              },
              {
                "answer": "Stops cleaning",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'BuildPipeline.GetBuildTargetName()' provide?",
            "short_title": "GetBuildTargetName",
            "answers": [
              {
                "answer": "Human-readable name of the build target",
                "right": true
              },
              {
                "answer": "Stops names",
                "right": false
              },
              {
                "answer": "Renders targets",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          }
        ],
        "Unity Engine Internals and Extension": [
          {
            "title": "What is the primary benefit of understanding Unity engine internals?",
            "short_title": "Internals benefit",
            "answers": [
              {
                "answer": "Custom optimization and extension",
                "right": true
              },
              {
                "answer": "Rendering visuals",
                "right": false
              },
              {
                "answer": "Physics handling",
                "right": false
              },
              {
                "answer": "UI management",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngine.LowLevel' namespace provide?",
            "short_title": "LowLevel namespace",
            "answers": [
              {
                "answer": "Access to Unity’s low-level systems",
                "right": true
              },
              {
                "answer": "Stops low-level access",
                "right": false
              },
              {
                "answer": "Renders systems",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Native Plugin' in Unity?",
            "short_title": "Native Plugin",
            "answers": [
              {
                "answer": "Extends Unity with C/C++ code",
                "right": true
              },
              {
                "answer": "Renders plugins",
                "right": false
              },
              {
                "answer": "Stops plugins",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'DllImport' attribute enable in Unity?",
            "short_title": "DllImport",
            "answers": [
              {
                "answer": "Calls native functions from C#",
                "right": true
              },
              {
                "answer": "Stops imports",
                "right": false
              },
              {
                "answer": "Renders DLLs",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'UnityEngine.Jobs' system?",
            "short_title": "Jobs system",
            "answers": [
              {
                "answer": "Multithreaded task execution",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops jobs",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerLoop' control in Unity internals?",
            "short_title": "PlayerLoop",
            "answers": [
              {
                "answer": "Customizes the main update loop",
                "right": true
              },
              {
                "answer": "Renders loops",
                "right": false
              },
              {
                "answer": "Stops loops",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UnityEngine.Profiling.Profiler'?",
            "short_title": "Profiler",
            "answers": [
              {
                "answer": "Low-level performance monitoring",
                "right": true
              },
              {
                "answer": "Stops profiling",
                "right": false
              },
              {
                "answer": "Renders profiles",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngineInternal' namespace expose?",
            "short_title": "UnityEngineInternal",
            "answers": [
              {
                "answer": "Internal Unity APIs for advanced use",
                "right": true
              },
              {
                "answer": "Rendering internals",
                "right": false
              },
              {
                "answer": "Stops internals",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'NativeArray<T>' in engine extensions?",
            "short_title": "NativeArray<T>",
            "answers": [
              {
                "answer": "Unmanaged memory for native plugins",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops arrays",
                "right": false
              },
              {
                "answer": "Renders arrays",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngine.LowLevel.PlayerLoopSystem' customize?",
            "short_title": "PlayerLoopSystem",
            "answers": [
              {
                "answer": "Individual update systems in the loop",
                "right": true
              },
              {
                "answer": "Stops loop systems",
                "right": false
              },
              {
                "answer": "Renders loops",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UnityEngine.Scripting.GarbageCollector'?",
            "short_title": "GarbageCollector",
            "answers": [
              {
                "answer": "Controls GC modes and behavior",
                "right": true
              },
              {
                "answer": "Renders garbage",
                "right": false
              },
              {
                "answer": "Stops GC",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngine.Jobs.IJobParallelFor' optimize?",
            "short_title": "IJobParallelFor",
            "answers": [
              {
                "answer": "Parallel processing of data arrays",
                "right": true
              },
              {
                "answer": "Stops jobs",
                "right": false
              },
              {
                "answer": "Renders jobs",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Marshal.StructureToPtr()' in native extensions?",
            "short_title": "StructureToPtr",
            "answers": [
              {
                "answer": "Converts structs to native memory",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops structs",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngine.LowLevel.UnityRegisterPlayerLoopCallback()' do?",
            "short_title": "UnityRegisterPlayerLoopCallback",
            "answers": [
              {
                "answer": "Adds custom callbacks to the player loop",
                "right": true
              },
              {
                "answer": "Renders callbacks",
                "right": false
              },
              {
                "answer": "Stops callbacks",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UnityEngine.Scripting.APIUpdating'?",
            "short_title": "APIUpdating",
            "answers": [
              {
                "answer": "Handles deprecated API migrations",
                "right": true
              },
              {
                "answer": "Stops API updates",
                "right": false
              },
              {
                "answer": "Renders APIs",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngine.LowLevel.UnityInitializeOnStartup()' enable?",
            "short_title": "UnityInitializeOnStartup",
            "answers": [
              {
                "answer": "Custom initialization at engine startup",
                "right": true
              },
              {
                "answer": "Stops initialization",
                "right": false
              },
              {
                "answer": "Renders startup",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Unity.Collections.LowLevel.Unsafe'?",
            "short_title": "Unsafe",
            "answers": [
              {
                "answer": "Direct memory access for optimization",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops unsafe code",
                "right": false
              },
              {
                "answer": "Renders memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngine.Profiling.CustomSampler' provide?",
            "short_title": "CustomSampler",
            "answers": [
              {
                "answer": "Custom performance profiling metrics",
                "right": true
              },
              {
                "answer": "Renders samplers",
                "right": false
              },
              {
                "answer": "Stops profiling",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UnityEngine.LowLevel.UnityPlayerLoop()'?",
            "short_title": "UnityPlayerLoop",
            "answers": [
              {
                "answer": "Initializes the default player loop",
                "right": true
              },
              {
                "answer": "Stops loops",
                "right": false
              },
              {
                "answer": "Renders loops",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngine.Scripting.AlwaysLinkAssembly()' ensure?",
            "short_title": "AlwaysLinkAssembly",
            "answers": [
              {
                "answer": "Forces assembly inclusion in builds",
                "right": true
              },
              {
                "answer": "Stops linking",
                "right": false
              },
              {
                "answer": "Renders assemblies",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          }
        ]
      }
    }
  ]
}
    
