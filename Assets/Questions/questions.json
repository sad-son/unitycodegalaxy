{
  "quizzes": [
    {
      "rank": "junior",
      "subjects": {
        "Unity Basics": [
          {
            "title": "What is the main panel used to manage objects in a scene?",
            "short_title": "Main panel for managing objects",
            "answers": [
              {
                "answer": "Console",
                "right": false
              },
              {
                "answer": "Inspector",
                "right": false
              },
              {
                "answer": "Hierarchy",
                "right": true
              },
              {
                "answer": "Project",
                "right": false
              }
            ]
          },
          {
            "title": "What component is responsible for rendering a 3D object in Unity?",
            "short_title": "Component for rendering 3D objects",
            "answers": [
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": true
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main panel used to manage objects in a scene?",
            "short_title": "Main panel for managing objects",
            "answers": [
              {
                "answer": "Console",
                "right": false
              },
              {
                "answer": "Inspector",
                "right": false
              },
              {
                "answer": "Hierarchy",
                "right": true
              },
              {
                "answer": "Project",
                "right": false
              }
            ]
          },
          {
            "title": "Which component is required to make a GameObject respond to physics?",
            "short_title": "Physics component",
            "answers": [
              {
                "answer": "Transform",
                "right": false
              },
              {
                "answer": "Rigidbody",
                "right": true
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity panel shows assets like textures, models, and scripts?",
            "short_title": "Panel for assets",
            "answers": [
              {
                "answer": "Hierarchy",
                "right": false
              },
              {
                "answer": "Scene",
                "right": false
              },
              {
                "answer": "Project",
                "right": true
              },
              {
                "answer": "Inspector",
                "right": false
              }
            ]
          },
          {
            "title": "What file format does Unity use for storing scenes?",
            "short_title": "Scene file format",
            "answers": [
              {
                "answer": ".unityscene",
                "right": false
              },
              {
                "answer": ".scene",
                "right": false
              },
              {
                "answer": ".unity",
                "right": true
              },
              {
                "answer": ".level",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Update()' function do in Unity?",
            "short_title": "Purpose of Update()",
            "answers": [
              {
                "answer": "Runs once at the start of the game",
                "right": false
              },
              {
                "answer": "Runs every frame",
                "right": true
              },
              {
                "answer": "Runs when a collision occurs",
                "right": false
              },
              {
                "answer": "Runs when the game object is destroyed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Transform' component?",
            "short_title": "Transform component",
            "answers": [
              {
                "answer": "To handle physics interactions",
                "right": false
              },
              {
                "answer": "To define the position, rotation, and scale of a GameObject",
                "right": true
              },
              {
                "answer": "To render 3D objects",
                "right": false
              },
              {
                "answer": "To manage animations",
                "right": false
              }
            ]
          },
          {
            "title": "Which panel is used to view and edit the properties of a selected GameObject?",
            "short_title": "Panel for editing properties",
            "answers": [
              {
                "answer": "Hierarchy",
                "right": false
              },
              {
                "answer": "Project",
                "right": false
              },
              {
                "answer": "Inspector",
                "right": true
              },
              {
                "answer": "Console",
                "right": false
              }
            ]
          }
        ],
        "C#": [
          {
            "title": "What keyword is used to declare a variable in C#?",
            "short_title": "Keyword for variable declaration",
            "answers": [
              {
                "answer": "var",
                "right": true
              },
              {
                "answer": "let",
                "right": false
              },
              {
                "answer": "dim",
                "right": false
              },
              {
                "answer": "declare",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default access modifier for class members in C#?",
            "short_title": "Default access modifier",
            "answers": [
              {
                "answer": "public",
                "right": false
              },
              {
                "answer": "private",
                "right": true
              },
              {
                "answer": "protected",
                "right": false
              },
              {
                "answer": "internal",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'using' statement in C#?",
            "short_title": "Purpose of 'using' statement",
            "answers": [
              {
                "answer": "To declare a namespace",
                "right": false
              },
              {
                "answer": "To manage resources and ensure disposal",
                "right": true
              },
              {
                "answer": "To import external libraries",
                "right": false
              },
              {
                "answer": "To define a function scope",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to prevent a method from being overridden?",
            "short_title": "Keyword to prevent method override",
            "answers": [
              {
                "answer": "static",
                "right": false
              },
              {
                "answer": "sealed",
                "right": true
              },
              {
                "answer": "final",
                "right": false
              },
              {
                "answer": "virtual",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'int' data type represent in C#?",
            "short_title": "int data type",
            "answers": [
              {
                "answer": "A 32-bit integer",
                "right": true
              },
              {
                "answer": "A floating-point number",
                "right": false
              },
              {
                "answer": "A text string",
                "right": false
              },
              {
                "answer": "A boolean value",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'if' statement in C#?",
            "short_title": "Purpose of 'if'",
            "answers": [
              {
                "answer": "To execute code based on a condition",
                "right": true
              },
              {
                "answer": "To define a loop",
                "right": false
              },
              {
                "answer": "To declare a class",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'bool' type store in C#?",
            "short_title": "bool type",
            "answers": [
              {
                "answer": "True or false values",
                "right": true
              },
              {
                "answer": "Numbers",
                "right": false
              },
              {
                "answer": "Text",
                "right": false
              },
              {
                "answer": "Objects",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to create a loop that runs a set number of times?",
            "short_title": "Loop keyword",
            "answers": [
              {
                "answer": "for",
                "right": true
              },
              {
                "answer": "while",
                "right": false
              },
              {
                "answer": "do",
                "right": false
              },
              {
                "answer": "loop",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'string' type represent in C#?",
            "short_title": "string type",
            "answers": [
              {
                "answer": "A sequence of characters",
                "right": true
              },
              {
                "answer": "A number",
                "right": false
              },
              {
                "answer": "A true/false value",
                "right": false
              },
              {
                "answer": "An array of integers",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'return' keyword in C#?",
            "short_title": "Purpose of 'return'",
            "answers": [
              {
                "answer": "To exit a method and provide a value",
                "right": true
              },
              {
                "answer": "To start a loop",
                "right": false
              },
              {
                "answer": "To declare a variable",
                "right": false
              },
              {
                "answer": "To handle errors",
                "right": false
              }
            ]
          },
          {
            "title": "What does the '+' operator do with strings in C#?",
            "short_title": "String '+' operator",
            "answers": [
              {
                "answer": "Concatenates two strings",
                "right": true
              },
              {
                "answer": "Adds numbers",
                "right": false
              },
              {
                "answer": "Compares strings",
                "right": false
              },
              {
                "answer": "Splits a string",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to define a class in C#?",
            "short_title": "Class keyword",
            "answers": [
              {
                "answer": "class",
                "right": true
              },
              {
                "answer": "struct",
                "right": false
              },
              {
                "answer": "object",
                "right": false
              },
              {
                "answer": "type",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'float' type represent in C#?",
            "short_title": "float type",
            "answers": [
              {
                "answer": "A single-precision floating-point number",
                "right": true
              },
              {
                "answer": "An integer",
                "right": false
              },
              {
                "answer": "A text string",
                "right": false
              },
              {
                "answer": "A boolean",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'new' keyword in C#?",
            "short_title": "Purpose of 'new'",
            "answers": [
              {
                "answer": "To create an instance of an object",
                "right": true
              },
              {
                "answer": "To declare a variable",
                "right": false
              },
              {
                "answer": "To end a loop",
                "right": false
              },
              {
                "answer": "To hide a method",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'void' keyword indicate in a method?",
            "short_title": "void keyword",
            "answers": [
              {
                "answer": "The method does not return a value",
                "right": true
              },
              {
                "answer": "The method returns an integer",
                "right": false
              },
              {
                "answer": "The method is private",
                "right": false
              },
              {
                "answer": "The method loops forever",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'else' statement in C#?",
            "short_title": "Purpose of 'else'",
            "answers": [
              {
                "answer": "To execute code when an 'if' condition is false",
                "right": true
              },
              {
                "answer": "To start a loop",
                "right": false
              },
              {
                "answer": "To declare a variable",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              }
            ]
          },
          {
            "title": "What does the '==' operator do in C#?",
            "short_title": "'==' operator",
            "answers": [
              {
                "answer": "Compares two values for equality",
                "right": true
              },
              {
                "answer": "Assigns a value",
                "right": false
              },
              {
                "answer": "Adds two numbers",
                "right": false
              },
              {
                "answer": "Concatenates strings",
                "right": false
              }
            ]
          },
          {
            "title": "What keyword is used to inherit from a class in C#?",
            "short_title": "Inheritance keyword",
            "answers": [
              {
                "answer": ":",
                "right": true
              },
              {
                "answer": "extends",
                "right": false
              },
              {
                "answer": "inherit",
                "right": false
              },
              {
                "answer": "base",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'null' keyword represent in C#?",
            "short_title": "'null' keyword",
            "answers": [
              {
                "answer": "No value or object reference",
                "right": true
              },
              {
                "answer": "A zero value",
                "right": false
              },
              {
                "answer": "An empty string",
                "right": false
              },
              {
                "answer": "A false value",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'break' keyword in C#?",
            "short_title": "Purpose of 'break'",
            "answers": [
              {
                "answer": "To exit a loop or switch statement",
                "right": true
              },
              {
                "answer": "To start a loop",
                "right": false
              },
              {
                "answer": "To declare a variable",
                "right": false
              },
              {
                "answer": "To return a value",
                "right": false
              }
            ]
          }
        ],
        "GameObjects and Components": [
          {
            "title": "What Unity component controls an object's position, rotation, and scale?",
            "short_title": "Component for position, rotation, and scale",
            "answers": [
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Transform",
                "right": true
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              }
            ]
          },
          {
            "title": "How do you destroy a GameObject in Unity?",
            "short_title": "Destroying GameObjects",
            "answers": [
              {
                "answer": "GameObject.Remove();",
                "right": false
              },
              {
                "answer": "Destroy(gameObject);",
                "right": true
              },
              {
                "answer": "Object.Delete(gameObject);",
                "right": false
              },
              {
                "answer": "gameObject.Destroy();",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of a Collider in Unity?",
            "short_title": "Purpose of Collider",
            "answers": [
              {
                "answer": "To make an object move",
                "right": false
              },
              {
                "answer": "To detect and react to physics interactions",
                "right": true
              },
              {
                "answer": "To apply materials",
                "right": false
              },
              {
                "answer": "To display textures",
                "right": false
              }
            ]
          },
          {
            "title": "How do you destroy a GameObject in Unity?",
            "short_title": "Destroying GameObjects",
            "answers": [
              {
                "answer": "GameObject.Remove();",
                "right": false
              },
              {
                "answer": "Destroy(gameObject);",
                "right": true
              },
              {
                "answer": "Object.Delete(gameObject);",
                "right": false
              },
              {
                "answer": "gameObject.Destroy();",
                "right": false
              }
            ]
          }
        ],
        "Physics in Unity": [
          {
            "title": "What does 'isTrigger' do in a Collider?",
            "short_title": "Function of isTrigger",
            "answers": [
              {
                "answer": "Makes the object invisible",
                "right": false
              },
              {
                "answer": "Allows objects to pass through without physical collision",
                "right": true
              },
              {
                "answer": "Changes the object's material",
                "right": false
              },
              {
                "answer": "Stops the object from moving",
                "right": false
              }
            ]
          },
          {
            "title": "What method is used to apply force to a Rigidbody?",
            "short_title": "Applying force to Rigidbody",
            "answers": [
              {
                "answer": "AddVelocity()",
                "right": false
              },
              {
                "answer": "ApplyForce()",
                "right": false
              },
              {
                "answer": "Rigidbody.Move()",
                "right": false
              },
              {
                "answer": "AddForce()",
                "right": true
              }
            ]
          },
          {
            "title": "What function detects collisions in Unity?",
            "short_title": "Collision detection in Unity",
            "answers": [
              {
                "answer": "OnTriggerEnter()",
                "right": false
              },
              {
                "answer": "OnCollisionEnter()",
                "right": false
              },
              {
                "answer": "Both A and B",
                "right": true
              },
              {
                "answer": "Update()",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between FixedUpdate() and Update()?",
            "short_title": "FixedUpdate vs Update",
            "answers": [
              {
                "answer": "Update() is used for physics calculations",
                "right": false
              },
              {
                "answer": "FixedUpdate() runs at a fixed time step",
                "right": true
              },
              {
                "answer": "Update() runs before Start()",
                "right": false
              },
              {
                "answer": "FixedUpdate() is only called once per game session",
                "right": false
              }
            ]
          },
          {
            "title": "Which component is required for an object to be affected by physics?",
            "short_title": "Physics component requirement",
            "answers": [
              {
                "answer": "Mesh Renderer",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Rigidbody",
                "right": true
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What is the function of Time.deltaTime?",
            "short_title": "Function of Time.deltaTime",
            "answers": [
              {
                "answer": "Gives the time elapsed since the last frame",
                "right": true
              },
              {
                "answer": "Returns the time since the game started",
                "right": false
              },
              {
                "answer": "Pauses the game for a given duration",
                "right": false
              },
              {
                "answer": "Forces a physics update",
                "right": false
              }
            ]
          },
          {
            "title": "What component is required to enable physics on a GameObject in Unity?",
            "short_title": "Physics component",
            "answers": [
              {
                "answer": "Rigidbody",
                "right": true
              },
              {
                "answer": "Transform",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              },
              {
                "answer": "Animator",
                "right": false
              }
            ]
          },
          {
            "title": "What does a Collider do in Unity?",
            "short_title": "Collider purpose",
            "answers": [
              {
                "answer": "Defines a shape for physics collisions",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Renders graphics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you add a Rigidbody to a GameObject?",
            "short_title": "Rigidbody effect",
            "answers": [
              {
                "answer": "It becomes affected by gravity and physics",
                "right": true
              },
              {
                "answer": "It becomes invisible",
                "right": false
              },
              {
                "answer": "It stops moving",
                "right": false
              },
              {
                "answer": "It plays a sound",
                "right": false
              }
            ]
          },
          {
            "title": "What method is called when two objects collide in Unity?",
            "short_title": "Collision method",
            "answers": [
              {
                "answer": "OnCollisionEnter",
                "right": true
              },
              {
                "answer": "OnTriggerEnter",
                "right": false
              },
              {
                "answer": "Update",
                "right": false
              },
              {
                "answer": "Start",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'isTrigger' property on a Collider?",
            "short_title": "'isTrigger' purpose",
            "answers": [
              {
                "answer": "Allows objects to pass through and triggers events",
                "right": true
              },
              {
                "answer": "Makes the object solid",
                "right": false
              },
              {
                "answer": "Disables physics",
                "right": false
              },
              {
                "answer": "Increases gravity",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.velocity' control in Unity?",
            "short_title": "Rigidbody.velocity",
            "answers": [
              {
                "answer": "The speed and direction of an object",
                "right": true
              },
              {
                "answer": "The object’s rotation",
                "right": false
              },
              {
                "answer": "The object’s scale",
                "right": false
              },
              {
                "answer": "The object’s position",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity method is used to apply a force to a Rigidbody?",
            "short_title": "Force method",
            "answers": [
              {
                "answer": "AddForce",
                "right": true
              },
              {
                "answer": "MovePosition",
                "right": false
              },
              {
                "answer": "SetVelocity",
                "right": false
              },
              {
                "answer": "ApplyTorque",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'FixedUpdate' method do in Unity?",
            "short_title": "FixedUpdate purpose",
            "answers": [
              {
                "answer": "Updates physics at a fixed time step",
                "right": true
              },
              {
                "answer": "Updates every frame",
                "right": false
              },
              {
                "answer": "Initializes an object",
                "right": false
              },
              {
                "answer": "Handles collisions",
                "right": false
              }
            ]
          },
          {
            "title": "What type of Collider is a sphere in Unity?",
            "short_title": "Sphere Collider",
            "answers": [
              {
                "answer": "SphereCollider",
                "right": true
              },
              {
                "answer": "BoxCollider",
                "right": false
              },
              {
                "answer": "CapsuleCollider",
                "right": false
              },
              {
                "answer": "MeshCollider",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.mass' affect in Unity?",
            "short_title": "Rigidbody.mass",
            "answers": [
              {
                "answer": "How much force impacts the object’s movement",
                "right": true
              },
              {
                "answer": "The object’s size",
                "right": false
              },
              {
                "answer": "The object’s color",
                "right": false
              },
              {
                "answer": "The object’s rotation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What happens if two Colliders overlap with 'isTrigger' enabled?",
            "short_title": "Trigger overlap",
            "answers": [
              {
                "answer": "OnTriggerEnter is called",
                "right": true
              },
              {
                "answer": "OnCollisionEnter is called",
                "right": false
              },
              {
                "answer": "The objects bounce",
                "right": false
              },
              {
                "answer": "Nothing happens",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.gravity' control in Unity?",
            "short_title": "Physics.gravity",
            "answers": [
              {
                "answer": "The global gravity force affecting Rigidbodies",
                "right": true
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The rendering quality",
                "right": false
              },
              {
                "answer": "The animation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of a BoxCollider in Unity?",
            "short_title": "BoxCollider purpose",
            "answers": [
              {
                "answer": "Defines a rectangular collision shape",
                "right": true
              },
              {
                "answer": "Rotates an object",
                "right": false
              },
              {
                "answer": "Plays a sound",
                "right": false
              },
              {
                "answer": "Renders a texture",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.useGravity' do in Unity?",
            "short_title": "Rigidbody.useGravity",
            "answers": [
              {
                "answer": "Enables or disables gravity on an object",
                "right": true
              },
              {
                "answer": "Changes the object’s mass",
                "right": false
              },
              {
                "answer": "Stops all movement",
                "right": false
              },
              {
                "answer": "Triggers an event",
                "right": false
              }
            ]
          },
          {
            "title": "What method detects when an object enters a trigger zone?",
            "short_title": "Trigger detection",
            "answers": [
              {
                "answer": "OnTriggerEnter",
                "right": true
              },
              {
                "answer": "OnCollisionEnter",
                "right": false
              },
              {
                "answer": "Update",
                "right": false
              },
              {
                "answer": "FixedUpdate",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.AddTorque()' do in Unity?",
            "short_title": "AddTorque purpose",
            "answers": [
              {
                "answer": "Applies rotational force to an object",
                "right": true
              },
              {
                "answer": "Moves an object linearly",
                "right": false
              },
              {
                "answer": "Stops an object",
                "right": false
              },
              {
                "answer": "Changes the object’s scale",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default gravity direction in Unity?",
            "short_title": "Default gravity",
            "answers": [
              {
                "answer": "Downward along the Y-axis",
                "right": true
              },
              {
                "answer": "Upward along the Y-axis",
                "right": false
              },
              {
                "answer": "Along the X-axis",
                "right": false
              },
              {
                "answer": "Along the Z-axis",
                "right": false
              }
            ]
          },
          {
            "title": "What does a CapsuleCollider do in Unity?",
            "short_title": "CapsuleCollider purpose",
            "answers": [
              {
                "answer": "Defines a capsule-shaped collision area",
                "right": true
              },
              {
                "answer": "Rotates an object",
                "right": false
              },
              {
                "answer": "Renders a mesh",
                "right": false
              },
              {
                "answer": "Plays audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.isKinematic' do in Unity?",
            "short_title": "isKinematic purpose",
            "answers": [
              {
                "answer": "Makes the Rigidbody controlled by code, not physics",
                "right": true
              },
              {
                "answer": "Increases gravity",
                "right": false
              },
              {
                "answer": "Disables collisions",
                "right": false
              },
              {
                "answer": "Stops rotation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.IgnoreCollision()' in Unity?",
            "short_title": "IgnoreCollision purpose",
            "answers": [
              {
                "answer": "Prevents two specific Colliders from interacting",
                "right": true
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Triggers an event",
                "right": false
              },
              {
                "answer": "Changes gravity",
                "right": false
              }
            ]
          }
        ],
        "UI and Interaction": [
          {
            "title": "What Unity component is used to display text on the screen?",
            "short_title": "Displaying text in Unity",
            "answers": [
              {
                "answer": "UI.Label",
                "right": false
              },
              {
                "answer": "TextMesh",
                "right": false
              },
              {
                "answer": "TMPro.Text",
                "right": false
              },
              {
                "answer": "Both B and C",
                "right": true
              }
            ]
          },
          {
            "title": "What function is used to detect mouse clicks in Unity?",
            "short_title": "Detecting mouse clicks",
            "answers": [
              {
                "answer": "MouseClick()",
                "right": false
              },
              {
                "answer": "Input.GetMouseButtonDown()",
                "right": true
              },
              {
                "answer": "CheckClick()",
                "right": false
              },
              {
                "answer": "MouseEvent()",
                "right": false
              }
            ]
          },
          {
            "title": "What component is used to play sound in Unity?",
            "short_title": "Playing sound in Unity",
            "answers": [
              {
                "answer": "AudioPlayer",
                "right": false
              },
              {
                "answer": "SoundComponent",
                "right": false
              },
              {
                "answer": "AudioSource",
                "right": true
              },
              {
                "answer": "MusicPlayer",
                "right": false
              }
            ]
          },
          {
            "title": "How do you make a button clickable in Unity?",
            "short_title": "Making a button clickable",
            "answers": [
              {
                "answer": "Assign an 'OnClick' event in the Inspector",
                "right": true
              },
              {
                "answer": "Attach a script to handle input",
                "right": false
              },
              {
                "answer": "Use Unity’s built-in UI system",
                "right": false
              },
              {
                "answer": "All of the above",
                "right": false
              }
            ]
          },
          {
            "title": "Which component is used to display text in Unity's UI?",
            "short_title": "UI Text component",
            "answers": [
              {
                "answer": "TextMeshPro",
                "right": true
              },
              {
                "answer": "Label",
                "right": false
              },
              {
                "answer": "UIText",
                "right": false
              },
              {
                "answer": "TextRenderer",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Canvas' component in Unity?",
            "short_title": "Canvas purpose",
            "answers": [
              {
                "answer": "To render 3D objects",
                "right": false
              },
              {
                "answer": "To manage UI elements",
                "right": true
              },
              {
                "answer": "To handle physics interactions",
                "right": false
              },
              {
                "answer": "To create animations",
                "right": false
              }
            ]
          },
          {
            "title": "Which component allows a UI element to respond to user clicks?",
            "short_title": "UI interactivity",
            "answers": [
              {
                "answer": "Button",
                "right": true
              },
              {
                "answer": "Image",
                "right": false
              },
              {
                "answer": "Text",
                "right": false
              },
              {
                "answer": "Slider",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'RectTransform' component in Unity UI?",
            "short_title": "RectTransform purpose",
            "answers": [
              {
                "answer": "To handle physics interactions",
                "right": false
              },
              {
                "answer": "To define the position, rotation, and scale of UI elements",
                "right": true
              },
              {
                "answer": "To render 3D objects",
                "right": false
              },
              {
                "answer": "To manage animations",
                "right": false
              }
            ]
          },
          {
            "title": "Which UI component is used to create a scrollable area?",
            "short_title": "Scrollable UI",
            "answers": [
              {
                "answer": "ScrollView",
                "right": true
              },
              {
                "answer": "Panel",
                "right": false
              },
              {
                "answer": "Grid",
                "right": false
              },
              {
                "answer": "List",
                "right": false
              }
            ]
          },
          {
            "title": "Which Unity UI component is used to display text?",
            "short_title": "UI component for text display",
            "answers": [
              {
                "answer": "Image",
                "right": false
              },
              {
                "answer": "RawImage",
                "right": false
              },
              {
                "answer": "TextMeshPro",
                "right": true
              },
              {
                "answer": "EventSystem",
                "right": false
              }
            ]
          },
          {
            "title": "What is needed for a UI button to register a click?",
            "short_title": "UI button click requirements",
            "answers": [
              {
                "answer": "A Collider component",
                "right": false
              },
              {
                "answer": "An Event Trigger component",
                "right": false
              },
              {
                "answer": "An EventSystem in the scene",
                "right": true
              },
              {
                "answer": "A custom script",
                "right": false
              }
            ]
          }
        ],
        "Basic Input and Player Controls": [
          {
            "title": "What is the default Unity function for handling keyboard input?",
            "short_title": "Handling keyboard input",
            "answers": [
              {
                "answer": "Input.GetKey()",
                "right": true
              },
              {
                "answer": "Keyboard.CheckKey()",
                "right": false
              },
              {
                "answer": "GetInput()",
                "right": false
              },
              {
                "answer": "InputManager.GetKey()",
                "right": false
              }
            ]
          },
          {
            "title": "How do you detect when the player presses the spacebar?",
            "short_title": "Detecting spacebar press",
            "answers": [
              {
                "answer": "Input.GetButtonDown('space')",
                "right": false
              },
              {
                "answer": "Input.GetKeyDown(KeyCode.Space)",
                "right": true
              },
              {
                "answer": "Keyboard.Press(KeyCode.Space)",
                "right": false
              },
              {
                "answer": "GetKeyDown(Spacebar)",
                "right": false
              }
            ]
          },
          {
            "title": "Which method is used to detect keyboard input in Unity?",
            "short_title": "Keyboard input detection",
            "answers": [
              {
                "answer": "Input.GetKey()",
                "right": true
              },
              {
                "answer": "Input.GetMouseButton()",
                "right": false
              },
              {
                "answer": "Input.GetTouch()",
                "right": false
              },
              {
                "answer": "Input.GetAxis()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetAxis(\"Horizontal\")' return?",
            "short_title": "Input.GetAxis usage",
            "answers": [
              {
                "answer": "A boolean value",
                "right": false
              },
              {
                "answer": "A value between -1 and 1 representing horizontal input",
                "right": true
              },
              {
                "answer": "The position of the mouse",
                "right": false
              },
              {
                "answer": "The current frame count",
                "right": false
              }
            ]
          },
          {
            "title": "Which method is used to detect mouse clicks in Unity?",
            "short_title": "Mouse click detection",
            "answers": [
              {
                "answer": "Input.GetKey()",
                "right": false
              },
              {
                "answer": "Input.GetMouseButton()",
                "right": true
              },
              {
                "answer": "Input.GetTouch()",
                "right": false
              },
              {
                "answer": "Input.GetAxis()",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Input Manager' in Unity?",
            "short_title": "Input Manager purpose",
            "answers": [
              {
                "answer": "To manage game objects",
                "right": false
              },
              {
                "answer": "To define and configure input axes and buttons",
                "right": true
              },
              {
                "answer": "To handle physics interactions",
                "right": false
              },
              {
                "answer": "To create animations",
                "right": false
              }
            ]
          },
          {
            "title": "Which method is used to detect touch input on mobile devices?",
            "short_title": "Touch input detection",
            "answers": [
              {
                "answer": "Input.GetKey()",
                "right": false
              },
              {
                "answer": "Input.GetMouseButton()",
                "right": false
              },
              {
                "answer": "Input.GetTouch()",
                "right": true
              },
              {
                "answer": "Input.GetAxis()",
                "right": false
              }
            ]
          }
        ],
        "Scripting and Logic": [
          {
            "title": "Which method is called automatically when a script starts?",
            "short_title": "Script start method",
            "answers": [
              {
                "answer": "Awake()",
                "right": false
              },
              {
                "answer": "Start()",
                "right": true
              },
              {
                "answer": "Initialize()",
                "right": false
              },
              {
                "answer": "Begin()",
                "right": false
              }
            ]
          },
          {
            "title": "How do you access a component attached to the same GameObject in a script?",
            "short_title": "Accessing components in script",
            "answers": [
              {
                "answer": "GetComponent<ComponentName>()",
                "right": true
              },
              {
                "answer": "FindObject<ComponentName>()",
                "right": false
              },
              {
                "answer": "gameObject.Find<ComponentName>()",
                "right": false
              },
              {
                "answer": "new ComponentName()",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to define a variable that can be accessed in the Unity Inspector?",
            "short_title": "Exposing variables in Inspector",
            "answers": [
              {
                "answer": "private",
                "right": false
              },
              {
                "answer": "protected",
                "right": false
              },
              {
                "answer": "public",
                "right": true
              },
              {
                "answer": "static",
                "right": false
              }
            ]
          },
          {
            "title": "What is the correct syntax to instantiate a GameObject in Unity?",
            "short_title": "Instantiating GameObjects",
            "answers": [
              {
                "answer": "Instantiate(gameObject);",
                "right": false
              },
              {
                "answer": "GameObject.Instantiate(prefab);",
                "right": true
              },
              {
                "answer": "CreateObject(prefab);",
                "right": false
              },
              {
                "answer": "Spawn(gameObject);",
                "right": false
              }
            ]
          },
          {
            "title": "Which method is used to detect collisions in Unity?",
            "short_title": "Collision detection",
            "answers": [
              {
                "answer": "OnTriggerEnter()",
                "right": false
              },
              {
                "answer": "OnCollisionEnter()",
                "right": true
              },
              {
                "answer": "OnCollisionStay()",
                "right": false
              },
              {
                "answer": "OnTriggerStay()",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Start()' function in Unity?",
            "short_title": "Purpose of Start()",
            "answers": [
              {
                "answer": "Runs every frame",
                "right": false
              },
              {
                "answer": "Runs once when the game starts",
                "right": true
              },
              {
                "answer": "Runs when a collision occurs",
                "right": false
              },
              {
                "answer": "Runs when the game object is destroyed",
                "right": false
              }
            ]
          },
          {
            "title": "Which namespace is required to use Unity's UI system in scripts?",
            "short_title": "UI namespace",
            "answers": [
              {
                "answer": "UnityEngine.UI",
                "right": true
              },
              {
                "answer": "UnityEngine.Graphics",
                "right": false
              },
              {
                "answer": "UnityEngine.Input",
                "right": false
              },
              {
                "answer": "UnityEngine.Core",
                "right": false
              }
            ]
          }
        ],
        "Prefabs and Instantiation": [
          {
            "title": "What is a Prefab in Unity?",
            "short_title": "Prefab definition",
            "answers": [
              {
                "answer": "A reusable template for GameObjects",
                "right": true
              },
              {
                "answer": "A type of light",
                "right": false
              },
              {
                "answer": "A script for animations",
                "right": false
              },
              {
                "answer": "A UI element",
                "right": false
              }
            ]
          },
          {
            "title": "How do you instantiate a Prefab in Unity?",
            "short_title": "Instantiating Prefabs",
            "answers": [
              {
                "answer": "Instantiate(prefab);",
                "right": true
              },
              {
                "answer": "Create(prefab);",
                "right": false
              },
              {
                "answer": "Spawn(prefab);",
                "right": false
              },
              {
                "answer": "Clone(prefab);",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you modify a Prefab in Unity?",
            "short_title": "Modifying Prefabs",
            "answers": [
              {
                "answer": "Only the selected instance is modified",
                "right": false
              },
              {
                "answer": "All instances of the Prefab are updated",
                "right": true
              },
              {
                "answer": "The Prefab is deleted",
                "right": false
              },
              {
                "answer": "Nothing happens",
                "right": false
              }
            ]
          }
        ],
        "Audio Basics": [
          {
            "title": "Which component is used to play sounds in Unity?",
            "short_title": "Audio component",
            "answers": [
              {
                "answer": "Audio Source",
                "right": true
              },
              {
                "answer": "Audio Listener",
                "right": false
              },
              {
                "answer": "Audio Clip",
                "right": false
              },
              {
                "answer": "Audio Mixer",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Audio Listener' component?",
            "short_title": "Audio Listener purpose",
            "answers": [
              {
                "answer": "To play sounds",
                "right": false
              },
              {
                "answer": "To receive and play audio in the scene",
                "right": true
              },
              {
                "answer": "To mix audio tracks",
                "right": false
              },
              {
                "answer": "To create sound effects",
                "right": false
              }
            ]
          },
          {
            "title": "Which tool is used to control audio effects and mixing in Unity?",
            "short_title": "Audio mixing tool",
            "answers": [
              {
                "answer": "Audio Mixer",
                "right": true
              },
              {
                "answer": "Audio Source",
                "right": false
              },
              {
                "answer": "Audio Clip",
                "right": false
              },
              {
                "answer": "Audio Listener",
                "right": false
              }
            ]
          }
        ],
        "Lighting and Rendering": [
          {
            "title": "Which type of light in Unity is most performance-friendly for large scenes?",
            "short_title": "Performance-friendly light",
            "answers": [
              {
                "answer": "Directional Light",
                "right": true
              },
              {
                "answer": "Point Light",
                "right": false
              },
              {
                "answer": "Spot Light",
                "right": false
              },
              {
                "answer": "Area Light",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Baked Lighting' in Unity?",
            "short_title": "Baked Lighting purpose",
            "answers": [
              {
                "answer": "To calculate lighting in real-time",
                "right": false
              },
              {
                "answer": "To precompute lighting for better performance",
                "right": true
              },
              {
                "answer": "To create dynamic shadows",
                "right": false
              },
              {
                "answer": "To handle post-processing effects",
                "right": false
              }
            ]
          },
          {
            "title": "Which component is used to add reflections to a scene in Unity?",
            "short_title": "Reflections in Unity",
            "answers": [
              {
                "answer": "Reflection Probe",
                "right": true
              },
              {
                "answer": "Light Probe",
                "right": false
              },
              {
                "answer": "Camera",
                "right": false
              },
              {
                "answer": "Skybox",
                "right": false
              }
            ]
          }
        ],
        "Animation Basics": [
          {
            "title": "Which component is used to create animations in Unity?",
            "short_title": "Animation component",
            "answers": [
              {
                "answer": "Animator",
                "right": true
              },
              {
                "answer": "Animation",
                "right": false
              },
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Animator Controller' in Unity?",
            "short_title": "Animator Controller purpose",
            "answers": [
              {
                "answer": "To manage physics interactions",
                "right": false
              },
              {
                "answer": "To control the flow of animations",
                "right": true
              },
              {
                "answer": "To render 3D models",
                "right": false
              },
              {
                "answer": "To handle UI elements",
                "right": false
              }
            ]
          },
          {
            "title": "Which window is used to create and edit animation clips in Unity?",
            "short_title": "Animation clip editing",
            "answers": [
              {
                "answer": "Animation Window",
                "right": true
              },
              {
                "answer": "Inspector",
                "right": false
              },
              {
                "answer": "Hierarchy",
                "right": false
              },
              {
                "answer": "Project",
                "right": false
              }
            ]
          }
        ],
        "OOP Principles": [
          {
            "title": "Which of the following best describes encapsulation?",
            "short_title": "Definition of encapsulation",
            "answers": [
              {
                "answer": "Hiding the internal details and exposing only necessary parts",
                "right": true
              },
              {
                "answer": "Allowing unrestricted access to all members",
                "right": false
              },
              {
                "answer": "Restricting object creation",
                "right": false
              },
              {
                "answer": "Linking multiple objects together",
                "right": false
              }
            ]
          },
          {
            "title": "What is polymorphism in object-oriented programming?",
            "short_title": "Definition of polymorphism",
            "answers": [
              {
                "answer": "The ability to process objects differently based on their data type",
                "right": true
              },
              {
                "answer": "Defining multiple methods with different names",
                "right": false
              },
              {
                "answer": "Forcing a class to inherit from multiple base classes",
                "right": false
              },
              {
                "answer": "Restricting method overriding",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of abstraction in OOP?",
            "short_title": "Purpose of abstraction",
            "answers": [
              {
                "answer": "To hide complex implementation details and expose only relevant functionality",
                "right": true
              },
              {
                "answer": "To make all members of a class public",
                "right": false
              },
              {
                "answer": "To allow multiple classes to inherit from one base class",
                "right": false
              },
              {
                "answer": "To enforce strict access control",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following is NOT an OOP principle?",
            "short_title": "Non-OOP principle",
            "answers": [
              {
                "answer": "Encapsulation",
                "right": false
              },
              {
                "answer": "Abstraction",
                "right": false
              },
              {
                "answer": "Recursion",
                "right": true
              },
              {
                "answer": "Polymorphism",
                "right": false
              }
            ]
          },
          {
            "title": "What is encapsulation in OOP?",
            "short_title": "Definition of encapsulation",
            "answers": [
              {
                "answer": "Hiding implementation details and exposing only necessary parts",
                "right": true
              },
              {
                "answer": "Using multiple classes to achieve a goal",
                "right": false
              },
              {
                "answer": "The ability to define multiple methods with the same name",
                "right": false
              },
              {
                "answer": "Restricting access to certain variables only within a method",
                "right": false
              }
            ]
          },
          {
            "title": "What is polymorphism in OOP?",
            "short_title": "Definition of polymorphism",
            "answers": [
              {
                "answer": "The ability to take many forms",
                "right": true
              },
              {
                "answer": "Restricting data access",
                "right": false
              },
              {
                "answer": "Hiding implementation details",
                "right": false
              },
              {
                "answer": "Using interfaces only",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used in C# to achieve inheritance?",
            "short_title": "Inheritance keyword",
            "answers": [
              {
                "answer": "extends",
                "right": false
              },
              {
                "answer": "inherits",
                "right": false
              },
              {
                "answer": "base",
                "right": false
              },
              {
                "answer": ":",
                "right": true
              }
            ]
          },
          {
            "title": "Which access modifier allows a class member to be accessible within the same assembly but not from another assembly?",
            "short_title": "Internal access modifier",
            "answers": [
              {
                "answer": "private",
                "right": false
              },
              {
                "answer": "protected",
                "right": false
              },
              {
                "answer": "internal",
                "right": true
              },
              {
                "answer": "public",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main benefit of using interfaces in OOP?",
            "short_title": "Benefit of interfaces",
            "answers": [
              {
                "answer": "They allow multiple inheritance in C#",
                "right": true
              },
              {
                "answer": "They prevent code duplication",
                "right": false
              },
              {
                "answer": "They improve performance",
                "right": false
              },
              {
                "answer": "They restrict object instantiation",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'virtual' keyword do in C#?",
            "short_title": "Purpose of virtual keyword",
            "answers": [
              {
                "answer": "Allows a method to be overridden in a derived class",
                "right": true
              },
              {
                "answer": "Prevents a method from being overridden",
                "right": false
              },
              {
                "answer": "Declares a method as abstract",
                "right": false
              },
              {
                "answer": "Hides the method from subclasses",
                "right": false
              }
            ]
          },
          {
            "title": "What is an abstract class?",
            "short_title": "Definition of abstract class",
            "answers": [
              {
                "answer": "A class that cannot be instantiated and may contain abstract methods",
                "right": true
              },
              {
                "answer": "A class that has no methods or properties",
                "right": false
              },
              {
                "answer": "A class that must implement all methods from an interface",
                "right": false
              },
              {
                "answer": "A class that is always sealed",
                "right": false
              }
            ]
          },
          {
            "title": "Which OOP principle is focused on hiding implementation details?",
            "short_title": "Hiding implementation details",
            "answers": [
              {
                "answer": "Encapsulation",
                "right": true
              },
              {
                "answer": "Inheritance",
                "right": false
              },
              {
                "answer": "Polymorphism",
                "right": false
              },
              {
                "answer": "Abstraction",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between an interface and an abstract class?",
            "short_title": "Interface vs Abstract Class",
            "answers": [
              {
                "answer": "An interface cannot have implemented methods, but an abstract class can",
                "right": true
              },
              {
                "answer": "An interface can be instantiated, but an abstract class cannot",
                "right": false
              },
              {
                "answer": "An interface always has constructors, while an abstract class does not",
                "right": false
              },
              {
                "answer": "Abstract classes cannot be inherited",
                "right": false
              }
            ]
          }
        ],
        "Inheritance and Interfaces": [
          {
            "title": "What is the key difference between an abstract class and an interface?",
            "short_title": "Abstract class vs Interface",
            "answers": [
              {
                "answer": "An abstract class can have implementations, while an interface cannot",
                "right": true
              },
              {
                "answer": "An interface can have constructors",
                "right": false
              },
              {
                "answer": "An abstract class cannot contain fields",
                "right": false
              },
              {
                "answer": "Interfaces cannot be implemented by multiple classes",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to inherit from a base class in C#?",
            "short_title": "Keyword for inheritance",
            "answers": [
              {
                "answer": "extends",
                "right": false
              },
              {
                "answer": "inherits",
                "right": false
              },
              {
                "answer": "base",
                "right": false
              },
              {
                "answer": ":",
                "right": true
              }
            ]
          },
          {
            "title": "Can a C# class implement multiple interfaces?",
            "short_title": "Multiple interfaces",
            "answers": [
              {
                "answer": "Yes",
                "right": true
              },
              {
                "answer": "No",
                "right": false
              },
              {
                "answer": "Only if they share the same methods",
                "right": false
              },
              {
                "answer": "Only if they are inherited from an abstract class",
                "right": false
              }
            ]
          }
        ],
        "Exception Handling": [
          {
            "title": "Which block is required when handling exceptions in C#?",
            "short_title": "Required block for exception handling",
            "answers": [
              {
                "answer": "finally",
                "right": false
              },
              {
                "answer": "throw",
                "right": false
              },
              {
                "answer": "catch",
                "right": true
              },
              {
                "answer": "error",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'finally' block do in a try-catch statement?",
            "short_title": "Purpose of finally block",
            "answers": [
              {
                "answer": "Executes code only if an exception occurs",
                "right": false
              },
              {
                "answer": "Executes code whether an exception occurs or not",
                "right": true
              },
              {
                "answer": "Skips the catch block",
                "right": false
              },
              {
                "answer": "Terminates the program if an exception is unhandled",
                "right": false
              }
            ]
          }
        ],
        "Delegates and Events": [
          {
            "title": "What is a delegate in C#?",
            "short_title": "Definition of delegate",
            "answers": [
              {
                "answer": "A reference type for methods",
                "right": true
              },
              {
                "answer": "A way to create multiple instances of a class",
                "right": false
              },
              {
                "answer": "A feature for asynchronous programming",
                "right": false
              },
              {
                "answer": "A built-in event handler",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of events in C#?",
            "short_title": "Purpose of events",
            "answers": [
              {
                "answer": "To define class properties",
                "right": false
              },
              {
                "answer": "To encapsulate method calls into a delegate",
                "right": false
              },
              {
                "answer": "To enable notification between objects",
                "right": true
              },
              {
                "answer": "To store multiple values in one object",
                "right": false
              }
            ]
          },
          {
            "title": "Which keyword is used to declare an event in C#?",
            "short_title": "Keyword for event declaration",
            "answers": [
              {
                "answer": "delegate",
                "right": false
              },
              {
                "answer": "event",
                "right": true
              },
              {
                "answer": "handler",
                "right": false
              },
              {
                "answer": "trigger",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following best describes multicast delegates?",
            "short_title": "Multicast Delegates",
            "answers": [
              {
                "answer": "Delegates that can reference multiple methods",
                "right": true
              },
              {
                "answer": "Delegates used only for events",
                "right": false
              },
              {
                "answer": "Delegates that execute asynchronously",
                "right": false
              },
              {
                "answer": "Delegates that are automatically garbage collected",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when you invoke an event with no subscribers?",
            "short_title": "Invoking an event with no subscribers",
            "answers": [
              {
                "answer": "Nothing happens",
                "right": true
              },
              {
                "answer": "A NullReferenceException is thrown",
                "right": false
              },
              {
                "answer": "A warning is generated at compile-time",
                "right": false
              },
              {
                "answer": "The program terminates",
                "right": false
              }
            ]
          },
          {
            "title": "Which method signature matches the EventHandler delegate in C#?",
            "short_title": "EventHandler delegate signature",
            "answers": [
              {
                "answer": "void MethodName(object sender, EventArgs e)",
                "right": true
              },
              {
                "answer": "void MethodName()",
                "right": false
              },
              {
                "answer": "bool MethodName(int value)",
                "right": false
              },
              {
                "answer": "Task MethodName()",
                "right": false
              }
            ]
          },
          {
            "title": "How can you subscribe a method to an event?",
            "short_title": "Subscribing to an event",
            "answers": [
              {
                "answer": "Using += operator",
                "right": true
              },
              {
                "answer": "Using = operator",
                "right": false
              },
              {
                "answer": "Using -> operator",
                "right": false
              },
              {
                "answer": "Using event keyword directly",
                "right": false
              }
            ]
          },
          {
            "title": "Which delegate type is commonly used for event handlers?",
            "short_title": "Common delegate type for events",
            "answers": [
              {
                "answer": "EventHandler",
                "right": true
              },
              {
                "answer": "Func<>",
                "right": false
              },
              {
                "answer": "Action<>",
                "right": false
              },
              {
                "answer": "Predicate<>",
                "right": false
              }
            ]
          },
          {
            "title": "What is an anonymous method in C#?",
            "short_title": "Anonymous method definition",
            "answers": [
              {
                "answer": "A method without a name, assigned to a delegate",
                "right": true
              },
              {
                "answer": "A method that does not return anything",
                "right": false
              },
              {
                "answer": "A method declared inside another method",
                "right": false
              },
              {
                "answer": "A method with no parameters",
                "right": false
              }
            ]
          },
          {
            "title": "Which lambda expression syntax is correct for a delegate accepting two integers and returning their sum?",
            "short_title": "Lambda syntax for sum delegate",
            "answers": [
              {
                "answer": "(x, y) => x + y",
                "right": true
              },
              {
                "answer": "x, y => x + y",
                "right": false
              },
              {
                "answer": "delegate(int x, int y) { return x + y; }",
                "right": false
              },
              {
                "answer": "Func<int, int, int> sum = (x, y) => { return x + y; };",
                "right": false
              }
            ]
          },
          {
            "title": "How do you remove a method from an event subscription?",
            "short_title": "Unsubscribing from an event",
            "answers": [
              {
                "answer": "Using -= operator",
                "right": true
              },
              {
                "answer": "Using += operator",
                "right": false
              },
              {
                "answer": "Using event.Unsubscribe()",
                "right": false
              },
              {
                "answer": "Using event.Remove()",
                "right": false
              }
            ]
          }
        ],
        "SOLID Principles": [
          {
            "title": "What does the 'S' in SOLID stand for?",
            "short_title": "S in SOLID",
            "answers": [
              {
                "answer": "Single Responsibility Principle",
                "right": true
              },
              {
                "answer": "Static Class Principle",
                "right": false
              },
              {
                "answer": "Simple Inheritance Principle",
                "right": false
              },
              {
                "answer": "State Management Principle",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle promotes dependency on abstractions rather than concrete implementations?",
            "short_title": "Dependency Inversion Principle",
            "answers": [
              {
                "answer": "Liskov Substitution Principle",
                "right": false
              },
              {
                "answer": "Dependency Inversion Principle",
                "right": true
              },
              {
                "answer": "Interface Segregation Principle",
                "right": false
              },
              {
                "answer": "Open/Closed Principle",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'L' in SOLID stand for?",
            "short_title": "L in SOLID",
            "answers": [
              {
                "answer": "Liskov Substitution Principle",
                "right": true
              },
              {
                "answer": "Layered Architecture Principle",
                "right": false
              },
              {
                "answer": "Logical Dependency Principle",
                "right": false
              },
              {
                "answer": "Lightweight Object Principle",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle ensures that a class should have only one reason to change?",
            "short_title": "Single Responsibility Principle",
            "answers": [
              {
                "answer": "Single Responsibility Principle",
                "right": true
              },
              {
                "answer": "Open/Closed Principle",
                "right": false
              },
              {
                "answer": "Liskov Substitution Principle",
                "right": false
              },
              {
                "answer": "Interface Segregation Principle",
                "right": false
              }
            ]
          },
          {
            "title": "Which SOLID principle is violated when a subclass changes the behavior of its superclass in an unexpected way?",
            "short_title": "Liskov Substitution Principle Violation",
            "answers": [
              {
                "answer": "Liskov Substitution Principle",
                "right": true
              },
              {
                "answer": "Open/Closed Principle",
                "right": false
              },
              {
                "answer": "Interface Segregation Principle",
                "right": false
              },
              {
                "answer": "Dependency Inversion Principle",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle suggests that software entities should be open for extension but closed for modification?",
            "short_title": "Open/Closed Principle",
            "answers": [
              {
                "answer": "Open/Closed Principle",
                "right": true
              },
              {
                "answer": "Single Responsibility Principle",
                "right": false
              },
              {
                "answer": "Dependency Inversion Principle",
                "right": false
              },
              {
                "answer": "Liskov Substitution Principle",
                "right": false
              }
            ]
          }
        ],
        "Memory Management": [
          {
            "title": "What is the purpose of the 'using' statement in C#?",
            "short_title": "Purpose of 'using' statement",
            "answers": [
              {
                "answer": "To manage scope and ensure disposal of resources",
                "right": true
              },
              {
                "answer": "To include namespaces in the code",
                "right": false
              },
              {
                "answer": "To import external libraries",
                "right": false
              },
              {
                "answer": "To enable garbage collection",
                "right": false
              }
            ]
          },
          {
            "title": "Which memory area is used for storing reference-type variables?",
            "short_title": "Reference types storage",
            "answers": [
              {
                "answer": "Stack",
                "right": false
              },
              {
                "answer": "Heap",
                "right": true
              },
              {
                "answer": "Registers",
                "right": false
              },
              {
                "answer": "Static memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is garbage collection in C#?",
            "short_title": "Garbage collection",
            "answers": [
              {
                "answer": "A process that automatically reclaims unused memory",
                "right": true
              },
              {
                "answer": "A method to manually free memory",
                "right": false
              },
              {
                "answer": "A way to handle runtime exceptions",
                "right": false
              },
              {
                "answer": "A tool for optimizing database queries",
                "right": false
              }
            ]
          },
          {
            "title": "Which method can be used to force garbage collection in C#?",
            "short_title": "Forcing garbage collection",
            "answers": [
              {
                "answer": "GC.Collect()",
                "right": true
              },
              {
                "answer": "GC.Run()",
                "right": false
              },
              {
                "answer": "GC.Execute()",
                "right": false
              },
              {
                "answer": "GC.Dispose()",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when an object implementing IDisposable is not disposed properly?",
            "short_title": "Undisposed IDisposable Object",
            "answers": [
              {
                "answer": "It may cause memory leaks",
                "right": true
              },
              {
                "answer": "It will be automatically collected without issues",
                "right": false
              },
              {
                "answer": "It will be forcefully finalized by GC",
                "right": false
              },
              {
                "answer": "It will throw an exception",
                "right": false
              }
            ]
          },
          {
            "title": "Which of the following is the best practice to manage memory efficiently in C#?",
            "short_title": "Best Memory Management Practice",
            "answers": [
              {
                "answer": "Use 'using' statement for IDisposable objects",
                "right": true
              },
              {
                "answer": "Call GC.Collect() manually frequently",
                "right": false
              },
              {
                "answer": "Avoid using reference types",
                "right": false
              },
              {
                "answer": "Use large object heap for all objects",
                "right": false
              }
            ]
          }
        ]
      }
    },
    {
      "rank": "junior+",
      "subjects": {
        "Unity Core Concepts": [
          {
            "title": "What does the 'Awake' method do in a Unity script?",
            "short_title": "Awake purpose",
            "answers": [
              {
                "answer": "Runs when the script is first initialized",
                "right": true
              },
              {
                "answer": "Runs every frame",
                "right": false
              },
              {
                "answer": "Runs when a collision occurs",
                "right": false
              },
              {
                "answer": "Runs when the object is destroyed",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Prefab in Unity?",
            "short_title": "Prefab definition",
            "answers": [
              {
                "answer": "A reusable template for GameObjects",
                "right": true
              },
              {
                "answer": "A physics component",
                "right": false
              },
              {
                "answer": "A shader file",
                "right": false
              },
              {
                "answer": "A scene file",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GameObject.Find()' do in Unity?",
            "short_title": "GameObject.Find()",
            "answers": [
              {
                "answer": "Locates a GameObject by name in the scene",
                "right": true
              },
              {
                "answer": "Creates a new GameObject",
                "right": false
              },
              {
                "answer": "Destroys a GameObject",
                "right": false
              },
              {
                "answer": "Moves a GameObject",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Transform' component in Unity?",
            "short_title": "Transform purpose",
            "answers": [
              {
                "answer": "Controls position, rotation, and scale",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders graphics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Instantiate()' do in Unity?",
            "short_title": "Instantiate purpose",
            "answers": [
              {
                "answer": "Creates a copy of an object in the scene",
                "right": true
              },
              {
                "answer": "Deletes an object",
                "right": false
              },
              {
                "answer": "Finds an object",
                "right": false
              },
              {
                "answer": "Scales an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the 'Update' method used for in Unity?",
            "short_title": "Update purpose",
            "answers": [
              {
                "answer": "Runs logic every frame",
                "right": true
              },
              {
                "answer": "Initializes an object",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Destroys an object",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Destroy()' do in Unity?",
            "short_title": "Destroy purpose",
            "answers": [
              {
                "answer": "Removes a GameObject or component from the scene",
                "right": true
              },
              {
                "answer": "Creates a new GameObject",
                "right": false
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Scales an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of a 'Scene' in Unity?",
            "short_title": "Scene purpose",
            "answers": [
              {
                "answer": "Contains all GameObjects and assets for a level",
                "right": true
              },
              {
                "answer": "Defines a single GameObject",
                "right": false
              },
              {
                "answer": "Manages physics settings",
                "right": false
              },
              {
                "answer": "Stores shader code",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Time.deltaTime' represent in Unity?",
            "short_title": "Time.deltaTime",
            "answers": [
              {
                "answer": "Time in seconds since the last frame",
                "right": true
              },
              {
                "answer": "Total game time",
                "right": false
              },
              {
                "answer": "Fixed physics time step",
                "right": false
              },
              {
                "answer": "Scene load time",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'MonoBehaviour' in Unity?",
            "short_title": "MonoBehaviour definition",
            "answers": [
              {
                "answer": "A base class for scripts attached to GameObjects",
                "right": true
              },
              {
                "answer": "A physics component",
                "right": false
              },
              {
                "answer": "A rendering system",
                "right": false
              },
              {
                "answer": "A UI element",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GetComponent()' do in Unity?",
            "short_title": "GetComponent purpose",
            "answers": [
              {
                "answer": "Retrieves a component attached to a GameObject",
                "right": true
              },
              {
                "answer": "Adds a new component",
                "right": false
              },
              {
                "answer": "Destroys a component",
                "right": false
              },
              {
                "answer": "Finds a GameObject",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Start' method in Unity?",
            "short_title": "Start purpose",
            "answers": [
              {
                "answer": "Runs once before the first frame",
                "right": true
              },
              {
                "answer": "Runs every frame",
                "right": false
              },
              {
                "answer": "Runs on collision",
                "right": false
              },
              {
                "answer": "Runs when destroyed",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Vector3.MoveTowards()' do in Unity?",
            "short_title": "Vector3.MoveTowards",
            "answers": [
              {
                "answer": "Moves a point toward a target at a set speed",
                "right": true
              },
              {
                "answer": "Rotates an object",
                "right": false
              },
              {
                "answer": "Scales an object",
                "right": false
              },
              {
                "answer": "Destroys an object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Camera' component in Unity?",
            "short_title": "Camera purpose",
            "answers": [
              {
                "answer": "Renders the scene to the screen",
                "right": true
              },
              {
                "answer": "Moves objects",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.LoadScene()' do in Unity?",
            "short_title": "LoadScene purpose",
            "answers": [
              {
                "answer": "Loads a new scene by name or index",
                "right": true
              },
              {
                "answer": "Unloads the current scene",
                "right": false
              },
              {
                "answer": "Restarts the game",
                "right": false
              },
              {
                "answer": "Pauses the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Coroutine' in Unity?",
            "short_title": "Coroutine definition",
            "answers": [
              {
                "answer": "A method that can pause and resume over time",
                "right": true
              },
              {
                "answer": "A physics calculation",
                "right": false
              },
              {
                "answer": "A rendering function",
                "right": false
              },
              {
                "answer": "A UI component",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'yield return null' do in a Unity Coroutine?",
            "short_title": "yield return null",
            "answers": [
              {
                "answer": "Waits until the next frame",
                "right": true
              },
              {
                "answer": "Stops the coroutine",
                "right": false
              },
              {
                "answer": "Waits for a collision",
                "right": false
              },
              {
                "answer": "Restarts the coroutine",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SerializeField' in Unity?",
            "short_title": "SerializeField purpose",
            "answers": [
              {
                "answer": "Makes a private field visible in the Inspector",
                "right": true
              },
              {
                "answer": "Hides a public field",
                "right": false
              },
              {
                "answer": "Creates a new object",
                "right": false
              },
              {
                "answer": "Disables a script",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'DontDestroyOnLoad()' do in Unity?",
            "short_title": "DontDestroyOnLoad purpose",
            "answers": [
              {
                "answer": "Keeps an object alive across scene changes",
                "right": true
              },
              {
                "answer": "Destroys an object",
                "right": false
              },
              {
                "answer": "Freezes an object",
                "right": false
              },
              {
                "answer": "Loads a new scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Layer' in Unity?",
            "short_title": "Layer purpose",
            "answers": [
              {
                "answer": "Groups objects for collision and rendering",
                "right": true
              },
              {
                "answer": "Changes object color",
                "right": false
              },
              {
                "answer": "Scales objects",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          }
        ],
        "OOP Principles": [
          {
            "title": "What is the difference between method overloading and method overriding?",
            "short_title": "Overloading vs Overriding",
            "answers": [
              {
                "answer": "Overloading occurs in the same class, overriding in derived classes",
                "right": true
              },
              {
                "answer": "Overloading requires inheritance, overriding does not",
                "right": false
              },
              {
                "answer": "Overloading changes method signatures, overriding changes method return types",
                "right": false
              },
              {
                "answer": "Overriding allows multiple methods with the same name but different parameters",
                "right": false
              }
            ]
          },
          {
            "title": "What is covariance and contravariance in C# generics?",
            "short_title": "Covariance vs Contravariance",
            "answers": [
              {
                "answer": "Covariance allows a derived type to be used where a base type is expected, contravariance is the opposite",
                "right": true
              },
              {
                "answer": "Covariance works only with reference types, contravariance with value types",
                "right": false
              },
              {
                "answer": "Contravariance means two classes must have the same type parameters",
                "right": false
              },
              {
                "answer": "Covariance and contravariance apply only to static methods",
                "right": false
              }
            ]
          },
          {
            "title": "Which design pattern follows the Open/Closed principle of SOLID?",
            "short_title": "Design pattern for Open/Closed principle",
            "answers": [
              {
                "answer": "Strategy Pattern",
                "right": true
              },
              {
                "answer": "Singleton Pattern",
                "right": false
              },
              {
                "answer": "Prototype Pattern",
                "right": false
              },
              {
                "answer": "Observer Pattern",
                "right": false
              }
            ]
          },
          {
            "title": "Why are abstract classes used instead of interfaces in some cases?",
            "short_title": "Abstract classes vs Interfaces",
            "answers": [
              {
                "answer": "Abstract classes allow shared code implementation, while interfaces do not",
                "right": true
              },
              {
                "answer": "Interfaces cannot be inherited but abstract classes can",
                "right": false
              },
              {
                "answer": "Abstract classes are always faster than interfaces",
                "right": false
              },
              {
                "answer": "Interfaces do not support method overloading",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'sealed' keyword do in C#?",
            "short_title": "Purpose of sealed keyword",
            "answers": [
              {
                "answer": "Prevents a class from being inherited",
                "right": true
              },
              {
                "answer": "Prevents a class from implementing an interface",
                "right": false
              },
              {
                "answer": "Makes all methods in a class virtual",
                "right": false
              },
              {
                "answer": "Allows a class to be inherited only once",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between deep copy and shallow copy in C#?",
            "short_title": "Deep vs Shallow Copy",
            "answers": [
              {
                "answer": "Shallow copy copies references, deep copy duplicates objects",
                "right": true
              },
              {
                "answer": "Deep copy is faster than shallow copy",
                "right": false
              },
              {
                "answer": "Shallow copy works only on primitive types",
                "right": false
              },
              {
                "answer": "Deep copy is the default behavior of the Clone() method",
                "right": false
              }
            ]
          },
          {
            "title": "Which principle states that derived classes must be substitutable for their base classes?",
            "short_title": "Liskov Substitution Principle",
            "answers": [
              {
                "answer": "Liskov Substitution Principle",
                "right": true
              },
              {
                "answer": "Open/Closed Principle",
                "right": false
              },
              {
                "answer": "Interface Segregation Principle",
                "right": false
              },
              {
                "answer": "Single Responsibility Principle",
                "right": false
              }
            ]
          },
          {
            "title": "What is method hiding in C#?",
            "short_title": "Method Hiding",
            "answers": [
              {
                "answer": "Using the 'new' keyword to hide a base class method",
                "right": true
              },
              {
                "answer": "Overriding a method with the same signature",
                "right": false
              },
              {
                "answer": "Preventing a method from being inherited",
                "right": false
              },
              {
                "answer": "Marking a method as private",
                "right": false
              }
            ]
          },
          {
            "title": "Which design pattern is used to ensure a class has only one instance?",
            "short_title": "Singleton Pattern",
            "answers": [
              {
                "answer": "Singleton",
                "right": true
              },
              {
                "answer": "Factory",
                "right": false
              },
              {
                "answer": "Builder",
                "right": false
              },
              {
                "answer": "Prototype",
                "right": false
              }
            ]
          },
          {
            "title": "What is the main purpose of the Factory Method pattern?",
            "short_title": "Factory Method Pattern Purpose",
            "answers": [
              {
                "answer": "To create objects without specifying their exact class",
                "right": true
              },
              {
                "answer": "To allow multiple instances of a class",
                "right": false
              },
              {
                "answer": "To define a common interface for subclasses",
                "right": false
              },
              {
                "answer": "To ensure all classes have unique identifiers",
                "right": false
              }
            ]
          }
        ],
        "Memory Management and Garbage Collection": [
          {
            "title": "What is Garbage Collection (GC) in C#?",
            "short_title": "GC definition",
            "answers": [
              {
                "answer": "A process that automatically frees unused memory",
                "right": true
              },
              {
                "answer": "A method to manually allocate memory",
                "right": false
              },
              {
                "answer": "A tool for rendering graphics",
                "right": false
              },
              {
                "answer": "A physics simulation system",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when the Garbage Collector runs in Unity?",
            "short_title": "GC effect in Unity",
            "answers": [
              {
                "answer": "It may cause a performance hiccup or frame drop",
                "right": true
              },
              {
                "answer": "It speeds up the game",
                "right": false
              },
              {
                "answer": "It renders the scene",
                "right": false
              },
              {
                "answer": "It stops all physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is a common cause of Garbage Collection in Unity?",
            "short_title": "GC cause",
            "answers": [
              {
                "answer": "Creating new objects like strings or arrays repeatedly",
                "right": true
              },
              {
                "answer": "Moving an object",
                "right": false
              },
              {
                "answer": "Updating a Rigidbody",
                "right": false
              },
              {
                "answer": "Changing a material",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'heap memory' refer to in C#?",
            "short_title": "Heap memory",
            "answers": [
              {
                "answer": "Memory for objects managed by the Garbage Collector",
                "right": true
              },
              {
                "answer": "Memory for variables on the stack",
                "right": false
              },
              {
                "answer": "Memory for physics calculations",
                "right": false
              },
              {
                "answer": "Memory for rendering",
                "right": false
              }
            ]
          },
          {
            "title": "Why should you avoid frequent string concatenation in Unity?",
            "short_title": "String concatenation issue",
            "answers": [
              {
                "answer": "It creates new objects, triggering Garbage Collection",
                "right": true
              },
              {
                "answer": "It slows down rendering",
                "right": false
              },
              {
                "answer": "It stops physics",
                "right": false
              },
              {
                "answer": "It breaks scripts",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'StringBuilder' in C# for memory management?",
            "short_title": "StringBuilder purpose",
            "answers": [
              {
                "answer": "To manipulate strings without creating new objects",
                "right": true
              },
              {
                "answer": "To allocate more memory",
                "right": false
              },
              {
                "answer": "To handle physics",
                "right": false
              },
              {
                "answer": "To render text",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'null' do to an object reference in C#?",
            "short_title": "'null' effect",
            "answers": [
              {
                "answer": "Makes it eligible for Garbage Collection",
                "right": true
              },
              {
                "answer": "Deletes it immediately",
                "right": false
              },
              {
                "answer": "Hides it from the scene",
                "right": false
              },
              {
                "answer": "Freezes it",
                "right": false
              }
            ]
          },
          {
            "title": "What is 'stack memory' used for in C#?",
            "short_title": "Stack memory",
            "answers": [
              {
                "answer": "Stores local variables and method calls",
                "right": true
              },
              {
                "answer": "Stores objects managed by the GC",
                "right": false
              },
              {
                "answer": "Stores physics data",
                "right": false
              },
              {
                "answer": "Stores textures",
                "right": false
              }
            ]
          },
          {
            "title": "What can excessive Garbage Collection cause in a Unity game?",
            "short_title": "Excessive GC impact",
            "answers": [
              {
                "answer": "Stuttering or lag",
                "right": true
              },
              {
                "answer": "Faster performance",
                "right": false
              },
              {
                "answer": "Better graphics",
                "right": false
              },
              {
                "answer": "More accurate physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Object Pooling' help with in Unity?",
            "short_title": "Object Pooling",
            "answers": [
              {
                "answer": "Reducing memory allocation by reusing objects",
                "right": true
              },
              {
                "answer": "Increasing frame rate directly",
                "right": false
              },
              {
                "answer": "Rendering objects faster",
                "right": false
              },
              {
                "answer": "Handling physics collisions",
                "right": false
              }
            ]
          },
          {
            "title": "Why is it bad to use 'new' excessively in Unity’s Update method?",
            "short_title": "'new' in Update",
            "answers": [
              {
                "answer": "It generates garbage every frame",
                "right": true
              },
              {
                "answer": "It slows down physics",
                "right": false
              },
              {
                "answer": "It breaks rendering",
                "right": false
              },
              {
                "answer": "It stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GC.Collect()' do in C#?",
            "short_title": "GC.Collect()",
            "answers": [
              {
                "answer": "Forces the Garbage Collector to run immediately",
                "right": true
              },
              {
                "answer": "Allocates new memory",
                "right": false
              },
              {
                "answer": "Stops the GC",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is a benefit of reusing arrays instead of creating new ones in Unity?",
            "short_title": "Array reuse",
            "answers": [
              {
                "answer": "Reduces garbage and memory allocations",
                "right": true
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Improves rendering speed",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Destroy()' do to an object’s memory in Unity?",
            "short_title": "Destroy memory effect",
            "answers": [
              {
                "answer": "Marks it for Garbage Collection after removal",
                "right": true
              },
              {
                "answer": "Frees memory instantly",
                "right": false
              },
              {
                "answer": "Keeps it in memory forever",
                "right": false
              },
              {
                "answer": "Duplicates the object",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'memory leak' in the context of Unity?",
            "short_title": "Memory leak",
            "answers": [
              {
                "answer": "When memory is allocated but never freed",
                "right": true
              },
              {
                "answer": "When memory is freed too early",
                "right": false
              },
              {
                "answer": "When physics stops working",
                "right": false
              },
              {
                "answer": "When rendering fails",
                "right": false
              }
            ]
          },
          {
            "title": "Why should you avoid 'GameObject.Find()' in Update for memory reasons?",
            "short_title": "GameObject.Find() in Update",
            "answers": [
              {
                "answer": "It creates temporary strings that trigger GC",
                "right": true
              },
              {
                "answer": "It slows down physics",
                "right": false
              },
              {
                "answer": "It renders objects",
                "right": false
              },
              {
                "answer": "It stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does setting a reference to 'null' help with in Unity?",
            "short_title": "'null' benefit",
            "answers": [
              {
                "answer": "Allows the Garbage Collector to reclaim memory",
                "right": true
              },
              {
                "answer": "Speeds up rendering",
                "right": false
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Pauses the game",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of caching components in Unity?",
            "short_title": "Caching components",
            "answers": [
              {
                "answer": "Avoids repeated lookups that generate garbage",
                "right": true
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.GC.SuppressFinalize()' do in C#?",
            "short_title": "SuppressFinalize",
            "answers": [
              {
                "answer": "Prevents an object’s finalizer from running",
                "right": true
              },
              {
                "answer": "Forces immediate GC",
                "right": false
              },
              {
                "answer": "Allocates new memory",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "Why is it good to use structs instead of classes for small data in Unity?",
            "short_title": "Structs vs classes",
            "answers": [
              {
                "answer": "Structs are stack-allocated and don’t trigger GC",
                "right": true
              },
              {
                "answer": "Structs render faster",
                "right": false
              },
              {
                "answer": "Structs improve physics",
                "right": false
              },
              {
                "answer": "Structs are bigger",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Dispose() method in C#?",
            "short_title": "Dispose() method",
            "answers": [
              {
                "answer": "Releases unmanaged resources explicitly",
                "right": true
              },
              {
                "answer": "Forces garbage collection immediately",
                "right": false
              },
              {
                "answer": "Removes objects from the heap",
                "right": false
              },
              {
                "answer": "Marks an object as ready for finalization",
                "right": false
              }
            ]
          },
          {
            "title": "Which garbage collection generation in C# is for short-lived objects?",
            "short_title": "Garbage Collection Generations",
            "answers": [
              {
                "answer": "Generation 0",
                "right": true
              },
              {
                "answer": "Generation 1",
                "right": false
              },
              {
                "answer": "Generation 2",
                "right": false
              },
              {
                "answer": "There are no garbage collection generations in C#",
                "right": false
              }
            ]
          }
        ],
        "LINQ and Functional Programming": [
          {
            "title": "Which LINQ method is used to filter elements from a collection?",
            "short_title": "Filtering with LINQ",
            "answers": [
              {
                "answer": "Where()",
                "right": true
              },
              {
                "answer": "Select()",
                "right": false
              },
              {
                "answer": "GroupBy()",
                "right": false
              },
              {
                "answer": "OrderBy()",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Select() method do in LINQ?",
            "short_title": "Select() method",
            "answers": [
              {
                "answer": "Projects each element into a new form",
                "right": true
              },
              {
                "answer": "Filters elements based on a condition",
                "right": false
              },
              {
                "answer": "Groups elements based on a key",
                "right": false
              },
              {
                "answer": "Sorts elements in ascending order",
                "right": false
              }
            ]
          }
        ],
        "Rendering": [
          {
            "title": "What component is responsible for rendering a scene in Unity?",
            "short_title": "Rendering component",
            "answers": [
              {
                "answer": "Camera",
                "right": true
              },
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Transform",
                "right": false
              }
            ]
          },
          {
            "title": "What does a 'Material' define in Unity?",
            "short_title": "Material definition",
            "answers": [
              {
                "answer": "How an object’s surface looks when rendered",
                "right": true
              },
              {
                "answer": "The object’s physics properties",
                "right": false
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The object’s animation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Mesh Renderer' in Unity?",
            "short_title": "Mesh Renderer purpose",
            "answers": [
              {
                "answer": "Renders a 3D mesh on a GameObject",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Handles collisions",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Shader' property of a Material do in Unity?",
            "short_title": "Shader property",
            "answers": [
              {
                "answer": "Defines how the material is rendered",
                "right": true
              },
              {
                "answer": "Sets the object’s position",
                "right": false
              },
              {
                "answer": "Controls physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default Unity shader for most objects?",
            "short_title": "Default shader",
            "answers": [
              {
                "answer": "Standard Shader",
                "right": true
              },
              {
                "answer": "Unlit Shader",
                "right": false
              },
              {
                "answer": "Particle Shader",
                "right": false
              },
              {
                "answer": "Transparent Shader",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Field of View' setting on a Camera control?",
            "short_title": "Field of View",
            "answers": [
              {
                "answer": "The width of the camera’s view angle",
                "right": true
              },
              {
                "answer": "The camera’s position",
                "right": false
              },
              {
                "answer": "The camera’s rotation",
                "right": false
              },
              {
                "answer": "The camera’s color",
                "right": false
              }
            ]
          },
          {
            "title": "What component adds light to a scene in Unity?",
            "short_title": "Light component",
            "answers": [
              {
                "answer": "Light",
                "right": true
              },
              {
                "answer": "Camera",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              },
              {
                "answer": "Rigidbody",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Directional Light' do in Unity?",
            "short_title": "Directional Light",
            "answers": [
              {
                "answer": "Simulates sunlight with parallel rays",
                "right": true
              },
              {
                "answer": "Lights a single point",
                "right": false
              },
              {
                "answer": "Creates shadows only",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Main Texture' in a Unity Material?",
            "short_title": "Main Texture",
            "answers": [
              {
                "answer": "Defines the primary surface image",
                "right": true
              },
              {
                "answer": "Controls the object’s physics",
                "right": false
              },
              {
                "answer": "Sets the light intensity",
                "right": false
              },
              {
                "answer": "Adjusts the camera view",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Camera.ClearFlags' control in Unity?",
            "short_title": "ClearFlags",
            "answers": [
              {
                "answer": "What the camera renders in the background",
                "right": true
              },
              {
                "answer": "The camera’s position",
                "right": false
              },
              {
                "answer": "The camera’s rotation",
                "right": false
              },
              {
                "answer": "The camera’s zoom",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Point Light' used for in Unity?",
            "short_title": "Point Light",
            "answers": [
              {
                "answer": "Emits light from a single point in all directions",
                "right": true
              },
              {
                "answer": "Creates parallel light rays",
                "right": false
              },
              {
                "answer": "Focuses light in a cone",
                "right": false
              },
              {
                "answer": "Renders shadows only",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Render Mode' of a Light affect in Unity?",
            "short_title": "Light Render Mode",
            "answers": [
              {
                "answer": "How the light is calculated (e.g., real-time or baked)",
                "right": true
              },
              {
                "answer": "The light’s color",
                "right": false
              },
              {
                "answer": "The light’s position",
                "right": false
              },
              {
                "answer": "The light’s shadow type",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shadows' in Unity Lights?",
            "short_title": "Shadows purpose",
            "answers": [
              {
                "answer": "Casts shadows from objects blocking the light",
                "right": true
              },
              {
                "answer": "Changes the light color",
                "right": false
              },
              {
                "answer": "Moves the light",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Camera.depth' control in Unity?",
            "short_title": "Camera.depth",
            "answers": [
              {
                "answer": "The order in which cameras render",
                "right": true
              },
              {
                "answer": "The camera’s field of view",
                "right": false
              },
              {
                "answer": "The camera’s resolution",
                "right": false
              },
              {
                "answer": "The camera’s position",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Spot Light' in Unity?",
            "short_title": "Spot Light",
            "answers": [
              {
                "answer": "A light that emits in a cone shape",
                "right": true
              },
              {
                "answer": "A light that shines everywhere",
                "right": false
              },
              {
                "answer": "A light that follows an object",
                "right": false
              },
              {
                "answer": "A light for UI only",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Material.color' change in Unity?",
            "short_title": "Material.color",
            "answers": [
              {
                "answer": "The base color of the material",
                "right": true
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The light intensity",
                "right": false
              },
              {
                "answer": "The camera angle",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Render Settings' in Unity?",
            "short_title": "Render Settings",
            "answers": [
              {
                "answer": "Controls global rendering options like fog and skybox",
                "right": true
              },
              {
                "answer": "Sets physics properties",
                "right": false
              },
              {
                "answer": "Moves objects",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Mesh Filter' do in Unity?",
            "short_title": "Mesh Filter",
            "answers": [
              {
                "answer": "Holds the mesh data for rendering",
                "right": true
              },
              {
                "answer": "Filters light",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Camera.cullingMask' control in Unity?",
            "short_title": "Culling Mask",
            "answers": [
              {
                "answer": "Which layers the camera renders",
                "right": true
              },
              {
                "answer": "The camera’s position",
                "right": false
              },
              {
                "answer": "The light intensity",
                "right": false
              },
              {
                "answer": "The object’s scale",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Ambient Light' in Unity?",
            "short_title": "Ambient Light",
            "answers": [
              {
                "answer": "Provides a base lighting level for the scene",
                "right": true
              },
              {
                "answer": "Focuses light on one object",
                "right": false
              },
              {
                "answer": "Casts shadows",
                "right": false
              },
              {
                "answer": "Moves the camera",
                "right": false
              }
            ]
          }
        ],
        "Input Handling": [
          {
            "title": "What does 'Input.GetKey()' do in Unity?",
            "short_title": "GetKey purpose",
            "answers": [
              {
                "answer": "Checks if a key is being held down",
                "right": true
              },
              {
                "answer": "Checks if a key was pressed this frame",
                "right": false
              },
              {
                "answer": "Moves the mouse",
                "right": false
              },
              {
                "answer": "Plays a sound",
                "right": false
              }
            ]
          },
          {
            "title": "What method detects a key press in a single frame in Unity?",
            "short_title": "Key press detection",
            "answers": [
              {
                "answer": "Input.GetKeyDown()",
                "right": true
              },
              {
                "answer": "Input.GetKey()",
                "right": false
              },
              {
                "answer": "Input.GetKeyUp()",
                "right": false
              },
              {
                "answer": "Input.GetMouseButton()",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetMouseButton(0)' check in Unity?",
            "short_title": "GetMouseButton(0)",
            "answers": [
              {
                "answer": "If the left mouse button is held down",
                "right": true
              },
              {
                "answer": "If the right mouse button is pressed",
                "right": false
              },
              {
                "answer": "If the mouse moved",
                "right": false
              },
              {
                "answer": "If the mouse wheel scrolled",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.mousePosition' return in Unity?",
            "short_title": "mousePosition",
            "answers": [
              {
                "answer": "The position of the mouse cursor in screen coordinates",
                "right": true
              },
              {
                "answer": "The position of the player",
                "right": false
              },
              {
                "answer": "The speed of the mouse",
                "right": false
              },
              {
                "answer": "The button clicked",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Input.GetAxis()' in Unity?",
            "short_title": "GetAxis purpose",
            "answers": [
              {
                "answer": "Returns a smooth value for input like joystick or keys",
                "right": true
              },
              {
                "answer": "Checks if a button is pressed",
                "right": false
              },
              {
                "answer": "Moves the camera",
                "right": false
              },
              {
                "answer": "Plays an animation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetKeyUp()' detect in Unity?",
            "short_title": "GetKeyUp purpose",
            "answers": [
              {
                "answer": "When a key is released this frame",
                "right": true
              },
              {
                "answer": "When a key is held down",
                "right": false
              },
              {
                "answer": "When a key is pressed",
                "right": false
              },
              {
                "answer": "When a mouse button is clicked",
                "right": false
              }
            ]
          },
          {
            "title": "What axis name is commonly used for horizontal movement in Unity?",
            "short_title": "Horizontal axis",
            "answers": [
              {
                "answer": "Horizontal",
                "right": true
              },
              {
                "answer": "Vertical",
                "right": false
              },
              {
                "answer": "Mouse X",
                "right": false
              },
              {
                "answer": "Jump",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetMouseButtonDown(1)' check in Unity?",
            "short_title": "GetMouseButtonDown(1)",
            "answers": [
              {
                "answer": "If the right mouse button was pressed this frame",
                "right": true
              },
              {
                "answer": "If the left mouse button is held",
                "right": false
              },
              {
                "answer": "If the mouse moved",
                "right": false
              },
              {
                "answer": "If the middle mouse button was clicked",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Input Manager' in Unity?",
            "short_title": "Input Manager",
            "answers": [
              {
                "answer": "Configures input axes and buttons",
                "right": true
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetAxisRaw()' do differently from 'Input.GetAxis()'?",
            "short_title": "GetAxisRaw vs GetAxis",
            "answers": [
              {
                "answer": "Returns un-smoothed input values",
                "right": true
              },
              {
                "answer": "Smooths the input values",
                "right": false
              },
              {
                "answer": "Only works with mouse input",
                "right": false
              },
              {
                "answer": "Returns a boolean",
                "right": false
              }
            ]
          },
          {
            "title": "What is the new 'Input System' in Unity designed to improve?",
            "short_title": "New Input System",
            "answers": [
              {
                "answer": "Flexibility and support for multiple devices",
                "right": true
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Physics accuracy",
                "right": false
              },
              {
                "answer": "Animation playback",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.touchCount' return in Unity?",
            "short_title": "touchCount",
            "answers": [
              {
                "answer": "The number of active touches on the screen",
                "right": true
              },
              {
                "answer": "The mouse position",
                "right": false
              },
              {
                "answer": "The key pressed",
                "right": false
              },
              {
                "answer": "The axis value",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetTouch(0)' provide in Unity?",
            "short_title": "GetTouch(0)",
            "answers": [
              {
                "answer": "Details about the first touch on the screen",
                "right": true
              },
              {
                "answer": "The mouse button state",
                "right": false
              },
              {
                "answer": "The keyboard input",
                "right": false
              },
              {
                "answer": "The axis direction",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'KeyCode' in Unity?",
            "short_title": "KeyCode purpose",
            "answers": [
              {
                "answer": "Identifies specific keys for input detection",
                "right": true
              },
              {
                "answer": "Controls rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetButton()' do in Unity?",
            "short_title": "GetButton purpose",
            "answers": [
              {
                "answer": "Checks if a named button is held down",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Checks the mouse position",
                "right": false
              },
              {
                "answer": "Triggers an animation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetAxis(\"Vertical\")' typically control?",
            "short_title": "Vertical axis",
            "answers": [
              {
                "answer": "Forward and backward movement",
                "right": true
              },
              {
                "answer": "Left and right movement",
                "right": false
              },
              {
                "answer": "Mouse rotation",
                "right": false
              },
              {
                "answer": "Jumping",
                "right": false
              }
            ]
          },
          {
            "title": "What is an 'Input Action' in Unity’s new Input System?",
            "short_title": "Input Action",
            "answers": [
              {
                "answer": "A configurable input event",
                "right": true
              },
              {
                "answer": "A physics event",
                "right": false
              },
              {
                "answer": "A rendering command",
                "right": false
              },
              {
                "answer": "An animation trigger",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.anyKey' check in Unity?",
            "short_title": "anyKey purpose",
            "answers": [
              {
                "answer": "If any key or button is currently pressed",
                "right": true
              },
              {
                "answer": "If a specific key is pressed",
                "right": false
              },
              {
                "answer": "If the mouse moved",
                "right": false
              },
              {
                "answer": "If a touch occurred",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Input.GetMouseButtonUp(0)' detect?",
            "short_title": "GetMouseButtonUp(0)",
            "answers": [
              {
                "answer": "When the left mouse button is released",
                "right": true
              },
              {
                "answer": "When the right mouse button is pressed",
                "right": false
              },
              {
                "answer": "When the mouse moves",
                "right": false
              },
              {
                "answer": "When the middle mouse button is held",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'PlayerInput' component in Unity’s new Input System?",
            "short_title": "PlayerInput purpose",
            "answers": [
              {
                "answer": "Links input actions to game behaviors",
                "right": true
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          }
        ],
        "Animation": [
          {
            "title": "What component is used to control animations on a GameObject in Unity?",
            "short_title": "Animation component",
            "answers": [
              {
                "answer": "Animator",
                "right": true
              },
              {
                "answer": "Rigidbody",
                "right": false
              },
              {
                "answer": "Collider",
                "right": false
              },
              {
                "answer": "Mesh Renderer",
                "right": false
              }
            ]
          },
          {
            "title": "What is an 'Animation Clip' in Unity?",
            "short_title": "Animation Clip definition",
            "answers": [
              {
                "answer": "A sequence of keyframes for animating an object",
                "right": true
              },
              {
                "answer": "A physics simulation",
                "right": false
              },
              {
                "answer": "A rendering setting",
                "right": false
              },
              {
                "answer": "A UI element",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Animator Controller' do in Unity?",
            "short_title": "Animator Controller purpose",
            "answers": [
              {
                "answer": "Manages animation states and transitions",
                "right": true
              },
              {
                "answer": "Controls physics",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Animator.Play()' method in Unity?",
            "short_title": "Animator.Play()",
            "answers": [
              {
                "answer": "Plays a specific animation state",
                "right": true
              },
              {
                "answer": "Stops all animations",
                "right": false
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Changes the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetBool()' do in Unity?",
            "short_title": "SetBool purpose",
            "answers": [
              {
                "answer": "Sets a boolean parameter to control transitions",
                "right": true
              },
              {
                "answer": "Plays an animation clip",
                "right": false
              },
              {
                "answer": "Stops an animation",
                "right": false
              },
              {
                "answer": "Renders a texture",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Transition' in the Animator Controller?",
            "short_title": "Transition definition",
            "answers": [
              {
                "answer": "A rule to switch between animation states",
                "right": true
              },
              {
                "answer": "A physics property",
                "right": false
              },
              {
                "answer": "A rendering effect",
                "right": false
              },
              {
                "answer": "A sound effect",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetFloat()' do in Unity?",
            "short_title": "SetFloat purpose",
            "answers": [
              {
                "answer": "Sets a float parameter for animation control",
                "right": true
              },
              {
                "answer": "Changes the object’s position",
                "right": false
              },
              {
                "answer": "Stops the animation",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Animation' component in Unity’s legacy system?",
            "short_title": "Legacy Animation",
            "answers": [
              {
                "answer": "Plays simple animation clips directly",
                "right": true
              },
              {
                "answer": "Manages complex state machines",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.speed' control in Unity?",
            "short_title": "Animator.speed",
            "answers": [
              {
                "answer": "The playback speed of all animations",
                "right": true
              },
              {
                "answer": "The object’s movement speed",
                "right": false
              },
              {
                "answer": "The rendering speed",
                "right": false
              },
              {
                "answer": "The physics simulation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Parameter' in the Animator Controller?",
            "short_title": "Parameter definition",
            "answers": [
              {
                "answer": "A variable used to control animation transitions",
                "right": true
              },
              {
                "answer": "A physics setting",
                "right": false
              },
              {
                "answer": "A rendering option",
                "right": false
              },
              {
                "answer": "A sound volume",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetTrigger()' do in Unity?",
            "short_title": "SetTrigger purpose",
            "answers": [
              {
                "answer": "Activates a trigger parameter for a transition",
                "right": true
              },
              {
                "answer": "Stops an animation",
                "right": false
              },
              {
                "answer": "Changes the object’s scale",
                "right": false
              },
              {
                "answer": "Renders a texture",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Animation Window' in Unity?",
            "short_title": "Animation Window",
            "answers": [
              {
                "answer": "Creates and edits Animation Clips",
                "right": true
              },
              {
                "answer": "Controls physics",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.GetCurrentAnimatorStateInfo()' return?",
            "short_title": "GetCurrentAnimatorStateInfo",
            "answers": [
              {
                "answer": "Details about the current animation state",
                "right": true
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The physics properties",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Blend Tree' in Unity?",
            "short_title": "Blend Tree definition",
            "answers": [
              {
                "answer": "A system to blend multiple animations",
                "right": true
              },
              {
                "answer": "A physics controller",
                "right": false
              },
              {
                "answer": "A rendering tool",
                "right": false
              },
              {
                "answer": "A UI layout",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animation.Play()' do in Unity’s legacy system?",
            "short_title": "Animation.Play()",
            "answers": [
              {
                "answer": "Plays a named animation clip",
                "right": true
              },
              {
                "answer": "Stops all animations",
                "right": false
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Changes the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of an 'Animation Event' in Unity?",
            "short_title": "Animation Event",
            "answers": [
              {
                "answer": "Calls a function at a specific point in an animation",
                "right": true
              },
              {
                "answer": "Triggers a physics event",
                "right": false
              },
              {
                "answer": "Renders a new frame",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetInteger()' do in Unity?",
            "short_title": "SetInteger purpose",
            "answers": [
              {
                "answer": "Sets an integer parameter for animation control",
                "right": true
              },
              {
                "answer": "Changes the object’s rotation",
                "right": false
              },
              {
                "answer": "Stops the animation",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the default state in an Animator Controller called?",
            "short_title": "Default state",
            "answers": [
              {
                "answer": "Entry",
                "right": true
              },
              {
                "answer": "Idle",
                "right": false
              },
              {
                "answer": "Exit",
                "right": false
              },
              {
                "answer": "Start",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.IsInTransition()' check in Unity?",
            "short_title": "IsInTransition",
            "answers": [
              {
                "answer": "If the Animator is transitioning between states",
                "right": true
              },
              {
                "answer": "If an animation is stopped",
                "right": false
              },
              {
                "answer": "If the object is moving",
                "right": false
              },
              {
                "answer": "If the scene is rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Loop' setting on an Animation Clip?",
            "short_title": "Loop setting",
            "answers": [
              {
                "answer": "Makes the animation repeat indefinitely",
                "right": true
              },
              {
                "answer": "Stops the animation",
                "right": false
              },
              {
                "answer": "Changes the playback speed",
                "right": false
              },
              {
                "answer": "Renders a new frame",
                "right": false
              }
            ]
          }
        ],
        "Physics": [
          {
            "title": "What does 'Rigidbody.AddForce()' do in Unity?",
            "short_title": "AddForce purpose",
            "answers": [
              {
                "answer": "Applies a force to move a Rigidbody",
                "right": true
              },
              {
                "answer": "Stops a Rigidbody",
                "right": false
              },
              {
                "answer": "Changes the Rigidbody’s scale",
                "right": false
              },
              {
                "answer": "Rotates a Rigidbody",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between 'OnCollisionEnter' and 'OnTriggerEnter' in Unity?",
            "short_title": "Collision vs Trigger",
            "answers": [
              {
                "answer": "OnCollisionEnter is for physical collisions, OnTriggerEnter is for trigger zones",
                "right": true
              },
              {
                "answer": "OnTriggerEnter is for physical collisions, OnCollisionEnter is for triggers",
                "right": false
              },
              {
                "answer": "They are the same",
                "right": false
              },
              {
                "answer": "OnCollisionEnter renders graphics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.velocity' do when modified in Unity?",
            "short_title": "Rigidbody.velocity",
            "answers": [
              {
                "answer": "Directly sets the speed and direction of movement",
                "right": true
              },
              {
                "answer": "Applies a gradual force",
                "right": false
              },
              {
                "answer": "Changes the object’s rotation",
                "right": false
              },
              {
                "answer": "Stops the object",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Physics Material' in Unity?",
            "short_title": "Physics Material",
            "answers": [
              {
                "answer": "Controls friction and bounciness of a Collider",
                "right": true
              },
              {
                "answer": "Renders the object",
                "right": false
              },
              {
                "answer": "Moves the object",
                "right": false
              },
              {
                "answer": "Plays an animation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'FixedUpdate()' do differently from 'Update()' for physics?",
            "short_title": "FixedUpdate vs Update",
            "answers": [
              {
                "answer": "Runs at a fixed time step for physics updates",
                "right": true
              },
              {
                "answer": "Runs every frame for rendering",
                "right": false
              },
              {
                "answer": "Runs only on collisions",
                "right": false
              },
              {
                "answer": "Runs at startup",
                "right": false
              }
            ]
          },
          {
            "title": "What happens when a Rigidbody’s 'isKinematic' is set to true?",
            "short_title": "isKinematic effect",
            "answers": [
              {
                "answer": "It’s controlled by code, not physics",
                "right": true
              },
              {
                "answer": "It falls faster",
                "right": false
              },
              {
                "answer": "It stops colliding",
                "right": false
              },
              {
                "answer": "It rotates automatically",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.AddTorque()' apply to an object?",
            "short_title": "AddTorque purpose",
            "answers": [
              {
                "answer": "Rotational force",
                "right": true
              },
              {
                "answer": "Linear movement",
                "right": false
              },
              {
                "answer": "Gravity increase",
                "right": false
              },
              {
                "answer": "Scale change",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Collision' parameter provide in 'OnCollisionEnter'?",
            "short_title": "Collision parameter",
            "answers": [
              {
                "answer": "Details about the collision like contact points",
                "right": true
              },
              {
                "answer": "The object’s position",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The animation state",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.gravity' in Unity?",
            "short_title": "Physics.gravity",
            "answers": [
              {
                "answer": "Sets the global gravity direction and strength",
                "right": true
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Changes object colors",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.constraints' control in Unity?",
            "short_title": "Rigidbody.constraints",
            "answers": [
              {
                "answer": "Locks specific movements or rotations",
                "right": true
              },
              {
                "answer": "Increases gravity",
                "right": false
              },
              {
                "answer": "Changes the mass",
                "right": false
              },
              {
                "answer": "Triggers animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Trigger Collider' used for in Unity?",
            "short_title": "Trigger Collider",
            "answers": [
              {
                "answer": "Detecting overlap without physical collision",
                "right": true
              },
              {
                "answer": "Making objects bounce",
                "right": false
              },
              {
                "answer": "Rendering graphics",
                "right": false
              },
              {
                "answer": "Moving objects",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.Raycast()' do in Unity?",
            "short_title": "Physics.Raycast()",
            "answers": [
              {
                "answer": "Casts a ray to detect collisions",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Plays an animation",
                "right": false
              },
              {
                "answer": "Renders a texture",
                "right": false
              }
            ]
          },
          {
            "title": "What information does a 'RaycastHit' provide in Unity?",
            "short_title": "RaycastHit",
            "answers": [
              {
                "answer": "Details about what the ray hit, like point and object",
                "right": true
              },
              {
                "answer": "The object’s velocity",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The animation state",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.mass' affect in Unity?",
            "short_title": "Rigidbody.mass",
            "answers": [
              {
                "answer": "How forces and collisions impact the object",
                "right": true
              },
              {
                "answer": "The object’s size",
                "right": false
              },
              {
                "answer": "The object’s color",
                "right": false
              },
              {
                "answer": "The object’s animation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'OnCollisionStay' in Unity?",
            "short_title": "OnCollisionStay",
            "answers": [
              {
                "answer": "Called every frame while objects are touching",
                "right": true
              },
              {
                "answer": "Called when objects first collide",
                "right": false
              },
              {
                "answer": "Called when objects separate",
                "right": false
              },
              {
                "answer": "Called on trigger enter",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.useGravity' control?",
            "short_title": "useGravity purpose",
            "answers": [
              {
                "answer": "Whether the object is affected by gravity",
                "right": true
              },
              {
                "answer": "The object’s rotation",
                "right": false
              },
              {
                "answer": "The object’s rendering",
                "right": false
              },
              {
                "answer": "The object’s scale",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.IgnoreCollision()' do in Unity?",
            "short_title": "IgnoreCollision",
            "answers": [
              {
                "answer": "Prevents two Colliders from colliding",
                "right": true
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Changes gravity",
                "right": false
              },
              {
                "answer": "Renders a shadow",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of a 'Character Controller' in Unity?",
            "short_title": "Character Controller",
            "answers": [
              {
                "answer": "Handles simplified physics for character movement",
                "right": true
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Controls rendering",
                "right": false
              },
              {
                "answer": "Plays sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.angularVelocity' control?",
            "short_title": "angularVelocity",
            "answers": [
              {
                "answer": "The rotational speed and direction",
                "right": true
              },
              {
                "answer": "The linear speed",
                "right": false
              },
              {
                "answer": "The object’s scale",
                "right": false
              },
              {
                "answer": "The object’s position",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'OnTriggerStay' in Unity?",
            "short_title": "OnTriggerStay",
            "answers": [
              {
                "answer": "Called every frame an object remains in a trigger",
                "right": true
              },
              {
                "answer": "Called when a collision starts",
                "right": false
              },
              {
                "answer": "Called when an object exits a trigger",
                "right": false
              },
              {
                "answer": "Called on frame update",
                "right": false
              }
            ]
          }
        ]
      }
    },
    {
      "rank": "Middle",
      "subjects": {
        "C#": [
          {
            "title": "What is the difference between Task and Thread in C#?",
            "short_title": "Task vs Thread",
            "answers": [
              {
                "answer": "Tasks are higher-level abstractions managed by the Task Scheduler, Threads are lower-level",
                "right": true
              },
              {
                "answer": "Threads are managed by the Task Scheduler, Tasks are not",
                "right": false
              },
              {
                "answer": "Tasks cannot run concurrently",
                "right": false
              },
              {
                "answer": "There is no difference",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'lock' keyword in C#?",
            "short_title": "Purpose of 'lock'",
            "answers": [
              {
                "answer": "To ensure thread-safe access to shared resources",
                "right": true
              },
              {
                "answer": "To create a new thread",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'volatile' keyword do in C#?",
            "short_title": "Volatile keyword",
            "answers": [
              {
                "answer": "Ensures a field is not cached and is always read from memory",
                "right": true
              },
              {
                "answer": "Marks a variable as constant",
                "right": false
              },
              {
                "answer": "Locks a variable for thread safety",
                "right": false
              },
              {
                "answer": "Optimizes performance",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between 'IEnumerable' and 'IQueryable' in C#?",
            "short_title": "IEnumerable vs IQueryable",
            "answers": [
              {
                "answer": "IQueryable executes queries on the server side, IEnumerable in memory",
                "right": true
              },
              {
                "answer": "IEnumerable is for databases, IQueryable is for collections",
                "right": false
              },
              {
                "answer": "IQueryable cannot be enumerated",
                "right": false
              },
              {
                "answer": "There is no difference",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Tuple' in C#?",
            "short_title": "Tuple definition",
            "answers": [
              {
                "answer": "A data structure to group multiple values",
                "right": true
              },
              {
                "answer": "A type-safe delegate",
                "right": false
              },
              {
                "answer": "A replacement for arrays",
                "right": false
              },
              {
                "answer": "A threading utility",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ValueTask' provide compared to 'Task' in C#?",
            "short_title": "ValueTask vs Task",
            "answers": [
              {
                "answer": "Performance optimization for synchronous results",
                "right": true
              },
              {
                "answer": "Better thread management",
                "right": false
              },
              {
                "answer": "Exception handling",
                "right": false
              },
              {
                "answer": "No difference",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'async void' methods in C#?",
            "short_title": "async void purpose",
            "answers": [
              {
                "answer": "For fire-and-forget operations, typically event handlers",
                "right": true
              },
              {
                "answer": "To return a value asynchronously",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              },
              {
                "answer": "To manage threads",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between 'override' and 'new' in C#?",
            "short_title": "override vs new",
            "answers": [
              {
                "answer": "'override' extends a virtual method, 'new' hides it",
                "right": true
              },
              {
                "answer": "'new' extends a virtual method, 'override' hides it",
                "right": false
              },
              {
                "answer": "They are identical",
                "right": false
              },
              {
                "answer": "'override' is for interfaces only",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Expression Trees' in C#?",
            "short_title": "Expression Trees",
            "answers": [
              {
                "answer": "To represent code as data for runtime manipulation",
                "right": true
              },
              {
                "answer": "To optimize loops",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              },
              {
                "answer": "To create threads",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Span<T>' provide in C#?",
            "short_title": "Span<T> purpose",
            "answers": [
              {
                "answer": "A lightweight view over a contiguous memory region",
                "right": true
              },
              {
                "answer": "A replacement for arrays",
                "right": false
              },
              {
                "answer": "A threading utility",
                "right": false
              },
              {
                "answer": "A database querying tool",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Monitor' class in C#?",
            "short_title": "Monitor class",
            "answers": [
              {
                "answer": "To provide thread synchronization similar to 'lock'",
                "right": true
              },
              {
                "answer": "To create async methods",
                "right": false
              },
              {
                "answer": "To handle exceptions",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Lazy<T>' do in C#?",
            "short_title": "Lazy<T> purpose",
            "answers": [
              {
                "answer": "Delays object initialization until it’s needed",
                "right": true
              },
              {
                "answer": "Creates a thread pool",
                "right": false
              },
              {
                "answer": "Manages collections",
                "right": false
              },
              {
                "answer": "Handles events",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between 'StringBuilder' and 'string' in C#?",
            "short_title": "StringBuilder vs string",
            "answers": [
              {
                "answer": "StringBuilder is mutable, string is immutable",
                "right": true
              },
              {
                "answer": "String is mutable, StringBuilder is immutable",
                "right": false
              },
              {
                "answer": "StringBuilder is slower",
                "right": false
              },
              {
                "answer": "No difference",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'in' keyword do for parameters in C#?",
            "short_title": "in keyword",
            "answers": [
              {
                "answer": "Passes arguments by reference without allowing modification",
                "right": true
              },
              {
                "answer": "Allows modification of arguments",
                "right": false
              },
              {
                "answer": "Creates a copy of the argument",
                "right": false
              },
              {
                "answer": "Marks a parameter as optional",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ConcurrentDictionary' in C#?",
            "short_title": "ConcurrentDictionary",
            "answers": [
              {
                "answer": "Thread-safe key-value storage",
                "right": true
              },
              {
                "answer": "A faster List implementation",
                "right": false
              },
              {
                "answer": "A database query tool",
                "right": false
              },
              {
                "answer": "A memory optimizer",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'ThreadPool' class do in C#?",
            "short_title": "ThreadPool purpose",
            "answers": [
              {
                "answer": "Manages a pool of worker threads for efficient task execution",
                "right": true
              },
              {
                "answer": "Creates a single-threaded application",
                "right": false
              },
              {
                "answer": "Handles exceptions",
                "right": false
              },
              {
                "answer": "Optimizes memory allocation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Semaphore' in C#?",
            "short_title": "Semaphore purpose",
            "answers": [
              {
                "answer": "Limits the number of threads accessing a resource",
                "right": true
              },
              {
                "answer": "Creates a new thread",
                "right": false
              },
              {
                "answer": "Manages collections",
                "right": false
              },
              {
                "answer": "Handles events",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Parallel.For' provide in C#?",
            "short_title": "Parallel.For purpose",
            "answers": [
              {
                "answer": "Executes a loop in parallel across multiple threads",
                "right": true
              },
              {
                "answer": "Runs a loop synchronously",
                "right": false
              },
              {
                "answer": "Handles exceptions",
                "right": false
              },
              {
                "answer": "Creates a single thread",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ref struct' in C#?",
            "short_title": "ref struct purpose",
            "answers": [
              {
                "answer": "Defines a struct that can only live on the stack",
                "right": true
              },
              {
                "answer": "Creates a heap-allocated struct",
                "right": false
              },
              {
                "answer": "Manages threading",
                "right": false
              },
              {
                "answer": "Handles collections",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'TaskCompletionSource' allow in C#?",
            "short_title": "TaskCompletionSource",
            "answers": [
              {
                "answer": "Manual control over Task completion",
                "right": true
              },
              {
                "answer": "Automatic thread creation",
                "right": false
              },
              {
                "answer": "Exception handling",
                "right": false
              },
              {
                "answer": "Memory optimization",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'System.Reflection' in C#?",
            "short_title": "System.Reflection",
            "answers": [
              {
                "answer": "Enables runtime type introspection and manipulation",
                "right": true
              },
              {
                "answer": "Manages threads",
                "right": false
              },
              {
                "answer": "Handles file I/O",
                "right": false
              },
              {
                "answer": "Optimizes collections",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'async Task<T>' return in C#?",
            "short_title": "async Task<T>",
            "answers": [
              {
                "answer": "A Task representing an asynchronous operation with a result",
                "right": true
              },
              {
                "answer": "A void result",
                "right": false
              },
              {
                "answer": "A synchronous result",
                "right": false
              },
              {
                "answer": "A thread handle",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Activator.CreateInstance()' in C#?",
            "short_title": "Activator.CreateInstance()",
            "answers": [
              {
                "answer": "Creates an instance of a type dynamically",
                "right": true
              },
              {
                "answer": "Manages threads",
                "right": false
              },
              {
                "answer": "Handles exceptions",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Threading.Barrier' do in C#?",
            "short_title": "Barrier purpose",
            "answers": [
              {
                "answer": "Synchronizes multiple threads at a specific point",
                "right": true
              },
              {
                "answer": "Creates a single thread",
                "right": false
              },
              {
                "answer": "Manages collections",
                "right": false
              },
              {
                "answer": "Handles events",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'System.Runtime.CompilerServices' in C#?",
            "short_title": "CompilerServices",
            "answers": [
              {
                "answer": "Provides low-level compiler-related functionality",
                "right": true
              },
              {
                "answer": "Manages UI rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          }
        ],
        "Unity": [
          {
            "title": "What is the purpose of the Entity Component System (ECS) in Unity?",
            "short_title": "ECS purpose",
            "answers": [
              {
                "answer": "To improve performance with data-oriented design",
                "right": true
              },
              {
                "answer": "To manage UI elements",
                "right": false
              },
              {
                "answer": "To handle shaders",
                "right": false
              },
              {
                "answer": "To create prefabs",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Jobs System in Unity?",
            "short_title": "Jobs System",
            "answers": [
              {
                "answer": "A way to run multithreaded code efficiently",
                "right": true
              },
              {
                "answer": "A tool for scene management",
                "right": false
              },
              {
                "answer": "A physics simulation system",
                "right": false
              },
              {
                "answer": "A UI framework",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Burst Compiler do in Unity?",
            "short_title": "Burst Compiler",
            "answers": [
              {
                "answer": "Optimizes Jobs System code with high-performance native code",
                "right": true
              },
              {
                "answer": "Compiles shaders",
                "right": false
              },
              {
                "answer": "Manages memory",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the difference between MonoBehaviour and ScriptableObject?",
            "short_title": "MonoBehaviour vs ScriptableObject",
            "answers": [
              {
                "answer": "MonoBehaviour attaches to GameObjects, ScriptableObject is an asset",
                "right": true
              },
              {
                "answer": "ScriptableObject attaches to GameObjects, MonoBehaviour is an asset",
                "right": false
              },
              {
                "answer": "MonoBehaviour is for data, ScriptableObject is for behavior",
                "right": false
              },
              {
                "answer": "No difference",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Unity's Addressable Asset System?",
            "short_title": "Addressables purpose",
            "answers": [
              {
                "answer": "To manage and load assets dynamically with better memory control",
                "right": true
              },
              {
                "answer": "To create animations",
                "right": false
              },
              {
                "answer": "To optimize physics",
                "right": false
              },
              {
                "answer": "To render UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'ExecuteInEditMode' attribute do in Unity?",
            "short_title": "ExecuteInEditMode",
            "answers": [
              {
                "answer": "Runs a script in the Editor even when not playing",
                "right": true
              },
              {
                "answer": "Optimizes runtime performance",
                "right": false
              },
              {
                "answer": "Disables a script in play mode",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the NavMesh system in Unity?",
            "short_title": "NavMesh purpose",
            "answers": [
              {
                "answer": "To enable AI pathfinding on surfaces",
                "right": true
              },
              {
                "answer": "To render UI",
                "right": false
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does Physics.Raycast() return in Unity?",
            "short_title": "Physics.Raycast()",
            "answers": [
              {
                "answer": "A boolean indicating if the ray hit something, plus hit info",
                "right": true
              },
              {
                "answer": "A list of all objects in the scene",
                "right": false
              },
              {
                "answer": "A vector for movement",
                "right": false
              },
              {
                "answer": "A rotation quaternion",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Animator Override Controller in Unity?",
            "short_title": "Animator Override Controller",
            "answers": [
              {
                "answer": "To swap animation clips without changing the state machine",
                "right": true
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To render UI",
                "right": false
              },
              {
                "answer": "To optimize performance",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'RequireComponent' attribute do in Unity?",
            "short_title": "RequireComponent",
            "answers": [
              {
                "answer": "Ensures a GameObject has a specific component",
                "right": true
              },
              {
                "answer": "Disables a component",
                "right": false
              },
              {
                "answer": "Loads an asset",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Timeline in Unity?",
            "short_title": "Timeline purpose",
            "answers": [
              {
                "answer": "To create cinematic sequences and control animations",
                "right": true
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              },
              {
                "answer": "To render UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Reflection Probe' do in Unity?",
            "short_title": "Reflection Probe",
            "answers": [
              {
                "answer": "Captures environment reflections for real-time rendering",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Playable Director' in Unity?",
            "short_title": "Playable Director",
            "answers": [
              {
                "answer": "Controls Timeline and Playable assets",
                "right": true
              },
              {
                "answer": "Optimizes physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.LoadSceneAsync' do in Unity?",
            "short_title": "LoadSceneAsync",
            "answers": [
              {
                "answer": "Loads a scene asynchronously in the background",
                "right": true
              },
              {
                "answer": "Loads a scene synchronously",
                "right": false
              },
              {
                "answer": "Unloads a scene",
                "right": false
              },
              {
                "answer": "Reloads the current scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Particle System Force Field' in Unity?",
            "short_title": "Particle Force Field",
            "answers": [
              {
                "answer": "Applies forces to influence particle behavior",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'IJobParallelFor' in Unity?",
            "short_title": "IJobParallelFor",
            "answers": [
              {
                "answer": "Executes a job in parallel over a data set",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'TransformAccessArray' do in Unity Jobs?",
            "short_title": "TransformAccessArray",
            "answers": [
              {
                "answer": "Provides efficient access to Transform data in Jobs",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Entities.ForEach' in Unity ECS?",
            "short_title": "Entities.ForEach",
            "answers": [
              {
                "answer": "Iterates over entities with specified components",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ComponentSystem' do in Unity ECS?",
            "short_title": "ComponentSystem",
            "answers": [
              {
                "answer": "Defines behavior for entities on the main thread",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Hybrid Renderer' in Unity?",
            "short_title": "Hybrid Renderer",
            "answers": [
              {
                "answer": "Renders ECS entities efficiently with SRP",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RenderPipelineManager' do in Unity?",
            "short_title": "RenderPipelineManager",
            "answers": [
              {
                "answer": "Manages custom Scriptable Render Pipelines",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NavMeshAgent' in Unity?",
            "short_title": "NavMeshAgent",
            "answers": [
              {
                "answer": "Controls an object’s movement along a NavMesh",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysicsShapeGroup2D' do in Unity?",
            "short_title": "PhysicsShapeGroup2D",
            "answers": [
              {
                "answer": "Manages 2D physics shapes for collision",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles 3D physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'PlayableGraph' in Unity?",
            "short_title": "PlayableGraph",
            "answers": [
              {
                "answer": "Manages a hierarchy of playable assets",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Lightmapping.BakeAsync()' do in Unity?",
            "short_title": "Lightmapping.BakeAsync()",
            "answers": [
              {
                "answer": "Bakes lightmaps asynchronously",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'TerrainData' in Unity?",
            "short_title": "TerrainData",
            "answers": [
              {
                "answer": "Stores data for terrain generation and modification",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysicsScene' allow in Unity?",
            "short_title": "PhysicsScene",
            "answers": [
              {
                "answer": "Simulates physics in a custom scene",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          }
        ],
        "Design Patterns": [
          {
            "title": "What is the Singleton pattern commonly used for in Unity?",
            "short_title": "Singleton pattern",
            "answers": [
              {
                "answer": "To ensure only one instance of a class exists",
                "right": true
              },
              {
                "answer": "To manage multiple instances",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              },
              {
                "answer": "To handle physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Observer pattern in Unity?",
            "short_title": "Observer pattern",
            "answers": [
              {
                "answer": "To notify objects of state changes",
                "right": true
              },
              {
                "answer": "To create singletons",
                "right": false
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To render UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Factory pattern used for in Unity?",
            "short_title": "Factory pattern",
            "answers": [
              {
                "answer": "To create objects without specifying their exact classes",
                "right": true
              },
              {
                "answer": "To manage threads",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              },
              {
                "answer": "To handle animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the Command pattern useful for in Unity?",
            "short_title": "Command pattern",
            "answers": [
              {
                "answer": "To encapsulate actions as objects, enabling undo/redo",
                "right": true
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To create shaders",
                "right": false
              },
              {
                "answer": "To optimize performance",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Strategy pattern allow in Unity?",
            "short_title": "Strategy pattern",
            "answers": [
              {
                "answer": "Swapping algorithms or behaviors at runtime",
                "right": true
              },
              {
                "answer": "Creating singletons",
                "right": false
              },
              {
                "answer": "Managing UI",
                "right": false
              },
              {
                "answer": "Handling physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the State pattern in Unity?",
            "short_title": "State pattern",
            "answers": [
              {
                "answer": "To manage object behavior based on its current state",
                "right": true
              },
              {
                "answer": "To create factories",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              },
              {
                "answer": "To handle physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Decorator pattern provide in Unity?",
            "short_title": "Decorator pattern",
            "answers": [
              {
                "answer": "Extends functionality without modifying the original class",
                "right": true
              },
              {
                "answer": "Creates singletons",
                "right": false
              },
              {
                "answer": "Manages threading",
                "right": false
              },
              {
                "answer": "Handles UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Adapter pattern in Unity?",
            "short_title": "Adapter pattern",
            "answers": [
              {
                "answer": "To make incompatible interfaces work together",
                "right": true
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To optimize memory",
                "right": false
              },
              {
                "answer": "To create animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Composite pattern in Unity?",
            "short_title": "Composite pattern",
            "answers": [
              {
                "answer": "Treats individual objects and compositions uniformly",
                "right": true
              },
              {
                "answer": "Manages threads",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Flyweight pattern achieve in Unity?",
            "short_title": "Flyweight pattern",
            "answers": [
              {
                "answer": "Reduces memory usage by sharing common data",
                "right": true
              },
              {
                "answer": "Creates singletons",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Chain of Responsibility pattern in Unity?",
            "short_title": "Chain of Responsibility",
            "answers": [
              {
                "answer": "Passes requests along a chain of handlers",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Visitor pattern allow in Unity?",
            "short_title": "Visitor pattern",
            "answers": [
              {
                "answer": "Adds operations to objects without modifying their classes",
                "right": true
              },
              {
                "answer": "Handles threading",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Memento pattern in Unity?",
            "short_title": "Memento pattern",
            "answers": [
              {
                "answer": "Captures and restores an object’s state",
                "right": true
              },
              {
                "answer": "Creates factories",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Facade pattern provide in Unity?",
            "short_title": "Facade pattern",
            "answers": [
              {
                "answer": "Simplifies interaction with a complex subsystem",
                "right": true
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Proxy pattern in Unity?",
            "short_title": "Proxy pattern",
            "answers": [
              {
                "answer": "Controls access to an object",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Template Method pattern define in Unity?",
            "short_title": "Template Method",
            "answers": [
              {
                "answer": "A skeleton for an algorithm with customizable steps",
                "right": true
              },
              {
                "answer": "Manages threading",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ],
        "Optimization": [
          {
            "title": "What is the benefit of using the Unity Jobs System?",
            "short_title": "Jobs System benefit",
            "answers": [
              {
                "answer": "Efficient multithreading for performance",
                "right": true
              },
              {
                "answer": "Better UI rendering",
                "right": false
              },
              {
                "answer": "Improved shader quality",
                "right": false
              },
              {
                "answer": "Simplified physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does dynamic batching do in Unity?",
            "short_title": "Dynamic batching",
            "answers": [
              {
                "answer": "Combines draw calls for moving objects with shared materials",
                "right": true
              },
              {
                "answer": "Optimizes physics",
                "right": false
              },
              {
                "answer": "Reduces texture size",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Level of Detail (LOD) in Unity?",
            "short_title": "LOD purpose",
            "answers": [
              {
                "answer": "To reduce polygon count for distant objects",
                "right": true
              },
              {
                "answer": "To improve physics accuracy",
                "right": false
              },
              {
                "answer": "To manage UI",
                "right": false
              },
              {
                "answer": "To create shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'NativeArray' provide in Unity?",
            "short_title": "NativeArray purpose",
            "answers": [
              {
                "answer": "A high-performance, unmanaged array for Jobs",
                "right": true
              },
              {
                "answer": "A managed list for UI",
                "right": false
              },
              {
                "answer": "A physics utility",
                "right": false
              },
              {
                "answer": "A shader container",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using Compute Shaders in Unity?",
            "short_title": "Compute Shaders benefit",
            "answers": [
              {
                "answer": "Parallel processing on the GPU for complex calculations",
                "right": true
              },
              {
                "answer": "Improved physics",
                "right": false
              },
              {
                "answer": "Better UI rendering",
                "right": false
              },
              {
                "answer": "Simplified scripting",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Graphics Settings' allow in Unity?",
            "short_title": "Graphics Settings",
            "answers": [
              {
                "answer": "Customization of rendering pipeline and performance",
                "right": true
              },
              {
                "answer": "Physics optimization",
                "right": false
              },
              {
                "answer": "UI management",
                "right": false
              },
              {
                "answer": "Animation control",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AsyncGPUReadback' in Unity?",
            "short_title": "AsyncGPUReadback",
            "answers": [
              {
                "answer": "Reads GPU data asynchronously to avoid stalling",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Dynamic Resolution' do in Unity?",
            "short_title": "Dynamic Resolution",
            "answers": [
              {
                "answer": "Adjusts render resolution based on performance",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Preloading' in Unity?",
            "short_title": "Shader Preloading",
            "answers": [
              {
                "answer": "Reduces runtime shader compilation hitches",
                "right": true
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.autoSimulation' control in Unity?",
            "short_title": "Physics.autoSimulation",
            "answers": [
              {
                "answer": "Enables or disables automatic physics updates",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'NativeList' in Unity?",
            "short_title": "NativeList benefit",
            "answers": [
              {
                "answer": "Provides a dynamic, unmanaged list for Jobs",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RenderTexture' optimize in Unity?",
            "short_title": "RenderTexture",
            "answers": [
              {
                "answer": "Off-screen rendering for effects and post-processing",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'JobSystem.ScheduleBatchedJobs()' in Unity?",
            "short_title": "ScheduleBatchedJobs()",
            "answers": [
              {
                "answer": "Executes multiple Jobs in a batch",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Occlusion Culling Baking' do in Unity?",
            "short_title": "Occlusion Culling Baking",
            "answers": [
              {
                "answer": "Precomputes visibility to reduce rendering",
                "right": true
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              }
            ]
          }
        ],
        "Shaders": [
          {
            "title": "What is a Compute Shader in Unity?",
            "short_title": "Compute Shader",
            "answers": [
              {
                "answer": "A shader for general-purpose GPU computing",
                "right": true
              },
              {
                "answer": "A shader for vertex processing",
                "right": false
              },
              {
                "answer": "A shader for UI rendering",
                "right": false
              },
              {
                "answer": "A physics tool",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'GrabPass' do in Unity shaders?",
            "short_title": "GrabPass purpose",
            "answers": [
              {
                "answer": "Captures the screen contents into a texture",
                "right": true
              },
              {
                "answer": "Applies lighting",
                "right": false
              },
              {
                "answer": "Transforms vertices",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'CGPROGRAM' block in Unity shaders?",
            "short_title": "CGPROGRAM purpose",
            "answers": [
              {
                "answer": "Defines shader code in Cg/HLSL",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Stencil Buffer' do in Unity shaders?",
            "short_title": "Stencil Buffer",
            "answers": [
              {
                "answer": "Controls which pixels are rendered based on a mask",
                "right": true
              },
              {
                "answer": "Applies textures",
                "right": false
              },
              {
                "answer": "Manages lighting",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Feature' in Unity?",
            "short_title": "Shader Feature",
            "answers": [
              {
                "answer": "Allows conditional shader compilation for variants",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Tessellation' do in Unity shaders?",
            "short_title": "Tessellation",
            "answers": [
              {
                "answer": "Subdivides geometry for smoother surfaces",
                "right": true
              },
              {
                "answer": "Applies textures",
                "right": false
              },
              {
                "answer": "Handles lighting",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ShaderLab' define in Unity?",
            "short_title": "ShaderLab",
            "answers": [
              {
                "answer": "A high-level language for shader structure",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'RenderQueue' in Unity shaders?",
            "short_title": "RenderQueue",
            "answers": [
              {
                "answer": "Controls the order of object rendering",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Shader.PropertyToID()' do in Unity?",
            "short_title": "Shader.PropertyToID()",
            "answers": [
              {
                "answer": "Converts a shader property name to an integer ID",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Variant Collection' in Unity?",
            "short_title": "Shader Variant Collection",
            "answers": [
              {
                "answer": "Preloads specific shader variants for performance",
                "right": true
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Depth Buffer' control in Unity shaders?",
            "short_title": "Depth Buffer",
            "answers": [
              {
                "answer": "Determines rendering order based on distance",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          }
        ],
        "UI": [
          {
            "title": "What is the purpose of the Canvas Scaler in Unity?",
            "short_title": "Canvas Scaler",
            "answers": [
              {
                "answer": "Adjusts UI scale based on screen resolution",
                "right": true
              },
              {
                "answer": "Renders 3D objects",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the EventSystem do in Unity UI?",
            "short_title": "EventSystem purpose",
            "answers": [
              {
                "answer": "Handles input events for UI interaction",
                "right": true
              },
              {
                "answer": "Renders UI graphics",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes performance",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Graphic Raycaster?",
            "short_title": "Graphic Raycaster",
            "answers": [
              {
                "answer": "Detects UI elements under a pointer",
                "right": true
              },
              {
                "answer": "Renders 3D models",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Layout Group do in Unity UI?",
            "short_title": "Layout Group",
            "answers": [
              {
                "answer": "Automatically arranges UI elements",
                "right": true
              },
              {
                "answer": "Renders 3D objects",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CanvasGroup' do in Unity UI?",
            "short_title": "CanvasGroup",
            "answers": [
              {
                "answer": "Controls visibility and interaction of UI groups",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UIElements' in Unity?",
            "short_title": "UIElements",
            "answers": [
              {
                "answer": "Provides a retained-mode UI system for Editor and runtime",
                "right": true
              },
              {
                "answer": "Renders 3D objects",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'RectTransformUtility' do in Unity?",
            "short_title": "RectTransformUtility",
            "answers": [
              {
                "answer": "Helper methods for RectTransform calculations",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Selectable' in Unity UI?",
            "short_title": "Selectable",
            "answers": [
              {
                "answer": "Base class for interactive UI elements",
                "right": true
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ],
        "Animation": [
          {
            "title": "What is the purpose of an Avatar in Unity?",
            "short_title": "Avatar purpose",
            "answers": [
              {
                "answer": "Maps animations to a humanoid rig",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does Animator.CrossFade() do in Unity?",
            "short_title": "Animator.CrossFade()",
            "answers": [
              {
                "answer": "Smoothly transitions between animation states",
                "right": true
              },
              {
                "answer": "Stops an animation",
                "right": false
              },
              {
                "answer": "Reloads the scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the AnimationCurve class in Unity?",
            "short_title": "AnimationCurve purpose",
            "answers": [
              {
                "answer": "Defines custom interpolation for properties over time",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does Animator.SetTrigger() do in Unity?",
            "short_title": "Animator.SetTrigger()",
            "answers": [
              {
                "answer": "Triggers a transition in the Animator state machine",
                "right": true
              },
              {
                "answer": "Stops an animation",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AnimationPlayable' do in Unity?",
            "short_title": "AnimationPlayable",
            "answers": [
              {
                "answer": "Manages animation clips in a PlayableGraph",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AnimatorControllerPlayable' in Unity?",
            "short_title": "AnimatorControllerPlayable",
            "answers": [
              {
                "answer": "Integrates Animator Controllers into PlayableGraph",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AnimationClipPlayable' allow in Unity?",
            "short_title": "AnimationClipPlayable",
            "answers": [
              {
                "answer": "Controls a single animation clip in a Playable",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles shaders",
                "right": false
              }
            ]
          }
        ],
        "Asset Management": [
          {
            "title": "What is the benefit of using AssetPostprocessor in Unity?",
            "short_title": "AssetPostprocessor benefit",
            "answers": [
              {
                "answer": "Customizes asset import settings",
                "right": true
              },
              {
                "answer": "Optimizes physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the AssetDatabase class do in Unity?",
            "short_title": "AssetDatabase purpose",
            "answers": [
              {
                "answer": "Manages and manipulates assets in the Editor",
                "right": true
              },
              {
                "answer": "Loads scenes",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AssetBundle.Unload' in Unity?",
            "short_title": "AssetBundle.Unload",
            "answers": [
              {
                "answer": "Frees memory by unloading an AssetBundle",
                "right": true
              },
              {
                "answer": "Loads a new bundle",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorBuildSettings' do in Unity?",
            "short_title": "EditorBuildSettings",
            "answers": [
              {
                "answer": "Configures scenes for the build process",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AssetImporter' in Unity?",
            "short_title": "AssetImporter",
            "answers": [
              {
                "answer": "Base class for custom asset import logic",
                "right": true
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.LoadAssetAsync()' do in Unity?",
            "short_title": "LoadAssetAsync()",
            "answers": [
              {
                "answer": "Loads an asset asynchronously by address",
                "right": true
              },
              {
                "answer": "Unloads an asset",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          }
        ],
        "Input System": [
          {
            "title": "What is an Input Action in Unity’s new Input System?",
            "short_title": "Input Action",
            "answers": [
              {
                "answer": "A configurable binding for input events",
                "right": true
              },
              {
                "answer": "A physics tool",
                "right": false
              },
              {
                "answer": "A shader property",
                "right": false
              },
              {
                "answer": "A UI element",
                "right": false
              }
            ]
          },
          {
            "title": "What does the PlayerInput component do in Unity?",
            "short_title": "PlayerInput purpose",
            "answers": [
              {
                "answer": "Connects input actions to game logic",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Input Action Maps in Unity?",
            "short_title": "Input Action Maps",
            "answers": [
              {
                "answer": "Groups related input actions for different contexts",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputDevice' represent in Unity’s new Input System?",
            "short_title": "InputDevice",
            "answers": [
              {
                "answer": "A physical input device like a keyboard or controller",
                "right": true
              },
              {
                "answer": "A UI element",
                "right": false
              },
              {
                "answer": "A physics component",
                "right": false
              },
              {
                "answer": "A shader property",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputActionAsset' in Unity?",
            "short_title": "InputActionAsset",
            "answers": [
              {
                "answer": "Stores a collection of input actions and maps",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.QueueDeltaStateEvent()' do in Unity?",
            "short_title": "QueueDeltaStateEvent()",
            "answers": [
              {
                "answer": "Queues a state change for an input device",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          }
        ],
        "Audio": [
          {
            "title": "What is the purpose of the Audio Mixer in Unity?",
            "short_title": "Audio Mixer purpose",
            "answers": [
              {
                "answer": "Controls and mixes multiple audio sources",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Audio Effect component do in Unity?",
            "short_title": "Audio Effect",
            "answers": [
              {
                "answer": "Applies effects like reverb or distortion to audio",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Audio Mixer Snapshots?",
            "short_title": "Audio Mixer Snapshots",
            "answers": [
              {
                "answer": "Stores audio settings for smooth transitions",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.PlayScheduled()' do in Unity?",
            "short_title": "PlayScheduled()",
            "answers": [
              {
                "answer": "Plays audio at a specific time",
                "right": true
              },
              {
                "answer": "Stops audio",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSettings.dspTime' in Unity?",
            "short_title": "dspTime",
            "answers": [
              {
                "answer": "Provides the current audio processing time",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioMixer.SetFloat()' do in Unity?",
            "short_title": "SetFloat()",
            "answers": [
              {
                "answer": "Sets an exposed parameter value in the mixer",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ],
        "Physics": [
          {
            "title": "What is the purpose of the Physics Material in Unity?",
            "short_title": "Physics Material",
            "answers": [
              {
                "answer": "Defines friction and bounciness for colliders",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does Rigidbody Constraints do in Unity?",
            "short_title": "Rigidbody Constraints",
            "answers": [
              {
                "answer": "Limits movement or rotation of a Rigidbody",
                "right": true
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Loads assets",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Physics.OverlapSphere() in Unity?",
            "short_title": "Physics.OverlapSphere()",
            "answers": [
              {
                "answer": "Detects colliders within a spherical area",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.AddForceAtPosition()' do in Unity?",
            "short_title": "AddForceAtPosition()",
            "answers": [
              {
                "answer": "Applies a force at a specific point in 2D",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics2D.gravity' in Unity?",
            "short_title": "Physics2D.gravity",
            "answers": [
              {
                "answer": "Sets the global gravity vector for 2D physics",
                "right": true
              },
              {
                "answer": "Handles UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Joint2D' do in Unity?",
            "short_title": "Joint2D",
            "answers": [
              {
                "answer": "Connects two 2D rigidbodies with constraints",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles physics in 3D",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          }
        ],
        "Networking": [
          {
            "title": "What is the purpose of Unity Netcode for GameObjects?",
            "short_title": "Netcode purpose",
            "answers": [
              {
                "answer": "To synchronize GameObjects across a network",
                "right": true
              },
              {
                "answer": "To render UI",
                "right": false
              },
              {
                "answer": "To manage physics",
                "right": false
              },
              {
                "answer": "To optimize shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the NetworkBehaviour class do in Unity?",
            "short_title": "NetworkBehaviour",
            "answers": [
              {
                "answer": "Provides networked functionality for scripts",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Network Variable in Unity Netcode?",
            "short_title": "Network Variable",
            "answers": [
              {
                "answer": "A variable synchronized across the network",
                "right": true
              },
              {
                "answer": "A local physics variable",
                "right": false
              },
              {
                "answer": "A UI property",
                "right": false
              },
              {
                "answer": "A shader parameter",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NetworkTransform' do in Unity Netcode?",
            "short_title": "NetworkTransform",
            "answers": [
              {
                "answer": "Synchronizes Transform data over the network",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NetworkObject' in Unity Netcode?",
            "short_title": "NetworkObject",
            "answers": [
              {
                "answer": "Represents a networked GameObject",
                "right": true
              },
              {
                "answer": "Handles UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Creates animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ServerRpc' attribute do in Unity Netcode?",
            "short_title": "ServerRpc",
            "answers": [
              {
                "answer": "Marks a method to be called on the server",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ],
        "Debugging": [
          {
            "title": "What does the Unity Profiler’s Deep Profile mode do?",
            "short_title": "Deep Profile",
            "answers": [
              {
                "answer": "Provides detailed call stack performance data",
                "right": true
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of Debug.LogException() in Unity?",
            "short_title": "Debug.LogException",
            "answers": [
              {
                "answer": "Logs an exception with stack trace details",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Frame Debugger do in Unity?",
            "short_title": "Frame Debugger",
            "answers": [
              {
                "answer": "Analyzes rendering steps for a single frame",
                "right": true
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Debug.DrawRay()' do in Unity?",
            "short_title": "Debug.DrawRay()",
            "answers": [
              {
                "answer": "Visualizes a ray in the Scene view",
                "right": true
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Creates shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Profiler.BeginSample()' in Unity?",
            "short_title": "BeginSample()",
            "answers": [
              {
                "answer": "Marks the start of a custom profiling block",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Debug.Assert()' do in Unity?",
            "short_title": "Debug.Assert()",
            "answers": [
              {
                "answer": "Logs an error if a condition fails",
                "right": true
              },
              {
                "answer": "Handles UI",
                "right": false
              },
              {
                "answer": "Manages shaders",
                "right": false
              },
              {
                "answer": "Optimizes memory",
                "right": false
              }
            ]
          }
        ]
      }
    },
    {
      "rank": "Middle+",
      "subjects": {
        "Advanced Rendering Techniques": [
          {
            "title": "What is the primary purpose of the Universal Render Pipeline (URP) in Unity?",
            "short_title": "URP purpose",
            "answers": [
              {
                "answer": "Optimized rendering for a wide range of platforms",
                "right": true
              },
              {
                "answer": "High-end cinematic rendering only",
                "right": false
              },
              {
                "answer": "Physics simulation",
                "right": false
              },
              {
                "answer": "Audio processing",
                "right": false
              }
            ]
          },
          {
            "title": "What does the High Definition Render Pipeline (HDRP) focus on in Unity?",
            "short_title": "HDRP focus",
            "answers": [
              {
                "answer": "High-fidelity visuals for modern hardware",
                "right": true
              },
              {
                "answer": "Low-end mobile performance",
                "right": false
              },
              {
                "answer": "2D rendering only",
                "right": false
              },
              {
                "answer": "Physics-based rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is a Shader Graph used for in Unity?",
            "short_title": "Shader Graph",
            "answers": [
              {
                "answer": "Creating shaders visually without code",
                "right": true
              },
              {
                "answer": "Writing physics simulations",
                "right": false
              },
              {
                "answer": "Managing animation states",
                "right": false
              },
              {
                "answer": "Rendering UI elements",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Dynamic Batching' do in Unity’s rendering system?",
            "short_title": "Dynamic Batching",
            "answers": [
              {
                "answer": "Combines draw calls for moving objects with shared materials",
                "right": true
              },
              {
                "answer": "Precomputes lighting",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Static Batching' in Unity?",
            "short_title": "Static Batching",
            "answers": [
              {
                "answer": "Combines static objects into a single draw call",
                "right": true
              },
              {
                "answer": "Handles dynamic objects",
                "right": false
              },
              {
                "answer": "Improves physics performance",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'Post-Processing Stack' add to Unity rendering?",
            "short_title": "Post-Processing Stack",
            "answers": [
              {
                "answer": "Effects like bloom and color grading after rendering",
                "right": true
              },
              {
                "answer": "Physics calculations",
                "right": false
              },
              {
                "answer": "Real-time shadows",
                "right": false
              },
              {
                "answer": "Audio effects",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Render Texture' used for in Unity?",
            "short_title": "Render Texture",
            "answers": [
              {
                "answer": "Captures rendering output for effects or display",
                "right": true
              },
              {
                "answer": "Stores physics data",
                "right": false
              },
              {
                "answer": "Manages animation frames",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Shader Replacement' allow in Unity?",
            "short_title": "Shader Replacement",
            "answers": [
              {
                "answer": "Overrides shaders for specific rendering effects",
                "right": true
              },
              {
                "answer": "Changes physics properties",
                "right": false
              },
              {
                "answer": "Renders UI only",
                "right": false
              },
              {
                "answer": "Optimizes animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Camera.Render()' in Unity?",
            "short_title": "Camera.Render()",
            "answers": [
              {
                "answer": "Manually forces a camera to render",
                "right": true
              },
              {
                "answer": "Moves the camera",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              },
              {
                "answer": "Changes physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Light Probe Groups' improve in Unity rendering?",
            "short_title": "Light Probe Groups",
            "answers": [
              {
                "answer": "Dynamic object lighting with baked data",
                "right": true
              },
              {
                "answer": "Physics accuracy",
                "right": false
              },
              {
                "answer": "UI rendering",
                "right": false
              },
              {
                "answer": "Animation playback",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'Reflection Probes' in Unity?",
            "short_title": "Reflection Probes",
            "answers": [
              {
                "answer": "Captures environment reflections for objects",
                "right": true
              },
              {
                "answer": "Handles physics reflections",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              },
              {
                "answer": "Manages audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Shader.SetGlobalTexture()' do in Unity?",
            "short_title": "SetGlobalTexture",
            "answers": [
              {
                "answer": "Sets a texture accessible to all shaders",
                "right": true
              },
              {
                "answer": "Changes a single material",
                "right": false
              },
              {
                "answer": "Renders a new frame",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is 'GPU Instancing' in Unity used for?",
            "short_title": "GPU Instancing",
            "answers": [
              {
                "answer": "Renders multiple identical objects with one draw call",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Handles audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Render Pipeline Asset' configure in Unity?",
            "short_title": "Render Pipeline Asset",
            "answers": [
              {
                "answer": "Settings for URP or HDRP rendering",
                "right": true
              },
              {
                "answer": "Physics properties",
                "right": false
              },
              {
                "answer": "Animation states",
                "right": false
              },
              {
                "answer": "Input bindings",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Occlusion Culling' in Unity?",
            "short_title": "Occlusion Culling",
            "answers": [
              {
                "answer": "Hides objects not visible to the camera",
                "right": true
              },
              {
                "answer": "Renders all objects",
                "right": false
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Shader Variant Collection' optimize in Unity?",
            "short_title": "Shader Variant Collection",
            "answers": [
              {
                "answer": "Preloads shader variants to reduce runtime compilation",
                "right": true
              },
              {
                "answer": "Handles physics variants",
                "right": false
              },
              {
                "answer": "Renders UI faster",
                "right": false
              },
              {
                "answer": "Improves animation",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Depth Buffer' used for in Unity rendering?",
            "short_title": "Depth Buffer",
            "answers": [
              {
                "answer": "Determines object draw order based on distance",
                "right": true
              },
              {
                "answer": "Stores physics data",
                "right": false
              },
              {
                "answer": "Manages audio",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Camera.targetTexture' do in Unity?",
            "short_title": "targetTexture",
            "answers": [
              {
                "answer": "Renders the camera output to a Render Texture",
                "right": true
              },
              {
                "answer": "Changes the camera position",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Feature Directives' in Unity?",
            "short_title": "Shader Feature Directives",
            "answers": [
              {
                "answer": "Enable conditional shader compilation",
                "right": true
              },
              {
                "answer": "Render UI elements",
                "right": false
              },
              {
                "answer": "Manage physics",
                "right": false
              },
              {
                "answer": "Optimize animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Graphics.Blit()' do in Unity?",
            "short_title": "Graphics.Blit()",
            "answers": [
              {
                "answer": "Copies a source texture to a destination with a shader",
                "right": true
              },
              {
                "answer": "Moves an object",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          }
        ],
        "Physics Simulation and Optimization": [
          {
            "title": "What does 'Physics.Simulate()' allow in Unity?",
            "short_title": "Physics.Simulate()",
            "answers": [
              {
                "answer": "Manually steps the physics simulation",
                "right": true
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.autoSimulation' in Unity?",
            "short_title": "autoSimulation",
            "answers": [
              {
                "answer": "Enables or disables automatic physics updates",
                "right": true
              },
              {
                "answer": "Controls rendering",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              },
              {
                "answer": "Optimizes shaders",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.solverIterations' affect in Unity?",
            "short_title": "solverIterations",
            "answers": [
              {
                "answer": "The accuracy of physics calculations",
                "right": true
              },
              {
                "answer": "The object’s render quality",
                "right": false
              },
              {
                "answer": "The animation speed",
                "right": false
              },
              {
                "answer": "The input response",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'Physics.OverlapSphereNonAlloc()' over 'Physics.OverlapSphere()'?",
            "short_title": "OverlapSphereNonAlloc",
            "answers": [
              {
                "answer": "Reduces memory allocations by reusing an array",
                "right": true
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Renders objects faster",
                "right": false
              },
              {
                "answer": "Stops collisions",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.MovePosition()' do differently from setting 'position' directly?",
            "short_title": "MovePosition vs position",
            "answers": [
              {
                "answer": "Moves with physics interpolation",
                "right": true
              },
              {
                "answer": "Teleports instantly without physics",
                "right": false
              },
              {
                "answer": "Changes rotation",
                "right": false
              },
              {
                "answer": "Stops movement",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics2D.Simulate()' in Unity?",
            "short_title": "Physics2D.Simulate()",
            "answers": [
              {
                "answer": "Manually steps the 2D physics simulation",
                "right": true
              },
              {
                "answer": "Renders 2D graphics",
                "right": false
              },
              {
                "answer": "Handles 3D physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.velocity' control in Unity?",
            "short_title": "Rigidbody2D.velocity",
            "answers": [
              {
                "answer": "The 2D speed and direction of movement",
                "right": true
              },
              {
                "answer": "The object’s rotation",
                "right": false
              },
              {
                "answer": "The rendering quality",
                "right": false
              },
              {
                "answer": "The animation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of using 'Physics.RaycastNonAlloc()' in Unity?",
            "short_title": "RaycastNonAlloc",
            "answers": [
              {
                "answer": "Avoids garbage allocation with a pre-allocated array",
                "right": true
              },
              {
                "answer": "Increases raycast distance",
                "right": false
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.sleepThreshold' determine in Unity?",
            "short_title": "sleepThreshold",
            "answers": [
              {
                "answer": "When a Rigidbody goes to sleep to save performance",
                "right": true
              },
              {
                "answer": "The object’s mass",
                "right": false
              },
              {
                "answer": "The rendering order",
                "right": false
              },
              {
                "answer": "The animation duration",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Joint2D' in Unity?",
            "short_title": "Joint2D",
            "answers": [
              {
                "answer": "Connects two 2D Rigidbodies with constraints",
                "right": true
              },
              {
                "answer": "Renders joints",
                "right": false
              },
              {
                "answer": "Handles 3D physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PhysicsScene.Simulate()' allow in Unity?",
            "short_title": "PhysicsScene.Simulate()",
            "answers": [
              {
                "answer": "Runs physics in a custom scene independently",
                "right": true
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Rigidbody.interpolation' in Unity?",
            "short_title": "Rigidbody.interpolation",
            "answers": [
              {
                "answer": "Smooths movement between physics updates",
                "right": true
              },
              {
                "answer": "Increases collision accuracy",
                "right": false
              },
              {
                "answer": "Changes rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics.IgnoreLayerCollision()' do in Unity?",
            "short_title": "IgnoreLayerCollision",
            "answers": [
              {
                "answer": "Prevents collisions between two layers",
                "right": true
              },
              {
                "answer": "Stops all physics",
                "right": false
              },
              {
                "answer": "Renders layers",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'Physics.OverlapBoxNonAlloc()'?",
            "short_title": "OverlapBoxNonAlloc",
            "answers": [
              {
                "answer": "Reduces memory allocations for overlap checks",
                "right": true
              },
              {
                "answer": "Increases physics speed",
                "right": false
              },
              {
                "answer": "Renders boxes",
                "right": false
              },
              {
                "answer": "Stops collisions",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.AddForceAtPosition()' do in Unity?",
            "short_title": "AddForceAtPosition",
            "answers": [
              {
                "answer": "Applies a force at a specific point in 2D",
                "right": true
              },
              {
                "answer": "Moves the object instantly",
                "right": false
              },
              {
                "answer": "Changes rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.defaultContactOffset' in Unity?",
            "short_title": "defaultContactOffset",
            "answers": [
              {
                "answer": "Sets the minimum separation distance for collisions",
                "right": true
              },
              {
                "answer": "Controls rendering distance",
                "right": false
              },
              {
                "answer": "Manages animation speed",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Rigidbody.detectCollisions' control?",
            "short_title": "detectCollisions",
            "answers": [
              {
                "answer": "Whether the Rigidbody registers collisions",
                "right": true
              },
              {
                "answer": "The object’s rendering",
                "right": false
              },
              {
                "answer": "The animation state",
                "right": false
              },
              {
                "answer": "The physics timestep",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.sleepThreshold' in Unity?",
            "short_title": "Physics.sleepThreshold",
            "answers": [
              {
                "answer": "Global setting for when Rigidbodies sleep",
                "right": true
              },
              {
                "answer": "Controls rendering sleep",
                "right": false
              },
              {
                "answer": "Manages UI sleep",
                "right": false
              },
              {
                "answer": "Handles animation sleep",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Physics2D.IgnoreCollision()' do in Unity?",
            "short_title": "Physics2D.IgnoreCollision",
            "answers": [
              {
                "answer": "Prevents two 2D Colliders from colliding",
                "right": true
              },
              {
                "answer": "Renders 2D objects",
                "right": false
              },
              {
                "answer": "Stops 2D physics",
                "right": false
              },
              {
                "answer": "Plays animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of using 'PhysicsScene.Raycast()' over 'Physics.Raycast()'?",
            "short_title": "PhysicsScene.Raycast",
            "answers": [
              {
                "answer": "Allows raycasting in a specific physics scene",
                "right": true
              },
              {
                "answer": "Increases raycast speed",
                "right": false
              },
              {
                "answer": "Renders rays",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          }
        ],
        "C# Performance and Patterns": [
          {
            "title": "What does 'ArrayPool<T>' provide for performance in C#?",
            "short_title": "ArrayPool<T>",
            "answers": [
              {
                "answer": "Reuses arrays to reduce memory allocations",
                "right": true
              },
              {
                "answer": "Creates new arrays each time",
                "right": false
              },
              {
                "answer": "Handles threading",
                "right": false
              },
              {
                "answer": "Optimizes rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'Span<T>' in C# for Unity?",
            "short_title": "Span<T> benefit",
            "answers": [
              {
                "answer": "Efficient memory access without allocations",
                "right": true
              },
              {
                "answer": "Improved physics calculations",
                "right": false
              },
              {
                "answer": "Faster rendering",
                "right": false
              },
              {
                "answer": "Simplified animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'readonly' modifier improve in C# performance?",
            "short_title": "readonly modifier",
            "answers": [
              {
                "answer": "Prevents unnecessary copies of structs",
                "right": true
              },
              {
                "answer": "Increases allocation speed",
                "right": false
              },
              {
                "answer": "Manages threads",
                "right": false
              },
              {
                "answer": "Renders objects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Task.Run()' in C#?",
            "short_title": "Task.Run()",
            "answers": [
              {
                "answer": "Runs a method on a thread pool thread",
                "right": true
              },
              {
                "answer": "Runs a method synchronously",
                "right": false
              },
              {
                "answer": "Stops all tasks",
                "right": false
              },
              {
                "answer": "Handles rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AggressiveInlining' attribute do in C#?",
            "short_title": "AggressiveInlining",
            "answers": [
              {
                "answer": "Forces method inlining for performance",
                "right": true
              },
              {
                "answer": "Manages memory allocations",
                "right": false
              },
              {
                "answer": "Handles threading",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the performance benefit of using a 'struct' over a 'class' in Unity?",
            "short_title": "Struct vs Class",
            "answers": [
              {
                "answer": "Avoids heap allocations and GC pressure",
                "right": true
              },
              {
                "answer": "Improves rendering speed",
                "right": false
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Simplifies animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Monitor.TryEnter()' provide in C# threading?",
            "short_title": "Monitor.TryEnter()",
            "answers": [
              {
                "answer": "Attempts to acquire a lock without blocking",
                "right": true
              },
              {
                "answer": "Forces a thread to sleep",
                "right": false
              },
              {
                "answer": "Renders a frame",
                "right": false
              },
              {
                "answer": "Stops all threads",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Factory pattern in Unity?",
            "short_title": "Factory pattern",
            "answers": [
              {
                "answer": "Creates objects without exposing instantiation logic",
                "right": true
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Interlocked.CompareExchange()' do in C#?",
            "short_title": "CompareExchange",
            "answers": [
              {
                "answer": "Atomically compares and swaps values",
                "right": true
              },
              {
                "answer": "Allocates memory",
                "right": false
              },
              {
                "answer": "Stops threads",
                "right": false
              },
              {
                "answer": "Renders objects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of the Singleton pattern in Unity?",
            "short_title": "Singleton benefit",
            "answers": [
              {
                "answer": "Ensures a single instance with global access",
                "right": true
              },
              {
                "answer": "Improves physics performance",
                "right": false
              },
              {
                "answer": "Renders scenes faster",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ValueTask<T>' optimize in C#?",
            "short_title": "ValueTask<T>",
            "answers": [
              {
                "answer": "Reduces allocations for synchronous tasks",
                "right": true
              },
              {
                "answer": "Increases thread count",
                "right": false
              },
              {
                "answer": "Handles rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the Observer pattern in Unity?",
            "short_title": "Observer pattern",
            "answers": [
              {
                "answer": "Notifies objects of state changes",
                "right": true
              },
              {
                "answer": "Creates factories",
                "right": false
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Optimizes physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Parallel.ForEach()' improve in C#?",
            "short_title": "Parallel.ForEach()",
            "answers": [
              {
                "answer": "Processes collections in parallel for performance",
                "right": true
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              },
              {
                "answer": "Stops threads",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'unsafe' code in C# for Unity?",
            "short_title": "unsafe code",
            "answers": [
              {
                "answer": "Allows pointer operations for performance",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Strategy pattern enable in Unity?",
            "short_title": "Strategy pattern",
            "answers": [
              {
                "answer": "Swappable algorithms at runtime",
                "right": true
              },
              {
                "answer": "Single instance management",
                "right": false
              },
              {
                "answer": "Rendering optimization",
                "right": false
              },
              {
                "answer": "Physics simulation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Thread.VolatileRead()' ensure in C#?",
            "short_title": "VolatileRead",
            "answers": [
              {
                "answer": "Reads the latest value of a variable across threads",
                "right": true
              },
              {
                "answer": "Stops a thread",
                "right": false
              },
              {
                "answer": "Renders a frame",
                "right": false
              },
              {
                "answer": "Allocates memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the performance impact of boxing in C#?",
            "short_title": "Boxing impact",
            "answers": [
              {
                "answer": "Creates heap allocations, triggering GC",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Increases physics speed",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Command pattern facilitate in Unity?",
            "short_title": "Command pattern",
            "answers": [
              {
                "answer": "Encapsulates actions for undo/redo functionality",
                "right": true
              },
              {
                "answer": "Manages rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Optimizes audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode()' do?",
            "short_title": "GetHashCode",
            "answers": [
              {
                "answer": "Provides a stable hash code for an object",
                "right": true
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'ref' parameters in C# methods?",
            "short_title": "ref parameters",
            "answers": [
              {
                "answer": "Avoids copying large structs for performance",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles threading",
                "right": false
              },
              {
                "answer": "Stops garbage collection",
                "right": false
              }
            ]
          }
        ],
        "Animation Systems and Rigging": [
          {
            "title": "What is the purpose of 'PlayableGraph' in Unity’s animation system?",
            "short_title": "PlayableGraph",
            "answers": [
              {
                "answer": "Manages a hierarchy of playable animation assets",
                "right": true
              },
              {
                "answer": "Controls physics animations",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Handles UI animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AnimatorControllerPlayable' enable in Unity?",
            "short_title": "AnimatorControllerPlayable",
            "answers": [
              {
                "answer": "Integrates Animator Controllers into a PlayableGraph",
                "right": true
              },
              {
                "answer": "Stops all animations",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'AnimationClipPlayable' in Unity?",
            "short_title": "AnimationClipPlayable",
            "answers": [
              {
                "answer": "Allows dynamic control of a single animation clip",
                "right": true
              },
              {
                "answer": "Improves physics accuracy",
                "right": false
              },
              {
                "answer": "Renders scenes faster",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AnimatorOverrideController' do in Unity?",
            "short_title": "AnimatorOverrideController",
            "answers": [
              {
                "answer": "Swaps animation clips without changing the state machine",
                "right": true
              },
              {
                "answer": "Controls physics animations",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Manages UI transitions",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Avatar Mask' in Unity animations?",
            "short_title": "Avatar Mask",
            "answers": [
              {
                "answer": "Limits animation to specific body parts",
                "right": true
              },
              {
                "answer": "Increases animation speed",
                "right": false
              },
              {
                "answer": "Stops all animations",
                "right": false
              },
              {
                "answer": "Renders shadows",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.CrossFadeInFixedTime()' do in Unity?",
            "short_title": "CrossFadeInFixedTime",
            "answers": [
              {
                "answer": "Transitions to a state with a fixed duration",
                "right": true
              },
              {
                "answer": "Stops the current animation",
                "right": false
              },
              {
                "answer": "Changes physics",
                "right": false
              },
              {
                "answer": "Renders a frame",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'Humanoid Rig' in Unity?",
            "short_title": "Humanoid Rig",
            "answers": [
              {
                "answer": "Maps animations to a standardized humanoid skeleton",
                "right": true
              },
              {
                "answer": "Controls physics rigging",
                "right": false
              },
              {
                "answer": "Renders UI animations",
                "right": false
              },
              {
                "answer": "Manages audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetIKPosition()' do in Unity?",
            "short_title": "SetIKPosition",
            "answers": [
              {
                "answer": "Sets the position of an inverse kinematics target",
                "right": true
              },
              {
                "answer": "Stops animations",
                "right": false
              },
              {
                "answer": "Changes rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Blend Trees' in Unity Animator?",
            "short_title": "Blend Trees",
            "answers": [
              {
                "answer": "Blends multiple animations based on parameters",
                "right": true
              },
              {
                "answer": "Renders animation trees",
                "right": false
              },
              {
                "answer": "Manages physics blends",
                "right": false
              },
              {
                "answer": "Controls UI transitions",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.MatchTarget()' achieve in Unity?",
            "short_title": "MatchTarget",
            "answers": [
              {
                "answer": "Aligns an animation to a specific position or rotation",
                "right": true
              },
              {
                "answer": "Stops animation playback",
                "right": false
              },
              {
                "answer": "Renders a match",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Animation Compression' in Unity?",
            "short_title": "Animation Compression",
            "answers": [
              {
                "answer": "Reduces memory usage and improves performance",
                "right": true
              },
              {
                "answer": "Increases physics accuracy",
                "right": false
              },
              {
                "answer": "Renders animations faster",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.GetBoneTransform()' return in Unity?",
            "short_title": "GetBoneTransform",
            "answers": [
              {
                "answer": "The Transform of a specific bone in the rig",
                "right": true
              },
              {
                "answer": "The animation clip",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The physics state",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Animation Layer Sync' in Unity?",
            "short_title": "Layer Sync",
            "answers": [
              {
                "answer": "Synchronizes timing across animation layers",
                "right": true
              },
              {
                "answer": "Renders layers",
                "right": false
              },
              {
                "answer": "Manages physics layers",
                "right": false
              },
              {
                "answer": "Handles UI layers",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.Update()' do in Unity?",
            "short_title": "Animator.Update()",
            "answers": [
              {
                "answer": "Manually advances the animation by a time step",
                "right": true
              },
              {
                "answer": "Stops the animator",
                "right": false
              },
              {
                "answer": "Changes physics",
                "right": false
              },
              {
                "answer": "Renders a frame",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'Root Motion' in Unity animations?",
            "short_title": "Root Motion",
            "answers": [
              {
                "answer": "Drives object movement from the animation",
                "right": true
              },
              {
                "answer": "Controls rendering motion",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              },
              {
                "answer": "Manages physics motion",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetLayerWeight()' control in Unity?",
            "short_title": "SetLayerWeight",
            "answers": [
              {
                "answer": "The influence of an animation layer",
                "right": true
              },
              {
                "answer": "The animation speed",
                "right": false
              },
              {
                "answer": "The physics layer",
                "right": false
              },
              {
                "answer": "The rendering order",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Animation Mixer Playable' in Unity?",
            "short_title": "Animation Mixer Playable",
            "answers": [
              {
                "answer": "Blends multiple animation clips dynamically",
                "right": true
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Handles physics blending",
                "right": false
              },
              {
                "answer": "Manages UI animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.GetAnimatorTransitionInfo()' provide?",
            "short_title": "GetAnimatorTransitionInfo",
            "answers": [
              {
                "answer": "Details about the current transition state",
                "right": true
              },
              {
                "answer": "The physics state",
                "right": false
              },
              {
                "answer": "The rendering settings",
                "right": false
              },
              {
                "answer": "The input state",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Animator Culling Mode' in Unity?",
            "short_title": "Culling Mode",
            "answers": [
              {
                "answer": "Optimizes performance by skipping off-screen animations",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders animations faster",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Animator.SetIKHintPosition()' do in Unity?",
            "short_title": "SetIKHintPosition",
            "answers": [
              {
                "answer": "Sets a hint position for IK solving",
                "right": true
              },
              {
                "answer": "Changes animation speed",
                "right": false
              },
              {
                "answer": "Renders IK",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          }
        ],
        "Input System and Multi-Device Support": [
          {
            "title": "What is the primary advantage of Unity’s new Input System over the legacy Input class?",
            "short_title": "New Input System advantage",
            "answers": [
              {
                "answer": "Flexible, multi-device support with reusable actions",
                "right": true
              },
              {
                "answer": "Faster rendering",
                "right": false
              },
              {
                "answer": "Improved physics",
                "right": false
              },
              {
                "answer": "Simplified animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does an 'InputActionAsset' store in Unity’s new Input System?",
            "short_title": "InputActionAsset",
            "answers": [
              {
                "answer": "A collection of input actions and bindings",
                "right": true
              },
              {
                "answer": "Physics settings",
                "right": false
              },
              {
                "answer": "Rendering configurations",
                "right": false
              },
              {
                "answer": "Animation clips",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'PlayerInput' in Unity’s new Input System?",
            "short_title": "PlayerInput purpose",
            "answers": [
              {
                "answer": "Links input actions to game logic for a player",
                "right": true
              },
              {
                "answer": "Renders input visuals",
                "right": false
              },
              {
                "answer": "Manages physics input",
                "right": false
              },
              {
                "answer": "Handles animation input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputActionMap' organize in Unity?",
            "short_title": "InputActionMap",
            "answers": [
              {
                "answer": "Groups related input actions for specific contexts",
                "right": true
              },
              {
                "answer": "Maps physics controls",
                "right": false
              },
              {
                "answer": "Renders UI maps",
                "right": false
              },
              {
                "answer": "Controls animation states",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'InputDevice' in the new Input System?",
            "short_title": "InputDevice",
            "answers": [
              {
                "answer": "Represents a physical input device like a controller",
                "right": true
              },
              {
                "answer": "Manages rendering devices",
                "right": false
              },
              {
                "answer": "Handles physics devices",
                "right": false
              },
              {
                "answer": "Controls animation devices",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputAction.performed' callback indicate?",
            "short_title": "performed callback",
            "answers": [
              {
                "answer": "The action has been fully executed",
                "right": true
              },
              {
                "answer": "The action was canceled",
                "right": false
              },
              {
                "answer": "The action started",
                "right": false
              },
              {
                "answer": "The action failed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputSystem.onDeviceChange' in Unity?",
            "short_title": "onDeviceChange",
            "answers": [
              {
                "answer": "Notifies when devices are added or removed",
                "right": true
              },
              {
                "answer": "Renders device changes",
                "right": false
              },
              {
                "answer": "Stops device input",
                "right": false
              },
              {
                "answer": "Handles physics changes",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputAction.Bindings' allow in Unity?",
            "short_title": "Bindings",
            "answers": [
              {
                "answer": "Configures multiple input sources for an action",
                "right": true
              },
              {
                "answer": "Renders input visuals",
                "right": false
              },
              {
                "answer": "Manages physics bindings",
                "right": false
              },
              {
                "answer": "Controls animation bindings",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'InputControlPath' in the new Input System?",
            "short_title": "InputControlPath",
            "answers": [
              {
                "answer": "Matches specific controls across devices",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.QueueStateEvent()' do in Unity?",
            "short_title": "QueueStateEvent",
            "answers": [
              {
                "answer": "Queues a custom state change for an input device",
                "right": true
              },
              {
                "answer": "Renders a state",
                "right": false
              },
              {
                "answer": "Stops input",
                "right": false
              },
              {
                "answer": "Manages physics states",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputAction.Rebind()' in Unity?",
            "short_title": "Rebind()",
            "answers": [
              {
                "answer": "Dynamically changes an action’s binding at runtime",
                "right": true
              },
              {
                "answer": "Rebinds physics controls",
                "right": false
              },
              {
                "answer": "Renders input UI",
                "right": false
              },
              {
                "answer": "Handles animation rebinding",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerInputManager' manage in Unity?",
            "short_title": "PlayerInputManager",
            "answers": [
              {
                "answer": "Multiplayer input and player joining",
                "right": true
              },
              {
                "answer": "Single-player rendering",
                "right": false
              },
              {
                "answer": "Physics simulation",
                "right": false
              },
              {
                "answer": "Animation states",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'InputActionPhase' in the new Input System?",
            "short_title": "InputActionPhase",
            "answers": [
              {
                "answer": "Tracks the current stage of an action (e.g., started, performed)",
                "right": true
              },
              {
                "answer": "Controls rendering phases",
                "right": false
              },
              {
                "answer": "Manages physics phases",
                "right": false
              },
              {
                "answer": "Handles animation phases",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.GetDevice()' allow in Unity?",
            "short_title": "GetDevice",
            "answers": [
              {
                "answer": "Retrieves a specific input device by type",
                "right": true
              },
              {
                "answer": "Renders device visuals",
                "right": false
              },
              {
                "answer": "Stops device input",
                "right": false
              },
              {
                "answer": "Controls physics devices",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputAction.CallbackContext' in Unity?",
            "short_title": "CallbackContext",
            "answers": [
              {
                "answer": "Provides details about the action’s execution",
                "right": true
              },
              {
                "answer": "Handles physics callbacks",
                "right": false
              },
              {
                "answer": "Renders input",
                "right": false
              },
              {
                "answer": "Manages animation callbacks",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.settings' configure in Unity?",
            "short_title": "InputSystem.settings",
            "answers": [
              {
                "answer": "Global input system behaviors like update mode",
                "right": true
              },
              {
                "answer": "Rendering settings",
                "right": false
              },
              {
                "answer": "Physics settings",
                "right": false
              },
              {
                "answer": "Animation settings",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'InputAction.interactions' in Unity?",
            "short_title": "Interactions",
            "answers": [
              {
                "answer": "Customizes how input triggers (e.g., hold, tap)",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'InputSystem.onActionChange' monitor in Unity?",
            "short_title": "onActionChange",
            "answers": [
              {
                "answer": "Changes in action states or bindings",
                "right": true
              },
              {
                "answer": "Rendering changes",
                "right": false
              },
              {
                "answer": "Physics updates",
                "right": false
              },
              {
                "answer": "Animation transitions",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'InputControlScheme' in the new Input System?",
            "short_title": "InputControlScheme",
            "answers": [
              {
                "answer": "Defines device-specific control layouts",
                "right": true
              },
              {
                "answer": "Controls rendering schemes",
                "right": false
              },
              {
                "answer": "Manages physics schemes",
                "right": false
              },
              {
                "answer": "Handles animation schemes",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'PlayerInput.Instantiate()' do in Unity?",
            "short_title": "PlayerInput.Instantiate",
            "answers": [
              {
                "answer": "Creates a new player with input configuration",
                "right": true
              },
              {
                "answer": "Renders a player",
                "right": false
              },
              {
                "answer": "Stops input",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          }
        ],
        "Memory Management and Profiling": [
          {
            "title": "What does 'System.Buffers.ArrayPool<T>' optimize in Unity?",
            "short_title": "ArrayPool<T>",
            "answers": [
              {
                "answer": "Reduces garbage by reusing arrays",
                "right": true
              },
              {
                "answer": "Improves rendering speed",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'GC.TryStartNoGCRegion()' in C#?",
            "short_title": "TryStartNoGCRegion",
            "answers": [
              {
                "answer": "Prevents GC during critical operations",
                "right": true
              },
              {
                "answer": "Forces immediate GC",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does the Unity Profiler’s 'Memory' tab analyze?",
            "short_title": "Memory tab",
            "answers": [
              {
                "answer": "Heap allocations and object references",
                "right": true
              },
              {
                "answer": "Physics performance",
                "right": false
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Animation states",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Object Pooling' in Unity?",
            "short_title": "Object Pooling",
            "answers": [
              {
                "answer": "Minimizes allocations by reusing objects",
                "right": true
              },
              {
                "answer": "Improves physics accuracy",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'System.GC.AddMemoryPressure()' indicate in C#?",
            "short_title": "AddMemoryPressure",
            "answers": [
              {
                "answer": "Hints to the GC about external memory usage",
                "right": true
              },
              {
                "answer": "Forces rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'Deep Profile' mode in Unity Profiler?",
            "short_title": "Deep Profile",
            "answers": [
              {
                "answer": "Provides detailed call stack data",
                "right": true
              },
              {
                "answer": "Renders profiles",
                "right": false
              },
              {
                "answer": "Handles physics profiling",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'StructLayoutAttribute' optimize in C#?",
            "short_title": "StructLayoutAttribute",
            "answers": [
              {
                "answer": "Controls memory layout for interop or performance",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the impact of 'boxing' in Unity’s performance?",
            "short_title": "Boxing impact",
            "answers": [
              {
                "answer": "Generates heap allocations and GC pressure",
                "right": true
              },
              {
                "answer": "Improves physics speed",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'MemoryProfiler' package provide in Unity?",
            "short_title": "MemoryProfiler",
            "answers": [
              {
                "answer": "Detailed memory snapshots and leak detection",
                "right": true
              },
              {
                "answer": "Physics optimization",
                "right": false
              },
              {
                "answer": "Rendering analysis",
                "right": false
              },
              {
                "answer": "Animation profiling",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'WeakReference' in C#?",
            "short_title": "WeakReference",
            "answers": [
              {
                "answer": "Allows GC to collect an object while referenced",
                "right": true
              },
              {
                "answer": "Forces memory allocation",
                "right": false
              },
              {
                "answer": "Renders weak objects",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.Release()' do in Unity?",
            "short_title": "Addressables.Release()",
            "answers": [
              {
                "answer": "Frees memory by releasing an asset",
                "right": true
              },
              {
                "answer": "Loads an asset",
                "right": false
              },
              {
                "answer": "Renders an asset",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'NativeArray<T>' in Unity?",
            "short_title": "NativeArray<T>",
            "answers": [
              {
                "answer": "Unmanaged memory for high-performance tasks",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GC.GetTotalMemory()' return in C#?",
            "short_title": "GetTotalMemory",
            "answers": [
              {
                "answer": "Approximate bytes allocated in managed memory",
                "right": true
              },
              {
                "answer": "Physics memory usage",
                "right": false
              },
              {
                "answer": "Rendering memory",
                "right": false
              },
              {
                "answer": "Animation memory",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ProfilerMarker' in Unity?",
            "short_title": "ProfilerMarker",
            "answers": [
              {
                "answer": "Marks custom code sections for profiling",
                "right": true
              },
              {
                "answer": "Renders markers",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetBundle.Unload(true)' do in Unity?",
            "short_title": "AssetBundle.Unload(true)",
            "answers": [
              {
                "answer": "Unloads the bundle and all loaded assets",
                "right": true
              },
              {
                "answer": "Loads a new bundle",
                "right": false
              },
              {
                "answer": "Renders assets",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'stackalloc' in C# for Unity?",
            "short_title": "stackalloc",
            "answers": [
              {
                "answer": "Allocates memory on the stack, avoiding GC",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UnityEngine.Profiling.Profiler' provide?",
            "short_title": "Unity Profiler",
            "answers": [
              {
                "answer": "Low-level profiling for performance analysis",
                "right": true
              },
              {
                "answer": "Rendering controls",
                "right": false
              },
              {
                "answer": "Physics management",
                "right": false
              },
              {
                "answer": "Animation tools",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Resources.UnloadUnusedAssets()' in Unity?",
            "short_title": "UnloadUnusedAssets",
            "answers": [
              {
                "answer": "Frees memory by unloading unused Resources",
                "right": true
              },
              {
                "answer": "Loads new assets",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'MemoryStream' optimize in C#?",
            "short_title": "MemoryStream",
            "answers": [
              {
                "answer": "In-memory data manipulation without allocations",
                "right": true
              },
              {
                "answer": "Physics streaming",
                "right": false
              },
              {
                "answer": "Rendering streams",
                "right": false
              },
              {
                "answer": "Animation streaming",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'StructLayout.Sequential' in Unity?",
            "short_title": "StructLayout.Sequential",
            "answers": [
              {
                "answer": "Ensures predictable memory layout for optimization",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops GC",
                "right": false
              }
            ]
          }
        ],
        "Scene Management and Load Optimization": [
          {
            "title": "What does 'SceneManager.LoadSceneAsync()' do in Unity?",
            "short_title": "LoadSceneAsync",
            "answers": [
              {
                "answer": "Loads a scene asynchronously in the background",
                "right": true
              },
              {
                "answer": "Loads a scene synchronously",
                "right": false
              },
              {
                "answer": "Unloads a scene",
                "right": false
              },
              {
                "answer": "Renders a scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'LoadSceneMode.Additive' in Unity?",
            "short_title": "Additive mode",
            "answers": [
              {
                "answer": "Loads a scene alongside the current one",
                "right": true
              },
              {
                "answer": "Replaces the current scene",
                "right": false
              },
              {
                "answer": "Stops scene loading",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.UnloadSceneAsync()' achieve in Unity?",
            "short_title": "UnloadSceneAsync",
            "answers": [
              {
                "answer": "Unloads a scene asynchronously to free memory",
                "right": true
              },
              {
                "answer": "Loads a new scene",
                "right": false
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'AsyncOperation' with scene loading?",
            "short_title": "AsyncOperation",
            "answers": [
              {
                "answer": "Provides control and progress tracking for loading",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders scenes faster",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.GetActiveScene()' return in Unity?",
            "short_title": "GetActiveScene",
            "answers": [
              {
                "answer": "The currently active scene",
                "right": true
              },
              {
                "answer": "All loaded scenes",
                "right": false
              },
              {
                "answer": "The physics scene",
                "right": false
              },
              {
                "answer": "The rendering scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SceneManager.sceneLoaded' delegate?",
            "short_title": "sceneLoaded",
            "answers": [
              {
                "answer": "Notifies when a scene finishes loading",
                "right": true
              },
              {
                "answer": "Stops scene loading",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'LoadSceneMode.Single' do in Unity?",
            "short_title": "Single mode",
            "answers": [
              {
                "answer": "Replaces all loaded scenes with a new one",
                "right": true
              },
              {
                "answer": "Adds a scene to the current ones",
                "right": false
              },
              {
                "answer": "Unloads all scenes",
                "right": false
              },
              {
                "answer": "Pauses the scene",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'Addressables.LoadSceneAsync()' over 'SceneManager.LoadSceneAsync()'?",
            "short_title": "Addressables.LoadSceneAsync",
            "answers": [
              {
                "answer": "Loads scenes with better memory management",
                "right": true
              },
              {
                "answer": "Loads scenes faster",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.SetActiveScene()' do in Unity?",
            "short_title": "SetActiveScene",
            "answers": [
              {
                "answer": "Sets the primary scene for rendering and updates",
                "right": true
              },
              {
                "answer": "Unloads a scene",
                "right": false
              },
              {
                "answer": "Loads a new scene",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SceneUtility.GetBuildIndexByScenePath()'?",
            "short_title": "GetBuildIndexByScenePath",
            "answers": [
              {
                "answer": "Gets the build index of a scene by its path",
                "right": true
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops scene loading",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AsyncOperation.allowSceneActivation' control?",
            "short_title": "allowSceneActivation",
            "answers": [
              {
                "answer": "Whether the loaded scene activates immediately",
                "right": true
              },
              {
                "answer": "The rendering speed",
                "right": false
              },
              {
                "answer": "The physics simulation",
                "right": false
              },
              {
                "answer": "The animation playback",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of unloading scenes in Unity?",
            "short_title": "Unloading scenes",
            "answers": [
              {
                "answer": "Frees memory and reduces resource usage",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.GetSceneAt()' return in Unity?",
            "short_title": "GetSceneAt",
            "answers": [
              {
                "answer": "A loaded scene by its index",
                "right": true
              },
              {
                "answer": "The active camera",
                "right": false
              },
              {
                "answer": "The physics settings",
                "right": false
              },
              {
                "answer": "The rendering pipeline",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SceneManager.sceneCountInBuildSettings'?",
            "short_title": "sceneCountInBuildSettings",
            "answers": [
              {
                "answer": "Returns the number of scenes in the build",
                "right": true
              },
              {
                "answer": "Counts active scenes",
                "right": false
              },
              {
                "answer": "Renders scene count",
                "right": false
              },
              {
                "answer": "Manages physics scenes",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Addressables.UnloadSceneAsync()' optimize?",
            "short_title": "UnloadSceneAsync",
            "answers": [
              {
                "answer": "Memory usage by unloading scenes and assets",
                "right": true
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Physics performance",
                "right": false
              },
              {
                "answer": "Animation playback",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'SceneManager.MoveGameObjectToScene()'?",
            "short_title": "MoveGameObjectToScene",
            "answers": [
              {
                "answer": "Transfers a GameObject to another loaded scene",
                "right": true
              },
              {
                "answer": "Renders a GameObject",
                "right": false
              },
              {
                "answer": "Stops a GameObject",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AsyncOperation.progress' indicate in Unity?",
            "short_title": "AsyncOperation.progress",
            "answers": [
              {
                "answer": "The loading progress as a value from 0 to 1",
                "right": true
              },
              {
                "answer": "The rendering progress",
                "right": false
              },
              {
                "answer": "The physics progress",
                "right": false
              },
              {
                "answer": "The animation progress",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'SceneManager.sceneUnloaded' delegate?",
            "short_title": "sceneUnloaded",
            "answers": [
              {
                "answer": "Notifies when a scene is fully unloaded",
                "right": true
              },
              {
                "answer": "Loads a scene",
                "right": false
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'SceneManager.CreateScene()' do in Unity?",
            "short_title": "CreateScene",
            "answers": [
              {
                "answer": "Creates a new scene in memory at runtime",
                "right": true
              },
              {
                "answer": "Renders a new scene",
                "right": false
              },
              {
                "answer": "Unloads a scene",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'SceneManager.LoadSceneAsync()' with priority?",
            "short_title": "LoadSceneAsync priority",
            "answers": [
              {
                "answer": "Controls loading order for multiple scenes",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders faster",
                "right": false
              },
              {
                "answer": "Stops input",
                "right": false
              }
            ]
          }
        ],
        "UI Systems and Optimization": [
          {
            "title": "What does 'Canvas.ForceUpdateCanvases()' do in Unity?",
            "short_title": "ForceUpdateCanvases",
            "answers": [
              {
                "answer": "Forces immediate UI layout recalculation",
                "right": true
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Stops UI updates",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'UIElements' in Unity?",
            "short_title": "UIElements",
            "answers": [
              {
                "answer": "Provides a retained-mode UI system for Editor and runtime",
                "right": true
              },
              {
                "answer": "Handles physics UI",
                "right": false
              },
              {
                "answer": "Renders 3D objects",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CanvasScaler' optimize in Unity UI?",
            "short_title": "CanvasScaler",
            "answers": [
              {
                "answer": "Adapts UI to different screen resolutions",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders scenes faster",
                "right": false
              },
              {
                "answer": "Stops input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'RectTransformUtility' in Unity?",
            "short_title": "RectTransformUtility",
            "answers": [
              {
                "answer": "Provides helper methods for UI positioning",
                "right": true
              },
              {
                "answer": "Handles rendering",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Optimizes animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CanvasGroup' control in Unity UI?",
            "short_title": "CanvasGroup",
            "answers": [
              {
                "answer": "Alpha, interaction, and raycast blocking for UI groups",
                "right": true
              },
              {
                "answer": "Physics groups",
                "right": false
              },
              {
                "answer": "Rendering groups",
                "right": false
              },
              {
                "answer": "Animation groups",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'GraphicRaycaster' in Unity?",
            "short_title": "GraphicRaycaster",
            "answers": [
              {
                "answer": "Detects pointer events on UI elements",
                "right": true
              },
              {
                "answer": "Renders graphics",
                "right": false
              },
              {
                "answer": "Handles physics raycasts",
                "right": false
              },
              {
                "answer": "Stops UI input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'LayoutRebuilder' do in Unity UI?",
            "short_title": "LayoutRebuilder",
            "answers": [
              {
                "answer": "Forces immediate layout updates for UI elements",
                "right": true
              },
              {
                "answer": "Renders layouts",
                "right": false
              },
              {
                "answer": "Manages physics layouts",
                "right": false
              },
              {
                "answer": "Handles animation layouts",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using 'Canvas.RenderMode.WorldSpace'?",
            "short_title": "WorldSpace mode",
            "answers": [
              {
                "answer": "Places UI in 3D space for interaction",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EventSystem' manage in Unity UI?",
            "short_title": "EventSystem",
            "answers": [
              {
                "answer": "Handles UI input events and raycasting",
                "right": true
              },
              {
                "answer": "Renders UI",
                "right": false
              },
              {
                "answer": "Controls physics events",
                "right": false
              },
              {
                "answer": "Manages animation events",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ContentSizeFitter' in Unity UI?",
            "short_title": "ContentSizeFitter",
            "answers": [
              {
                "answer": "Adjusts UI size based on content",
                "right": true
              },
              {
                "answer": "Handles physics fitting",
                "right": false
              },
              {
                "answer": "Renders content",
                "right": false
              },
              {
                "answer": "Stops UI updates",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.batchCount' indicate in Unity?",
            "short_title": "batchCount",
            "answers": [
              {
                "answer": "Number of draw calls for the Canvas",
                "right": true
              },
              {
                "answer": "Physics batch count",
                "right": false
              },
              {
                "answer": "Animation batches",
                "right": false
              },
              {
                "answer": "Input batches",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'UIElements.USS' in Unity?",
            "short_title": "USS advantage",
            "answers": [
              {
                "answer": "Styles UI with CSS-like sheets",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.pixelPerfect' optimize?",
            "short_title": "pixelPerfect",
            "answers": [
              {
                "answer": "Ensures crisp UI rendering at pixel level",
                "right": true
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Selectable' base class in Unity UI?",
            "short_title": "Selectable",
            "answers": [
              {
                "answer": "Handles interactive UI elements like buttons",
                "right": true
              },
              {
                "answer": "Renders selectable objects",
                "right": false
              },
              {
                "answer": "Controls physics",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.sortingOrder' control in Unity?",
            "short_title": "sortingOrder",
            "answers": [
              {
                "answer": "The render order of UI Canvases",
                "right": true
              },
              {
                "answer": "Physics order",
                "right": false
              },
              {
                "answer": "Animation order",
                "right": false
              },
              {
                "answer": "Input order",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'Dynamic Atlas' in Unity UI?",
            "short_title": "Dynamic Atlas",
            "answers": [
              {
                "answer": "Reduces draw calls by combining sprites",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UIElements.VisualElement' represent?",
            "short_title": "VisualElement",
            "answers": [
              {
                "answer": "A base class for all UIElements",
                "right": true
              },
              {
                "answer": "A physics element",
                "right": false
              },
              {
                "answer": "A rendering element",
                "right": false
              },
              {
                "answer": "An animation element",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'Canvas.willRenderCanvases' event do?",
            "short_title": "willRenderCanvases",
            "answers": [
              {
                "answer": "Notifies before UI rendering occurs",
                "right": true
              },
              {
                "answer": "Stops UI rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Canvas.overrideSorting' in Unity?",
            "short_title": "overrideSorting",
            "answers": [
              {
                "answer": "Allows manual control of Canvas render order",
                "right": true
              },
              {
                "answer": "Controls physics sorting",
                "right": false
              },
              {
                "answer": "Renders UI faster",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'UIElements.UXML' enable in Unity?",
            "short_title": "UXML",
            "answers": [
              {
                "answer": "Defines UI layouts with XML-like markup",
                "right": true
              },
              {
                "answer": "Handles physics layouts",
                "right": false
              },
              {
                "answer": "Renders scenes",
                "right": false
              },
              {
                "answer": "Optimizes animations",
                "right": false
              }
            ]
          }
        ],
        "Audio Systems and Effects": [
          {
            "title": "What does 'AudioMixer' manage in Unity?",
            "short_title": "AudioMixer",
            "answers": [
              {
                "answer": "Groups and mixes audio with effects",
                "right": true
              },
              {
                "answer": "Renders audio visuals",
                "right": false
              },
              {
                "answer": "Handles physics audio",
                "right": false
              },
              {
                "answer": "Manages UI sounds",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSource.spatialBlend' in Unity?",
            "short_title": "spatialBlend",
            "answers": [
              {
                "answer": "Balances between 2D and 3D audio",
                "right": true
              },
              {
                "answer": "Controls volume",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Stops playback",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioMixer.SetFloat()' do in Unity?",
            "short_title": "SetFloat",
            "answers": [
              {
                "answer": "Adjusts an exposed parameter in the mixer",
                "right": true
              },
              {
                "answer": "Sets the audio clip",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Renders effects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'AudioListener' in Unity?",
            "short_title": "AudioListener",
            "answers": [
              {
                "answer": "Receives audio from AudioSources",
                "right": true
              },
              {
                "answer": "Plays audio clips",
                "right": false
              },
              {
                "answer": "Manages physics audio",
                "right": false
              },
              {
                "answer": "Renders audio visuals",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.PlayScheduled()' achieve in Unity?",
            "short_title": "PlayScheduled",
            "answers": [
              {
                "answer": "Plays audio at a precise time",
                "right": true
              },
              {
                "answer": "Stops audio",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioMixerSnapshot' in Unity?",
            "short_title": "AudioMixerSnapshot",
            "answers": [
              {
                "answer": "Stores a set of mixer settings for transitions",
                "right": true
              },
              {
                "answer": "Captures physics audio",
                "right": false
              },
              {
                "answer": "Renders snapshots",
                "right": false
              },
              {
                "answer": "Manages UI audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.spatialize' enable in Unity?",
            "short_title": "spatialize",
            "answers": [
              {
                "answer": "Applies 3D audio processing",
                "right": true
              },
              {
                "answer": "Stops 3D audio",
                "right": false
              },
              {
                "answer": "Controls 2D audio",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'AudioClip.Create()' in Unity?",
            "short_title": "AudioClip.Create",
            "answers": [
              {
                "answer": "Generates audio data at runtime",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders audio visuals",
                "right": false
              },
              {
                "answer": "Stops playback",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSettings.dspTime' provide in Unity?",
            "short_title": "dspTime",
            "answers": [
              {
                "answer": "The current audio processing time",
                "right": true
              },
              {
                "answer": "The physics time",
                "right": false
              },
              {
                "answer": "The rendering time",
                "right": false
              },
              {
                "answer": "The animation time",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioReverbFilter' in Unity?",
            "short_title": "AudioReverbFilter",
            "answers": [
              {
                "answer": "Adds reverb effects to audio",
                "right": true
              },
              {
                "answer": "Renders reverb visuals",
                "right": false
              },
              {
                "answer": "Handles physics reverb",
                "right": false
              },
              {
                "answer": "Stops audio",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSource.PlayOneShot()' do in Unity?",
            "short_title": "PlayOneShot",
            "answers": [
              {
                "answer": "Plays a clip once without interrupting the main audio",
                "right": true
              },
              {
                "answer": "Stops the main audio",
                "right": false
              },
              {
                "answer": "Renders a shot",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'AudioMixer.TransitionToSnapshots()'?",
            "short_title": "TransitionToSnapshots",
            "answers": [
              {
                "answer": "Smoothly transitions between mixer states",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops transitions",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioLowPassFilter' do in Unity?",
            "short_title": "AudioLowPassFilter",
            "answers": [
              {
                "answer": "Reduces high frequencies in audio",
                "right": true
              },
              {
                "answer": "Increases volume",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSource.GetOutputData()'?",
            "short_title": "GetOutputData",
            "answers": [
              {
                "answer": "Retrieves processed audio samples",
                "right": true
              },
              {
                "answer": "Stops audio output",
                "right": false
              },
              {
                "answer": "Renders samples",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioMixer.FindSnapshot()' do in Unity?",
            "short_title": "FindSnapshot",
            "answers": [
              {
                "answer": "Locates a named snapshot in the mixer",
                "right": true
              },
              {
                "answer": "Creates a snapshot",
                "right": false
              },
              {
                "answer": "Renders audio",
                "right": false
              },
              {
                "answer": "Stops effects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'AudioSource.bypassEffects'?",
            "short_title": "bypassEffects",
            "answers": [
              {
                "answer": "Improves performance by skipping effects",
                "right": true
              },
              {
                "answer": "Enhances effects",
                "right": false
              },
              {
                "answer": "Renders audio faster",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioDistortionFilter' add to Unity audio?",
            "short_title": "AudioDistortionFilter",
            "answers": [
              {
                "answer": "Distorts audio with a clipping effect",
                "right": true
              },
              {
                "answer": "Improves clarity",
                "right": false
              },
              {
                "answer": "Renders distortion",
                "right": false
              },
              {
                "answer": "Stops audio",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AudioSource.GetSpectrumData()'?",
            "short_title": "GetSpectrumData",
            "answers": [
              {
                "answer": "Analyzes audio frequency spectrum",
                "right": true
              },
              {
                "answer": "Stops spectrum analysis",
                "right": false
              },
              {
                "answer": "Renders spectrum",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AudioSettings.outputSampleRate' control?",
            "short_title": "outputSampleRate",
            "answers": [
              {
                "answer": "The sample rate of audio output",
                "right": true
              },
              {
                "answer": "The physics rate",
                "right": false
              },
              {
                "answer": "The rendering rate",
                "right": false
              },
              {
                "answer": "The animation rate",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'AudioMixer.GetFloat()' in Unity?",
            "short_title": "GetFloat",
            "answers": [
              {
                "answer": "Reads mixer parameters for dynamic control",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops audio",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          }
        ],
        "AI and Pathfinding": [
          {
            "title": "What is the primary purpose of Unity’s NavMesh system?",
            "short_title": "NavMesh purpose",
            "answers": [
              {
                "answer": "Provides pathfinding on walkable surfaces",
                "right": true
              },
              {
                "answer": "Renders AI visuals",
                "right": false
              },
              {
                "answer": "Handles physics AI",
                "right": false
              },
              {
                "answer": "Manages UI navigation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent' do in Unity?",
            "short_title": "NavMeshAgent",
            "answers": [
              {
                "answer": "Controls an object’s movement along a NavMesh",
                "right": true
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Renders navigation",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NavMeshObstacle' in Unity?",
            "short_title": "NavMeshObstacle",
            "answers": [
              {
                "answer": "Dynamically carves holes in the NavMesh",
                "right": true
              },
              {
                "answer": "Renders obstacles",
                "right": false
              },
              {
                "answer": "Stops AI movement",
                "right": false
              },
              {
                "answer": "Manages physics obstacles",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.SetDestination()' do?",
            "short_title": "SetDestination",
            "answers": [
              {
                "answer": "Sets a target position for the agent to move to",
                "right": true
              },
              {
                "answer": "Stops the agent",
                "right": false
              },
              {
                "answer": "Renders a path",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'NavMeshLink' used for in Unity?",
            "short_title": "NavMeshLink",
            "answers": [
              {
                "answer": "Connects separate NavMesh areas",
                "right": true
              },
              {
                "answer": "Renders links",
                "right": false
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMesh.CalculatePath()' provide in Unity?",
            "short_title": "CalculatePath",
            "answers": [
              {
                "answer": "Computes a path between two points",
                "right": true
              },
              {
                "answer": "Renders a path",
                "right": false
              },
              {
                "answer": "Stops AI movement",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'NavMeshSurface' in Unity?",
            "short_title": "NavMeshSurface",
            "answers": [
              {
                "answer": "Defines a surface for baking a NavMesh",
                "right": true
              },
              {
                "answer": "Renders navigation surfaces",
                "right": false
              },
              {
                "answer": "Controls physics surfaces",
                "right": false
              },
              {
                "answer": "Manages UI surfaces",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.remainingDistance' indicate?",
            "short_title": "remainingDistance",
            "answers": [
              {
                "answer": "Distance left to the destination",
                "right": true
              },
              {
                "answer": "Total path length",
                "right": false
              },
              {
                "answer": "Rendering distance",
                "right": false
              },
              {
                "answer": "Physics distance",
                "right": false
              }
            ]
          },
          {
            "title": "What is a 'Behavior Tree' used for in Unity AI?",
            "short_title": "Behavior Tree",
            "answers": [
              {
                "answer": "Structures complex AI decision-making",
                "right": true
              },
              {
                "answer": "Renders AI behavior",
                "right": false
              },
              {
                "answer": "Stops AI decisions",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.speed' control?",
            "short_title": "NavMeshAgent.speed",
            "answers": [
              {
                "answer": "The maximum movement speed of the agent",
                "right": true
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Physics speed",
                "right": false
              },
              {
                "answer": "Animation speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'NavMeshAgent SamplePathPosition()'?",
            "short_title": "SamplePathPosition",
            "answers": [
              {
                "answer": "Finds a valid position on the NavMesh",
                "right": true
              },
              {
                "answer": "Renders a sample",
                "right": false
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.angularSpeed' affect?",
            "short_title": "angularSpeed",
            "answers": [
              {
                "answer": "The rotation speed of the agent",
                "right": true
              },
              {
                "answer": "Movement speed",
                "right": false
              },
              {
                "answer": "Rendering speed",
                "right": false
              },
              {
                "answer": "Physics speed",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'NavMeshAgent.autoBraking'?",
            "short_title": "autoBraking",
            "answers": [
              {
                "answer": "Slows the agent near the destination",
                "right": true
              },
              {
                "answer": "Stops rendering",
                "right": false
              },
              {
                "answer": "Increases speed",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMesh.BuildSettings' configure?",
            "short_title": "BuildSettings",
            "answers": [
              {
                "answer": "Parameters for baking a NavMesh",
                "right": true
              },
              {
                "answer": "Rendering settings",
                "right": false
              },
              {
                "answer": "Physics settings",
                "right": false
              },
              {
                "answer": "Animation settings",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Finite State Machine (FSM)' in Unity AI?",
            "short_title": "FSM",
            "answers": [
              {
                "answer": "Manages AI states with transitions",
                "right": true
              },
              {
                "answer": "Renders AI states",
                "right": false
              },
              {
                "answer": "Stops AI behavior",
                "right": false
              },
              {
                "answer": "Handles physics states",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.pathPending' indicate?",
            "short_title": "pathPending",
            "answers": [
              {
                "answer": "Whether a path is still being calculated",
                "right": true
              },
              {
                "answer": "Path rendering status",
                "right": false
              },
              {
                "answer": "Physics pending",
                "right": false
              },
              {
                "answer": "Animation pending",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'NavMeshAgent.stoppingDistance'?",
            "short_title": "stoppingDistance",
            "answers": [
              {
                "answer": "Sets how close the agent stops to the target",
                "right": true
              },
              {
                "answer": "Controls rendering distance",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.Warp()' do in Unity?",
            "short_title": "Warp",
            "answers": [
              {
                "answer": "Instantly moves the agent to a new position",
                "right": true
              },
              {
                "answer": "Renders a warp effect",
                "right": false
              },
              {
                "answer": "Stops pathfinding",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'A* Pathfinding' in Unity AI?",
            "short_title": "A* Pathfinding",
            "answers": [
              {
                "answer": "Finds the shortest path with heuristics",
                "right": true
              },
              {
                "answer": "Renders paths",
                "right": false
              },
              {
                "answer": "Stops AI movement",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'NavMeshAgent.obstacleAvoidanceType' control?",
            "short_title": "obstacleAvoidanceType",
            "answers": [
              {
                "answer": "The quality of obstacle avoidance",
                "right": true
              },
              {
                "answer": "Rendering quality",
                "right": false
              },
              {
                "answer": "Physics avoidance",
                "right": false
              },
              {
                "answer": "Animation quality",
                "right": false
              }
            ]
          }
        ],
        "Particle Systems and Visual Effects": [
          {
            "title": "What is the primary purpose of Unity’s Particle System component?",
            "short_title": "Particle System purpose",
            "answers": [
              {
                "answer": "Creates and manages particle-based visual effects",
                "right": true
              },
              {
                "answer": "Handles physics effects",
                "right": false
              },
              {
                "answer": "Renders UI effects",
                "right": false
              },
              {
                "answer": "Manages audio effects",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.Play()' do in Unity?",
            "short_title": "ParticleSystem.Play",
            "answers": [
              {
                "answer": "Starts emitting particles",
                "right": true
              },
              {
                "answer": "Stops particles",
                "right": false
              },
              {
                "answer": "Renders a scene",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'ParticleSystem.MainModule' in Unity?",
            "short_title": "MainModule",
            "answers": [
              {
                "answer": "Controls core particle properties like duration and rate",
                "right": true
              },
              {
                "answer": "Manages rendering",
                "right": false
              },
              {
                "answer": "Stops particle effects",
                "right": false
              },
              {
                "answer": "Handles animation",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.EmissionModule' configure?",
            "short_title": "EmissionModule",
            "answers": [
              {
                "answer": "The rate and timing of particle emission",
                "right": true
              },
              {
                "answer": "Particle rendering",
                "right": false
              },
              {
                "answer": "Physics behavior",
                "right": false
              },
              {
                "answer": "Animation timing",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ParticleSystem.ShapeModule' in Unity?",
            "short_title": "ShapeModule",
            "answers": [
              {
                "answer": "Defines the emission shape of particles",
                "right": true
              },
              {
                "answer": "Renders particle shapes",
                "right": false
              },
              {
                "answer": "Stops particle emission",
                "right": false
              },
              {
                "answer": "Handles physics shapes",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.SubEmittersModule' add to Unity?",
            "short_title": "SubEmittersModule",
            "answers": [
              {
                "answer": "Spawns additional particle systems on events",
                "right": true
              },
              {
                "answer": "Renders sub-effects",
                "right": false
              },
              {
                "answer": "Manages physics emitters",
                "right": false
              },
              {
                "answer": "Stops main emitters",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'ParticleSystemRenderer' in Unity?",
            "short_title": "ParticleSystemRenderer",
            "answers": [
              {
                "answer": "Customizes how particles are rendered",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Stops rendering",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.TriggerModule' do?",
            "short_title": "TriggerModule",
            "answers": [
              {
                "answer": "Interacts particles with colliders",
                "right": true
              },
              {
                "answer": "Renders triggers",
                "right": false
              },
              {
                "answer": "Stops particle triggers",
                "right": false
              },
              {
                "answer": "Manages UI triggers",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'VFX Graph' in Unity?",
            "short_title": "VFX Graph",
            "answers": [
              {
                "answer": "Creates complex visual effects with GPU power",
                "right": true
              },
              {
                "answer": "Handles physics effects",
                "right": false
              },
              {
                "answer": "Renders UI visuals",
                "right": false
              },
              {
                "answer": "Manages audio effects",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.ColorOverLifetimeModule' control?",
            "short_title": "ColorOverLifetime",
            "answers": [
              {
                "answer": "Changes particle color over their lifetime",
                "right": true
              },
              {
                "answer": "Renders lifetime color",
                "right": false
              },
              {
                "answer": "Stops color changes",
                "right": false
              },
              {
                "answer": "Handles physics color",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'ParticleSystem.NoiseModule'?",
            "short_title": "NoiseModule",
            "answers": [
              {
                "answer": "Adds noise to particle movement",
                "right": true
              },
              {
                "answer": "Renders noise",
                "right": false
              },
              {
                "answer": "Stops particle noise",
                "right": false
              },
              {
                "answer": "Manages animation noise",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.Simulate()' allow in Unity?",
            "short_title": "ParticleSystem.Simulate",
            "answers": [
              {
                "answer": "Manually advances particle simulation",
                "right": true
              },
              {
                "answer": "Renders particles",
                "right": false
              },
              {
                "answer": "Stops simulation",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'ParticleSystem.Prewarm'?",
            "short_title": "Prewarm",
            "answers": [
              {
                "answer": "Starts particles as if already running",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Stops prewarming",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VFXPropertySheet' manage in VFX Graph?",
            "short_title": "VFXPropertySheet",
            "answers": [
              {
                "answer": "Exposes parameters for runtime control",
                "right": true
              },
              {
                "answer": "Renders property sheets",
                "right": false
              },
              {
                "answer": "Manages physics properties",
                "right": false
              },
              {
                "answer": "Stops VFX",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ParticleSystemForceField' in Unity?",
            "short_title": "ParticleSystemForceField",
            "answers": [
              {
                "answer": "Applies forces to influence particle motion",
                "right": true
              },
              {
                "answer": "Renders force fields",
                "right": false
              },
              {
                "answer": "Stops particle forces",
                "right": false
              },
              {
                "answer": "Handles UI forces",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystem.TextureSheetAnimationModule' do?",
            "short_title": "TextureSheetAnimation",
            "answers": [
              {
                "answer": "Animates particles using a texture sheet",
                "right": true
              },
              {
                "answer": "Renders texture sheets",
                "right": false
              },
              {
                "answer": "Stops texture animation",
                "right": false
              },
              {
                "answer": "Manages physics animation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'ParticleSystem.Emit()'?",
            "short_title": "Emit",
            "answers": [
              {
                "answer": "Manually emits a specific number of particles",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders emissions",
                "right": false
              },
              {
                "answer": "Stops emission",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'VisualEffect' component do in Unity?",
            "short_title": "VisualEffect",
            "answers": [
              {
                "answer": "Controls VFX Graph effects in the scene",
                "right": true
              },
              {
                "answer": "Renders physics effects",
                "right": false
              },
              {
                "answer": "Manages UI effects",
                "right": false
              },
              {
                "answer": "Handles animation effects",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ParticleSystem.LimitVelocityOverLifetimeModule'?",
            "short_title": "LimitVelocityOverLifetime",
            "answers": [
              {
                "answer": "Caps particle speed over their lifetime",
                "right": true
              },
              {
                "answer": "Renders velocity",
                "right": false
              },
              {
                "answer": "Stops particle movement",
                "right": false
              },
              {
                "answer": "Handles physics velocity",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ParticleSystemRenderer.maxParticleSize' control?",
            "short_title": "maxParticleSize",
            "answers": [
              {
                "answer": "The maximum screen size of particles",
                "right": true
              },
              {
                "answer": "Physics particle size",
                "right": false
              },
              {
                "answer": "Animation size",
                "right": false
              },
              {
                "answer": "Rendering speed",
                "right": false
              }
            ]
          }
        ],
        "Scriptable Objects and Data Management": [
          {
            "title": "What is the primary purpose of a ScriptableObject in Unity?",
            "short_title": "ScriptableObject purpose",
            "answers": [
              {
                "answer": "Stores reusable data as an asset",
                "right": true
              },
              {
                "answer": "Renders data visuals",
                "right": false
              },
              {
                "answer": "Handles physics data",
                "right": false
              },
              {
                "answer": "Manages UI data",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'CreateAssetMenu' attribute do for a ScriptableObject?",
            "short_title": "CreateAssetMenu",
            "answers": [
              {
                "answer": "Adds a creation option in the Unity menu",
                "right": true
              },
              {
                "answer": "Stops asset creation",
                "right": false
              },
              {
                "answer": "Renders the asset",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using ScriptableObjects for game configuration?",
            "short_title": "Config benefit",
            "answers": [
              {
                "answer": "Centralized, editable data without code changes",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              },
              {
                "answer": "Stops physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject.CreateInstance()' do in Unity?",
            "short_title": "CreateInstance",
            "answers": [
              {
                "answer": "Creates a runtime instance of a ScriptableObject",
                "right": true
              },
              {
                "answer": "Renders an instance",
                "right": false
              },
              {
                "answer": "Stops creation",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of serializing fields in a ScriptableObject?",
            "short_title": "Serialization",
            "answers": [
              {
                "answer": "Exposes fields in the Inspector for editing",
                "right": true
              },
              {
                "answer": "Hides fields",
                "right": false
              },
              {
                "answer": "Renders data",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetDatabase.CreateAsset()' do with a ScriptableObject?",
            "short_title": "CreateAsset",
            "answers": [
              {
                "answer": "Saves a ScriptableObject as a project asset",
                "right": true
              },
              {
                "answer": "Deletes an asset",
                "right": false
              },
              {
                "answer": "Renders an asset",
                "right": false
              },
              {
                "answer": "Stops asset creation",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of using ScriptableObjects for item databases?",
            "short_title": "Item database",
            "answers": [
              {
                "answer": "Decouples data from code for easy management",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders items",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject.OnEnable()' allow in Unity?",
            "short_title": "OnEnable",
            "answers": [
              {
                "answer": "Runs initialization code when loaded",
                "right": true
              },
              {
                "answer": "Stops the object",
                "right": false
              },
              {
                "answer": "Renders the object",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'ScriptableObject.OnDestroy()'?",
            "short_title": "OnDestroy",
            "answers": [
              {
                "answer": "Cleans up when the object is destroyed",
                "right": true
              },
              {
                "answer": "Creates a new object",
                "right": false
              },
              {
                "answer": "Renders destruction",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetDatabase.LoadAssetAtPath()' do with ScriptableObjects?",
            "short_title": "LoadAssetAtPath",
            "answers": [
              {
                "answer": "Loads a ScriptableObject from a file path",
                "right": true
              },
              {
                "answer": "Unloads an asset",
                "right": false
              },
              {
                "answer": "Renders an asset",
                "right": false
              },
              {
                "answer": "Stops loading",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of using ScriptableObjects for event systems?",
            "short_title": "Event systems",
            "answers": [
              {
                "answer": "Provides a decoupled event communication system",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics events",
                "right": false
              },
              {
                "answer": "Stops events",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject.OnValidate()' do in Unity?",
            "short_title": "OnValidate",
            "answers": [
              {
                "answer": "Runs when Inspector values change",
                "right": true
              },
              {
                "answer": "Stops validation",
                "right": false
              },
              {
                "answer": "Renders changes",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'Addressables' with ScriptableObjects?",
            "short_title": "Addressables",
            "answers": [
              {
                "answer": "Loads ScriptableObjects dynamically with memory efficiency",
                "right": true
              },
              {
                "answer": "Renders addressables",
                "right": false
              },
              {
                "answer": "Stops loading",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorUtility.SetDirty()' do for ScriptableObjects?",
            "short_title": "SetDirty",
            "answers": [
              {
                "answer": "Marks the object as modified for saving",
                "right": true
              },
              {
                "answer": "Cleans the object",
                "right": false
              },
              {
                "answer": "Renders the object",
                "right": false
              },
              {
                "answer": "Stops editing",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of storing game stats in ScriptableObjects?",
            "short_title": "Game stats",
            "answers": [
              {
                "answer": "Allows easy tweaking without recompilation",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders stats",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject.OnDisable()' handle?",
            "short_title": "OnDisable",
            "answers": [
              {
                "answer": "Cleanup when the object is disabled",
                "right": true
              },
              {
                "answer": "Enables the object",
                "right": false
              },
              {
                "answer": "Renders disable state",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AssetDatabase.SaveAssets()' with ScriptableObjects?",
            "short_title": "SaveAssets",
            "answers": [
              {
                "answer": "Saves all modified assets to disk",
                "right": true
              },
              {
                "answer": "Loads assets",
                "right": false
              },
              {
                "answer": "Renders assets",
                "right": false
              },
              {
                "answer": "Stops saving",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'ScriptableObject’ as a singleton' pattern achieve?",
            "short_title": "Singleton pattern",
            "answers": [
              {
                "answer": "Ensures a single instance of data globally",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              },
              {
                "answer": "Stops data access",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'ScriptableObject’ for level data'?",
            "short_title": "Level data",
            "answers": [
              {
                "answer": "Stores level-specific data reusable across scenes",
                "right": true
              },
              {
                "answer": "Renders levels",
                "right": false
              },
              {
                "answer": "Manages physics levels",
                "right": false
              },
              {
                "answer": "Stops level loading",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetDatabase.Refresh()' do after modifying ScriptableObjects?",
            "short_title": "Refresh",
            "answers": [
              {
                "answer": "Updates the project to reflect changes",
                "right": true
              },
              {
                "answer": "Stops refreshing",
                "right": false
              },
              {
                "answer": "Renders updates",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          }
        ],
        "Build Pipeline and Deployment": [
          {
            "title": "What does 'BuildPipeline.BuildPlayer()' do in Unity?",
            "short_title": "BuildPlayer",
            "answers": [
              { "answer": "Builds the game for a target platform", "right": true },
              { "answer": "Renders the build", "right": false },
              { "answer": "Stops the build", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'BuildTarget' in Unity’s build system?",
            "short_title": "BuildTarget",
            "answers": [
              { "answer": "Specifies the platform for the build", "right": true },
              { "answer": "Sets rendering targets", "right": false },
              { "answer": "Manages physics targets", "right": false },
              { "answer": "Handles animation targets", "right": false }
            ]
          },
          {
            "title": "What does 'PlayerSettings' configure in Unity?",
            "short_title": "PlayerSettings",
            "answers": [
              { "answer": "Platform-specific build options", "right": true },
              { "answer": "Renders player visuals", "right": false },
              { "answer": "Stops builds", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What is the benefit of 'AssetBundle' in Unity deployment?",
            "short_title": "AssetBundle",
            "answers": [
              { "answer": "Packages assets for dynamic loading", "right": true },
              { "answer": "Improves physics", "right": false },
              { "answer": "Renders assets", "right": false },
              { "answer": "Stops deployment", "right": false }
            ]
          },
          {
            "title": "What does 'BuildOptions.Development' enable in Unity?",
            "short_title": "Development option",
            "answers": [
              { "answer": "Includes debug info in the build", "right": true },
              { "answer": "Optimizes for release", "right": false },
              { "answer": "Renders development visuals", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'EditorUserBuildSettings' in Unity?",
            "short_title": "EditorUserBuildSettings",
            "answers": [
              { "answer": "Stores temporary build configuration", "right": true },
              { "answer": "Renders build settings", "right": false },
              { "answer": "Stops build settings", "right": false },
              { "answer": "Manages animations", "right": false }
            ]
          },
          {
            "title": "What does 'BuildPipeline.BuildAssetBundles()' do?",
            "short_title": "BuildAssetBundles",
            "answers": [
              { "answer": "Creates AssetBundles for deployment", "right": true },
              { "answer": "Loads AssetBundles", "right": false },
              { "answer": "Renders bundles", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What is the role of 'BuildReport' in Unity?",
            "short_title": "BuildReport",
            "answers": [
              { "answer": "Provides details about the build process", "right": true },
              { "answer": "Stops the build", "right": false },
              { "answer": "Renders reports", "right": false },
              { "answer": "Manages input", "right": false }
            ]
          },
          {
            "title": "What does 'PlayerSettings.bundleVersion' set?",
            "short_title": "bundleVersion",
            "answers": [
              { "answer": "The version string for the build", "right": true },
              { "answer": "Rendering version", "right": false },
              { "answer": "Physics version", "right": false },
              { "answer": "Animation version", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'BuildOptions.CompressWithLz4'?",
            "short_title": "CompressWithLz4",
            "answers": [
              { "answer": "Reduces build size with fast decompression", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops compression", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What does 'EditorBuildSettings.scenes' configure?",
            "short_title": "EditorBuildSettings.scenes",
            "answers": [
              { "answer": "Scenes included in the build", "right": true },
              { "answer": "Rendering scenes", "right": false },
              { "answer": "Physics scenes", "right": false },
              { "answer": "Animation scenes", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'BuildTargetGroup' in Unity?",
            "short_title": "BuildTargetGroup",
            "answers": [
              { "answer": "Groups platforms for build settings", "right": true },
              { "answer": "Renders target groups", "right": false },
              { "answer": "Stops builds", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What does 'AssetBundleManifest' provide in Unity?",
            "short_title": "AssetBundleManifest",
            "answers": [
              { "answer": "Metadata about AssetBundle dependencies", "right": true },
              { "answer": "Rendering manifest", "right": false },
              { "answer": "Physics manifest", "right": false },
              { "answer": "Animation manifest", "right": false }
            ]
          },
          {
            "title": "What is the benefit of 'BuildOptions.StrictMode'?",
            "short_title": "StrictMode",
            "answers": [
              { "answer": "Fails the build on warnings for quality", "right": true },
              { "answer": "Improves physics", "right": false },
              { "answer": "Renders strictly", "right": false },
              { "answer": "Stops builds", "right": false }
            ]
          },
          {
            "title": "What does 'PlayerSettings.SetScriptingDefineSymbolsForGroup()' do?",
            "short_title": "SetScriptingDefineSymbols",
            "answers": [
              { "answer": "Sets custom defines for conditional compilation", "right": true },
              { "answer": "Renders defines", "right": false },
              { "answer": "Handles physics defines", "right": false },
              { "answer": "Stops defines", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'BuildPipeline.GetCRCForAssetBundle()'?",
            "short_title": "GetCRCForAssetBundle",
            "answers": [
              { "answer": "Calculates a checksum for an AssetBundle", "right": true },
              { "answer": "Renders CRC", "right": false },
              { "answer": "Stops builds", "right": false },
              { "answer": "Manages animations", "right": false }
            ]
          },
          {
            "title": "What does 'BuildOptions.AutoRunPlayer' do in Unity?",
            "short_title": "AutoRunPlayer",
            "answers": [
              { "answer": "Runs the build immediately after completion", "right": true },
              { "answer": "Stops the build", "right": false },
              { "answer": "Renders the player", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'Addressables' in deployment?",
            "short_title": "Addressables advantage",
            "answers": [
              { "answer": "Dynamic asset loading with version control", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Handles physics", "right": false },
              { "answer": "Stops deployment", "right": false }
            ]
          },
          {
            "title": "What does 'PlayerSettings.SetPropertyInt()' configure?",
            "short_title": "SetPropertyInt",
            "answers": [
              { "answer": "Platform-specific integer settings", "right": true },
              { "answer": "Rendering properties", "right": false },
              { "answer": "Physics properties", "right": false },
              { "answer": "Animation properties", "right": false }
            ]
          },
          {
            "title": "What does 'BuildPipeline.IsBuildTargetSupported()' check?",
            "short_title": "IsBuildTargetSupported",
            "answers": [
              { "answer": "If a platform supports the build configuration", "right": true },
              { "answer": "Rendering support", "right": false },
              { "answer": "Physics support", "right": false },
              { "answer": "Input support", "right": false }
            ]
          }
        ],
        "Editor Scripting and Tools": [
          {
            "title": "What is the primary purpose of Unity’s Editor scripting?",
            "short_title": "Editor scripting purpose",
            "answers": [
              {
                "answer": "Automates and extends the Unity Editor",
                "right": true
              },
              {
                "answer": "Renders editor visuals",
                "right": false
              },
              {
                "answer": "Handles runtime physics",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What does the 'EditorWindow' class create in Unity?",
            "short_title": "EditorWindow",
            "answers": [
              {
                "answer": "A custom window in the Unity Editor",
                "right": true
              },
              {
                "answer": "A runtime window",
                "right": false
              },
              {
                "answer": "A physics window",
                "right": false
              },
              {
                "answer": "An animation window",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of the 'MenuItem' attribute in Unity?",
            "short_title": "MenuItem",
            "answers": [
              {
                "answer": "Adds a custom menu option in the Editor",
                "right": true
              },
              {
                "answer": "Stops menu creation",
                "right": false
              },
              {
                "answer": "Renders menu visuals",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorUtility.DisplayDialog()' do in Unity?",
            "short_title": "DisplayDialog",
            "answers": [
              {
                "answer": "Shows a dialog box in the Editor",
                "right": true
              },
              {
                "answer": "Renders a dialog",
                "right": false
              },
              {
                "answer": "Stops dialogs",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'CustomEditor' attribute in Unity?",
            "short_title": "CustomEditor",
            "answers": [
              {
                "answer": "Creates a custom Inspector for a script",
                "right": true
              },
              {
                "answer": "Improves physics",
                "right": false
              },
              {
                "answer": "Renders custom visuals",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorGUILayout' provide in Unity?",
            "short_title": "EditorGUILayout",
            "answers": [
              {
                "answer": "Automatic layout for Editor GUI elements",
                "right": true
              },
              {
                "answer": "Stops GUI rendering",
                "right": false
              },
              {
                "answer": "Manages physics layout",
                "right": false
              },
              {
                "answer": "Renders animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'AssetDatabase.ImportAsset()'?",
            "short_title": "ImportAsset",
            "answers": [
              {
                "answer": "Forces reimport of an asset",
                "right": true
              },
              {
                "answer": "Renders an asset",
                "right": false
              },
              {
                "answer": "Stops importing",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorApplication.ExecuteMenuItem()' do?",
            "short_title": "ExecuteMenuItem",
            "answers": [
              {
                "answer": "Triggers a menu item programmatically",
                "right": true
              },
              {
                "answer": "Stops menu execution",
                "right": false
              },
              {
                "answer": "Renders menus",
                "right": false
              },
              {
                "answer": "Manages UI",
                "right": false
              }
            ]
          },
          {
            "title": "What is the role of 'PropertyDrawer' in Unity?",
            "short_title": "PropertyDrawer",
            "answers": [
              {
                "answer": "Customizes how properties appear in the Inspector",
                "right": true
              },
              {
                "answer": "Renders properties",
                "right": false
              },
              {
                "answer": "Stops property display",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorPrefs' store in Unity?",
            "short_title": "EditorPrefs",
            "answers": [
              {
                "answer": "Persistent Editor settings across sessions",
                "right": true
              },
              {
                "answer": "Runtime preferences",
                "right": false
              },
              {
                "answer": "Physics preferences",
                "right": false
              },
              {
                "answer": "Animation preferences",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'OnInspectorGUI()' in a CustomEditor?",
            "short_title": "OnInspectorGUI",
            "answers": [
              {
                "answer": "Defines the Inspector UI for a script",
                "right": true
              },
              {
                "answer": "Stops Inspector rendering",
                "right": false
              },
              {
                "answer": "Renders physics",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorSceneManager' manage in Unity?",
            "short_title": "EditorSceneManager",
            "answers": [
              {
                "answer": "Editor-specific scene operations",
                "right": true
              },
              {
                "answer": "Runtime scenes",
                "right": false
              },
              {
                "answer": "Physics scenes",
                "right": false
              },
              {
                "answer": "Rendering scenes",
                "right": false
              }
            ]
          },
          {
            "title": "What is the benefit of 'EditorGUILayout.PropertyField()'?",
            "short_title": "PropertyField",
            "answers": [
              {
                "answer": "Automatically draws a serialized property",
                "right": true
              },
              {
                "answer": "Stops property drawing",
                "right": false
              },
              {
                "answer": "Renders physics",
                "right": false
              },
              {
                "answer": "Manages input",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'AssetPostprocessor' allow in Unity?",
            "short_title": "AssetPostprocessor",
            "answers": [
              {
                "answer": "Customizes asset import pipelines",
                "right": true
              },
              {
                "answer": "Renders assets",
                "right": false
              },
              {
                "answer": "Stops asset imports",
                "right": false
              },
              {
                "answer": "Handles animations",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'EditorApplication.update' delegate?",
            "short_title": "update delegate",
            "answers": [
              {
                "answer": "Runs code every Editor frame",
                "right": true
              },
              {
                "answer": "Stops updates",
                "right": false
              },
              {
                "answer": "Renders frames",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'GUIUtility.GetControlID()' do in Unity?",
            "short_title": "GetControlID",
            "answers": [
              {
                "answer": "Generates a unique ID for GUI controls",
                "right": true
              },
              {
                "answer": "Renders control IDs",
                "right": false
              },
              {
                "answer": "Stops GUI",
                "right": false
              },
              {
                "answer": "Handles input",
                "right": false
              }
            ]
          },
          {
            "title": "What is the advantage of 'SerializedObject' in Editor scripting?",
            "short_title": "SerializedObject",
            "answers": [
              {
                "answer": "Safely modifies serialized data",
                "right": true
              },
              {
                "answer": "Improves rendering",
                "right": false
              },
              {
                "answer": "Manages physics",
                "right": false
              },
              {
                "answer": "Stops serialization",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorUtility.IsPersistent()' check?",
            "short_title": "IsPersistent",
            "answers": [
              {
                "answer": "If an object is saved as an asset",
                "right": true
              },
              {
                "answer": "If rendering is persistent",
                "right": false
              },
              {
                "answer": "If physics is persistent",
                "right": false
              },
              {
                "answer": "If animations persist",
                "right": false
              }
            ]
          },
          {
            "title": "What is the purpose of 'CustomPropertyDrawer' in Unity?",
            "short_title": "CustomPropertyDrawer",
            "answers": [
              {
                "answer": "Customizes property display for specific types",
                "right": true
              },
              {
                "answer": "Renders custom properties",
                "right": false
              },
              {
                "answer": "Stops property rendering",
                "right": false
              },
              {
                "answer": "Handles physics",
                "right": false
              }
            ]
          },
          {
            "title": "What does 'EditorApplication.SaveCurrentSceneIfUserWantsTo()' do?",
            "short_title": "SaveCurrentSceneIfUserWantsTo",
            "answers": [
              {
                "answer": "Prompts to save the current scene",
                "right": true
              },
              {
                "answer": "Stops scene saving",
                "right": false
              },
              {
                "answer": "Renders the scene",
                "right": false
              },
              {
                "answer": "Manages animations",
                "right": false
              }
            ]
          }
        ]
      }
    },
    {
      "rank": "Senior",
      "subjects": {
        "Advanced Shader Programming and Optimization": [
          {
            "title": "What is the primary purpose of a Compute Shader in Unity?",
            "short_title": "Compute Shader purpose",
            "answers": [
              { "answer": "Performs general-purpose GPU computations", "right": true },
              { "answer": "Renders vertex data", "right": false },
              { "answer": "Handles physics", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What does 'SV_DispatchThreadID' represent in an HLSL Compute Shader?",
            "short_title": "SV_DispatchThreadID",
            "answers": [
              { "answer": "The unique ID of a thread in the dispatch", "right": true },
              { "answer": "The vertex position", "right": false },
              { "answer": "The rendering thread", "right": false },
              { "answer": "The physics thread", "right": false }
            ]
          },
          {
            "title": "What is the benefit of using 'Shader Feature' directives in Unity?",
            "short_title": "Shader Feature",
            "answers": [
              { "answer": "Reduces shader variants for build optimization", "right": true },
              { "answer": "Improves physics", "right": false },
              { "answer": "Renders faster", "right": false },
              { "answer": "Stops shaders", "right": false }
            ]
          },
          {
            "title": "What does 'Tessellation' achieve in a Unity shader?",
            "short_title": "Tessellation",
            "answers": [
              { "answer": "Subdivides geometry for smoother surfaces", "right": true },
              { "answer": "Renders flat geometry", "right": false },
              { "answer": "Handles physics", "right": false },
              { "answer": "Manages animations", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Shader.PropertyToID()' in Unity?",
            "short_title": "PropertyToID",
            "answers": [
              { "answer": "Converts property names to integer IDs for efficiency", "right": true },
              { "answer": "Stops property access", "right": false },
              { "answer": "Renders properties", "right": false },
              { "answer": "Handles input", "right": false }
            ]
          },
          {
            "title": "What does 'RWStructuredBuffer' enable in a Compute Shader?",
            "short_title": "RWStructuredBuffer",
            "answers": [
              { "answer": "Read-write access to structured data", "right": true },
              { "answer": "Read-only vertex data", "right": false },
              { "answer": "Rendering buffers", "right": false },
              { "answer": "Physics buffers", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'Shader Warmup' in Unity?",
            "short_title": "Shader Warmup",
            "answers": [
              { "answer": "Precompiles shaders to avoid runtime hitches", "right": true },
              { "answer": "Improves physics", "right": false },
              { "answer": "Renders faster", "right": false },
              { "answer": "Stops shaders", "right": false }
            ]
          },
          {
            "title": "What does 'SV_POSITION' output in an HLSL vertex shader?",
            "short_title": "SV_POSITION",
            "answers": [
              { "answer": "The vertex position in clip space", "right": true },
              { "answer": "The vertex color", "right": false },
              { "answer": "The vertex normal", "right": false },
              { "answer": "The vertex UV", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Graph SubShader Tags'?",
            "short_title": "SubShader Tags",
            "answers": [
              { "answer": "Defines rendering behavior like queue or type", "right": true },
              { "answer": "Renders sub-shaders", "right": false },
              { "answer": "Stops rendering", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What does 'cbuffer' declare in an HLSL shader?",
            "short_title": "cbuffer",
            "answers": [
              { "answer": "A constant buffer for uniform data", "right": true },
              { "answer": "A render buffer", "right": false },
              { "answer": "A physics buffer", "right": false },
              { "answer": "An animation buffer", "right": false }
            ]
          },
          {
            "title": "What is the benefit of 'Branch Flattening' in shader optimization?",
            "short_title": "Branch Flattening",
            "answers": [
              { "answer": "Reduces GPU branching overhead", "right": true },
              { "answer": "Improves physics", "right": false },
              { "answer": "Renders branches", "right": false },
              { "answer": "Stops optimization", "right": false }
            ]
          },
          {
            "title": "What does 'Shader.EnableKeyword()' do in Unity?",
            "short_title": "EnableKeyword",
            "answers": [
              { "answer": "Activates a shader variant dynamically", "right": true },
              { "answer": "Disables keywords", "right": false },
              { "answer": "Renders keywords", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What is the role of 'Geometry Shader' in Unity?",
            "short_title": "Geometry Shader",
            "answers": [
              { "answer": "Modifies or generates geometry between vertex and fragment stages", "right": true },
              { "answer": "Renders vertex data", "right": false },
              { "answer": "Handles physics", "right": false },
              { "answer": "Stops geometry", "right": false }
            ]
          },
          {
            "title": "What does 'UNITY_MATRIX_MVP' represent in an HLSL shader?",
            "short_title": "UNITY_MATRIX_MVP",
            "answers": [
              { "answer": "The combined model-view-projection matrix", "right": true },
              { "answer": "The model matrix only", "right": false },
              { "answer": "The physics matrix", "right": false },
              { "answer": "The rendering matrix", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Stripping' in Unity?",
            "short_title": "Shader Stripping",
            "answers": [
              { "answer": "Removes unused shader variants for build size", "right": true },
              { "answer": "Stops shaders", "right": false },
              { "answer": "Renders stripped shaders", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What does 'StructuredBuffer' provide in an HLSL shader?",
            "short_title": "StructuredBuffer",
            "answers": [
              { "answer": "Read-only structured data access", "right": true },
              { "answer": "Write-only data", "right": false },
              { "answer": "Rendering buffers", "right": false },
              { "answer": "Physics buffers", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'Shader LOD' in Unity?",
            "short_title": "Shader LOD",
            "answers": [
              { "answer": "Controls shader complexity based on hardware", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops shaders", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What does 'SV_Target' specify in an HLSL fragment shader?",
            "short_title": "SV_Target",
            "answers": [
              { "answer": "The output color to the render target", "right": true },
              { "answer": "The vertex position", "right": false },
              { "answer": "The physics target", "right": false },
              { "answer": "The animation target", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Shader Pass' in Unity?",
            "short_title": "Shader Pass",
            "answers": [
              { "answer": "Defines a single rendering operation", "right": true },
              { "answer": "Stops rendering passes", "right": false },
              { "answer": "Renders physics", "right": false },
              { "answer": "Handles input", "right": false }
            ]
          },
          {
            "title": "What does 'ShaderUtil.ShaderToSM()' estimate in Unity?",
            "short_title": "ShaderToSM",
            "answers": [
              { "answer": "The Shader Model level of a shader", "right": true },
              { "answer": "Rendering speed", "right": false },
              { "answer": "Physics model", "right": false },
              { "answer": "Animation level", "right": false }
            ]
          }
        ],
        "Physics Engine Customization and Performance": [
          {
            "title": "What is the primary physics engine used by Unity for 3D simulations?",
            "short_title": "Physics engine",
            "answers": [
              { "answer": "PhysX", "right": true },
              { "answer": "Havok", "right": false },
              { "answer": "Bullet", "right": false },
              { "answer": "Box2D", "right": false }
            ]
          },
          {
            "title": "What does 'Physics.autoSyncTransforms' control in Unity?",
            "short_title": "autoSyncTransforms",
            "answers": [
              { "answer": "Whether physics syncs transforms automatically", "right": true },
              { "answer": "Rendering sync", "right": false },
              { "answer": "Animation sync", "right": false },
              { "answer": "UI sync", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'PhysX.PxScene' integration in Unity?",
            "short_title": "PxScene",
            "answers": [
              { "answer": "Allows direct access to PhysX scenes for customization", "right": true },
              { "answer": "Renders physics scenes", "right": false },
              { "answer": "Stops physics", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What does 'Physics.defaultMaxAngularSpeed' optimize?",
            "short_title": "defaultMaxAngularSpeed",
            "answers": [
              { "answer": "Limits global angular velocity for stability", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops physics", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What is the benefit of 'Rigidbody.solverVelocityIterations'?",
            "short_title": "solverVelocityIterations",
            "answers": [
              { "answer": "Improves velocity constraint accuracy", "right": true },
              { "answer": "Renders velocity", "right": false },
              { "answer": "Stops solver", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What does 'PhysicsScene.Simulate()' allow in Unity?",
            "short_title": "PhysicsScene.Simulate",
            "answers": [
              { "answer": "Runs a custom physics simulation in isolation", "right": true },
              { "answer": "Renders physics scenes", "right": false },
              { "answer": "Stops physics", "right": false },
              { "answer": "Manages input", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.bounceThreshold'?",
            "short_title": "bounceThreshold",
            "answers": [
              { "answer": "Sets minimum speed for collision bounces", "right": true },
              { "answer": "Controls rendering bounces", "right": false },
              { "answer": "Stops bounces", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.simulated' control in Unity?",
            "short_title": "Rigidbody2D.simulated",
            "answers": [
              { "answer": "Enables or disables 2D physics simulation", "right": true },
              { "answer": "Renders 2D physics", "right": false },
              { "answer": "Stops 2D rendering", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'PhysicsScene.Raycast()' over global raycasts?",
            "short_title": "PhysicsScene.Raycast",
            "answers": [
              { "answer": "Targets a specific physics scene", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops raycasts", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What does 'Physics.defaultSolverIterations' affect?",
            "short_title": "defaultSolverIterations",
            "answers": [
              { "answer": "Global constraint solving accuracy", "right": true },
              { "answer": "Rendering iterations", "right": false },
              { "answer": "Physics stops", "right": false },
              { "answer": "Animation accuracy", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'PhysX.PxConstraint' in custom physics?",
            "short_title": "PxConstraint",
            "answers": [
              { "answer": "Defines custom joint constraints", "right": true },
              { "answer": "Renders constraints", "right": false },
              { "answer": "Stops constraints", "right": false },
              { "answer": "Handles UI", "right": false }
            ]
          },
          {
            "title": "What does 'Physics.IgnoreLayerCollision()' optimize?",
            "short_title": "IgnoreLayerCollision",
            "answers": [
              { "answer": "Reduces collision checks between layers", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops physics", "right": false },
              { "answer": "Manages animations", "right": false }
            ]
          },
          {
            "title": "What is the benefit of 'Rigidbody.freezeRotation'?",
            "short_title": "freezeRotation",
            "answers": [
              { "answer": "Prevents unwanted physics rotation", "right": true },
              { "answer": "Renders frozen objects", "right": false },
              { "answer": "Stops movement", "right": false },
              { "answer": "Handles input", "right": false }
            ]
          },
          {
            "title": "What does 'PhysicsSceneExtensions.GetPhysicsScene()' do?",
            "short_title": "GetPhysicsScene",
            "answers": [
              { "answer": "Retrieves a scene’s physics context", "right": true },
              { "answer": "Renders physics scenes", "right": false },
              { "answer": "Stops physics scenes", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.defaultPhysicsScene'?",
            "short_title": "defaultPhysicsScene",
            "answers": [
              { "answer": "Accesses the global physics simulation", "right": true },
              { "answer": "Renders default scenes", "right": false },
              { "answer": "Stops physics", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What does 'Rigidbody2D.gravityScale' customize?",
            "short_title": "gravityScale",
            "answers": [
              { "answer": "The strength of gravity on a 2D object", "right": true },
              { "answer": "Rendering scale", "right": false },
              { "answer": "Physics stop scale", "right": false },
              { "answer": "Animation scale", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'Physics.OverlapSphereNonAlloc()'?",
            "short_title": "OverlapSphereNonAlloc",
            "answers": [
              { "answer": "Avoids allocations for performance", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops overlaps", "right": false },
              { "answer": "Handles input", "right": false }
            ]
          },
          {
            "title": "What does 'PhysX.PxCooking' enable in Unity?",
            "short_title": "PxCooking",
            "answers": [
              { "answer": "Preprocesses collision meshes for efficiency", "right": true },
              { "answer": "Renders collision", "right": false },
              { "answer": "Stops physics cooking", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Physics.reuseCollisionCallbacks'?",
            "short_title": "reuseCollisionCallbacks",
            "answers": [
              { "answer": "Reuses collision data to reduce overhead", "right": true },
              { "answer": "Renders callbacks", "right": false },
              { "answer": "Stops collisions", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What does 'PhysicsScene.IsValid()' check?",
            "short_title": "IsValid",
            "answers": [
              { "answer": "If a physics scene is properly initialized", "right": true },
              { "answer": "Rendering validity", "right": false },
              { "answer": "Physics stop validity", "right": false },
              { "answer": "Animation validity", "right": false }
            ]
          }
        ],
        "C# Advanced Techniques and Low-Level Optimization": [
          {
            "title": "What is the primary benefit of using 'unsafe' code in C# within Unity?",
            "short_title": "unsafe code",
            "answers": [
              { "answer": "Direct memory access for performance", "right": true },
              { "answer": "Improved rendering", "right": false },
              { "answer": "Physics optimization", "right": false },
              { "answer": "UI management", "right": false }
            ]
          },
          {
            "title": "What does 'fixed' keyword achieve in an unsafe C# block?",
            "short_title": "fixed keyword",
            "answers": [
              { "answer": "Pins memory to prevent GC relocation", "right": true },
              { "answer": "Stops memory access", "right": false },
              { "answer": "Renders fixed data", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Span<T>' in low-level C# optimization?",
            "short_title": "Span<T>",
            "answers": [
              { "answer": "Provides a safe, allocation-free memory view", "right": true },
              { "answer": "Increases allocations", "right": false },
              { "answer": "Renders memory", "right": false },
              { "answer": "Stops physics", "right": false }
            ]
          },
          {
            "title": "What does 'System.Runtime.InteropServices.Marshal' enable in C#?",
            "short_title": "Marshal",
            "answers": [
              { "answer": "Interop with unmanaged code and memory", "right": true },
              { "answer": "Rendering interop", "right": false },
              { "answer": "Physics interop", "right": false },
              { "answer": "Animation interop", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'stackalloc' in C# for Unity?",
            "short_title": "stackalloc",
            "answers": [
              { "answer": "Allocates memory on the stack, avoiding GC", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops memory allocation", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What does 'System.Threading.ThreadPool.UnsafeQueueUserWorkItem()' do?",
            "short_title": "UnsafeQueueUserWorkItem",
            "answers": [
              { "answer": "Queues work without capturing execution context", "right": true },
              { "answer": "Renders thread work", "right": false },
              { "answer": "Stops threading", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Memory<T>' in advanced C# optimization?",
            "short_title": "Memory<T>",
            "answers": [
              { "answer": "Manages memory blocks with ownership semantics", "right": true },
              { "answer": "Handles rendering memory", "right": false },
              { "answer": "Stops memory use", "right": false },
              { "answer": "Manages physics memory", "right": false }
            ]
          },
          {
            "title": "What does 'NativeMemory.Alloc()' provide in Unity’s unsafe context?",
            "short_title": "NativeMemory.Alloc",
            "answers": [
              { "answer": "Allocates unmanaged memory for performance", "right": true },
              { "answer": "Renders native memory", "right": false },
              { "answer": "Stops allocation", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What is the benefit of 'System.Runtime.CompilerServices.Unsafe' class?",
            "short_title": "Unsafe class",
            "answers": [
              { "answer": "Provides safe wrappers for pointer operations", "right": true },
              { "answer": "Improves physics", "right": false },
              { "answer": "Renders unsafe data", "right": false },
              { "answer": "Stops optimization", "right": false }
            ]
          },
          {
            "title": "What does 'ThreadLocal<T>' optimize in multithreaded C#?",
            "short_title": "ThreadLocal<T>",
            "answers": [
              { "answer": "Provides per-thread variable instances", "right": true },
              { "answer": "Stops threading", "right": false },
              { "answer": "Renders threads", "right": false },
              { "answer": "Handles UI", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'System.Buffers.MemoryPool<T>' in Unity?",
            "short_title": "MemoryPool<T>",
            "answers": [
              { "answer": "Manages reusable memory buffers", "right": true },
              { "answer": "Renders memory pools", "right": false },
              { "answer": "Stops memory pooling", "right": false },
              { "answer": "Manages physics", "right": false }
            ]
          },
          {
            "title": "What does 'Volatile.Write()' ensure in C# threading?",
            "short_title": "Volatile.Write",
            "answers": [
              { "answer": "Immediate visibility of writes across threads", "right": true },
              { "answer": "Stops threading", "right": false },
              { "answer": "Renders writes", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'ref struct' in C# for Unity?",
            "short_title": "ref struct",
            "answers": [
              { "answer": "Restricts to stack-only, reducing GC pressure", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops structs", "right": false },
              { "answer": "Manages physics", "right": false }
            ]
          },
          {
            "title": "What does 'System.Runtime.InteropServices.GCHandle.Alloc()' do?",
            "short_title": "GCHandle.Alloc",
            "answers": [
              { "answer": "Pins managed objects for unmanaged access", "right": true },
              { "answer": "Renders handles", "right": false },
              { "answer": "Stops GC", "right": false },
              { "answer": "Handles UI", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'System.Threading.Tasks.ParallelOptions'?",
            "short_title": "ParallelOptions",
            "answers": [
              { "answer": "Configures parallel task execution", "right": true },
              { "answer": "Stops parallel tasks", "right": false },
              { "answer": "Renders tasks", "right": false },
              { "answer": "Manages physics", "right": false }
            ]
          },
          {
            "title": "What does 'NativeArray<T>.CopyFrom()' optimize in Unity?",
            "short_title": "NativeArray.CopyFrom",
            "answers": [
              { "answer": "Fast data transfer to unmanaged memory", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops copying", "right": false },
              { "answer": "Handles animations", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'System.Runtime.CompilerServices.InlineArray'?",
            "short_title": "InlineArray",
            "answers": [
              { "answer": "Reduces overhead for small fixed-size arrays", "right": true },
              { "answer": "Renders arrays", "right": false },
              { "answer": "Stops array use", "right": false },
              { "answer": "Manages physics", "right": false }
            ]
          },
          {
            "title": "What does 'System.Threading.Barrier' provide in C#?",
            "short_title": "Barrier",
            "answers": [
              { "answer": "Synchronizes threads at a common point", "right": true },
              { "answer": "Stops threading", "right": false },
              { "answer": "Renders barriers", "right": false },
              { "answer": "Handles UI", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'System.Buffers.IBufferWriter<T>'?",
            "short_title": "IBufferWriter<T>",
            "answers": [
              { "answer": "Writes data efficiently to buffers", "right": true },
              { "answer": "Stops buffer writing", "right": false },
              { "answer": "Renders buffers", "right": false },
              { "answer": "Manages physics", "right": false }
            ]
          },
          {
            "title": "What does 'System.Runtime.GCSettings.LatencyMode' control?",
            "short_title": "LatencyMode",
            "answers": [
              { "answer": "GC latency behavior for performance tuning", "right": true },
              { "answer": "Rendering latency", "right": false },
              { "answer": "Physics latency", "right": false },
              { "answer": "Animation latency", "right": false }
            ]
          }
        ],
        "Animation Rigging and Procedural Animation": [
          {
            "title": "What is the primary purpose of Unity’s Animation Rigging package?",
            "short_title": "Animation Rigging purpose",
            "answers": [
              { "answer": "Runtime rigging for procedural animation", "right": true },
              { "answer": "Rendering animations", "right": false },
              { "answer": "Physics rigging", "right": false },
              { "answer": "UI animation", "right": false }
            ]
          },
          {
            "title": "What does 'RigBuilder' do in Unity’s Animation Rigging?",
            "short_title": "RigBuilder",
            "answers": [
              { "answer": "Manages and evaluates rigging constraints", "right": true },
              { "answer": "Stops rigging", "right": false },
              { "answer": "Renders rigs", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'TwoBoneIKConstraint' in Animation Rigging?",
            "short_title": "TwoBoneIKConstraint",
            "answers": [
              { "answer": "Solves IK for a two-bone chain", "right": true },
              { "answer": "Renders IK", "right": false },
              { "answer": "Stops IK", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What does 'MultiAimConstraint' achieve in Unity?",
            "short_title": "MultiAimConstraint",
            "answers": [
              { "answer": "Orients a bone toward multiple targets", "right": true },
              { "answer": "Stops aiming", "right": false },
              { "answer": "Renders aim visuals", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What is the benefit of 'RigConstraint' base class?",
            "short_title": "RigConstraint",
            "answers": [
              { "answer": "Enables custom rigging constraints", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops constraints", "right": false },
              { "answer": "Manages animations", "right": false }
            ]
          },
          {
            "title": "What does 'AnimatorJobExtensions.AddJobDependency()' do?",
            "short_title": "AddJobDependency",
            "answers": [
              { "answer": "Links animator jobs to custom jobs", "right": true },
              { "answer": "Renders jobs", "right": false },
              { "answer": "Stops animator jobs", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'Procedural Animation' in Unity?",
            "short_title": "Procedural Animation",
            "answers": [
              { "answer": "Generates animation dynamically at runtime", "right": true },
              { "answer": "Stops animation", "right": false },
              { "answer": "Renders static animations", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What does 'TwistChainConstraint' control in Animation Rigging?",
            "short_title": "TwistChainConstraint",
            "answers": [
              { "answer": "Distributes twist along a bone chain", "right": true },
              { "answer": "Renders twists", "right": false },
              { "answer": "Stops twisting", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What is the role of 'AnimationScriptPlayable' in Unity?",
            "short_title": "AnimationScriptPlayable",
            "answers": [
              { "answer": "Runs custom animation logic in a PlayableGraph", "right": true },
              { "answer": "Stops playables", "right": false },
              { "answer": "Renders animations", "right": false },
              { "answer": "Manages physics", "right": false }
            ]
          },
          {
            "title": "What does 'RigTransform' attribute optimize?",
            "short_title": "RigTransform",
            "answers": [
              { "answer": "Marks transforms for rigging efficiency", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops transforms", "right": false },
              { "answer": "Handles UI", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'PlayableGraph.Evaluate()'?",
            "short_title": "Evaluate",
            "answers": [
              { "answer": "Manually updates animation playables", "right": true },
              { "answer": "Renders playables", "right": false },
              { "answer": "Stops evaluation", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What does 'ChainIKConstraint' solve in Unity?",
            "short_title": "ChainIKConstraint",
            "answers": [
              { "answer": "IK for a multi-bone chain", "right": true },
              { "answer": "Stops IK", "right": false },
              { "answer": "Renders chains", "right": false },
              { "answer": "Manages animations", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'AnimationUtility.SetAnimationEvents()'?",
            "short_title": "SetAnimationEvents",
            "answers": [
              { "answer": "Adds events to an AnimationClip at runtime", "right": true },
              { "answer": "Stops events", "right": false },
              { "answer": "Renders events", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What does 'RigLayer' manage in Animation Rigging?",
            "short_title": "RigLayer",
            "answers": [
              { "answer": "Groups constraints for enabling/disabling", "right": true },
              { "answer": "Renders layers", "right": false },
              { "answer": "Stops rigging", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What is the benefit of 'Animator.Rebind()' in Unity?",
            "short_title": "Rebind",
            "answers": [
              { "answer": "Resets bindings for runtime changes", "right": true },
              { "answer": "Improves rendering", "right": false },
              { "answer": "Stops animator", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What does 'PlayableDirector.Evaluate()' do?",
            "short_title": "PlayableDirector.Evaluate",
            "answers": [
              { "answer": "Manually updates the playable timeline", "right": true },
              { "answer": "Renders timelines", "right": false },
              { "answer": "Stops evaluation", "right": false },
              { "answer": "Manages input", "right": false }
            ]
          },
          {
            "title": "What is the purpose of 'AnimationRiggingConstraint' interface?",
            "short_title": "AnimationRiggingConstraint",
            "answers": [
              { "answer": "Defines custom constraint behavior", "right": true },
              { "answer": "Stops constraints", "right": false },
              { "answer": "Renders constraints", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          },
          {
            "title": "What does 'Animator.SetBoneLocalRotation()' achieve?",
            "short_title": "SetBoneLocalRotation",
            "answers": [
              { "answer": "Sets a bone’s local rotation at runtime", "right": true },
              { "answer": "Renders bone rotation", "right": false },
              { "answer": "Stops rotation", "right": false },
              { "answer": "Manages UI", "right": false }
            ]
          },
          {
            "title": "What is the advantage of 'AnimationPlayableOutput'?",
            "short_title": "AnimationPlayableOutput",
            "answers": [
              { "answer": "Routes animation data to custom outputs", "right": true },
              { "answer": "Improves physics", "right": false },
              { "answer": "Renders outputs", "right": false },
              { "answer": "Stops animations", "right": false }
            ]
          },
          {
            "title": "What does 'RigEffectorData' define in Animation Rigging?",
            "short_title": "RigEffectorData",
            "answers": [
              { "answer": "Visual representation of constraint targets", "right": true },
              { "answer": "Renders effectors", "right": false },
              { "answer": "Stops effectors", "right": false },
              { "answer": "Handles physics", "right": false }
            ]
          }
        ]
      }
    }
  ]
}
    
